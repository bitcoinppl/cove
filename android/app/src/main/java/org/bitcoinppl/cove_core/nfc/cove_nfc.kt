// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package org.bitcoinppl.cove_core.nfc

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.ffi_cove_nfc_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.ffi_cove_nfc_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Initial value and increment amount for handles. 
// These ensure that Kotlin-generated handles always have the lowest bit set
private const val UNIFFI_HANDLEMAP_INITIAL = 1.toLong()
private const val UNIFFI_HANDLEMAP_DELTA = 2.toLong()

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    // Start 
    private val counter = java.util.concurrent.atomic.AtomicLong(UNIFFI_HANDLEMAP_INITIAL)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(UNIFFI_HANDLEMAP_DELTA)
        map.put(handle, obj)
        return handle
    }

    // Clone a handle, creating a new one
    fun clone(handle: Long): Long {
        val obj = map.get(handle) ?: throw InternalException("UniffiHandleMap.clone: Invalid handle")
        return insert(obj)
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "coveffi"
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureDroppedCallback : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceClone : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
    : Long
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFutureDroppedCallbackStruct(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureDroppedCallback? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureDroppedCallback? = null,
    ): UniffiForeignFutureDroppedCallbackStruct(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureDroppedCallbackStruct) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureResultVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultVoid.UniffiByValue,)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is
// rather `InterfaceTooLargeException`, caused by too many methods
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib (this)
// * IntegrityCheckingUniffiLib
// And all checksum methods are put into `IntegrityCheckingUniffiLib`
// we allow for ~2x as many methods in the UniffiLib interface.
//
// Note: above all written when we used JNA's `loadIndirect` etc.
// We now use JNA's "direct mapping" - unclear if same considerations apply exactly.
internal object IntegrityCheckingUniffiLib {
    init {
        Native.register(IntegrityCheckingUniffiLib::class.java, findLibraryName(componentName = "cove_nfc"))
        uniffiCheckContractApiVersion(this)
        uniffiCheckApiChecksums(this)
    }
    external fun uniffi_cove_nfc_checksum_func_nfc_message_is_equal(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_data_from_records(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_is_resumeable(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_is_started(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_message_info(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_parse(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ffinfcreader_string_from_record(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_nfcconst_bytes_per_block(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_nfcconst_number_of_blocks_per_chunk(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_nfcconst_total_bytes_per_chunk(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_nfcmessage_data(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_nfcmessage_string(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ndefrecordreader_id(
    ): Short
    external fun uniffi_cove_nfc_checksum_method_ndefrecordreader_type_(
    ): Short
    external fun uniffi_cove_nfc_checksum_constructor_ffinfcreader_new(
    ): Short
    external fun uniffi_cove_nfc_checksum_constructor_nfcconst_new(
    ): Short
    external fun uniffi_cove_nfc_checksum_constructor_nfcmessage_try_new(
    ): Short
    external fun uniffi_cove_nfc_checksum_constructor_ndefrecordreader_new(
    ): Short
    external fun ffi_cove_nfc_uniffi_contract_version(
    ): Int
    
        
}

internal object UniffiLib {
    
    // The Cleaner for the whole library
    internal val CLEANER: UniffiCleaner by lazy {
        UniffiCleaner.create()
    }
    

    init {
        Native.register(UniffiLib::class.java, findLibraryName(componentName = "cove_nfc"))
        
    }
    external fun uniffi_cove_nfc_fn_clone_ffinfcreader(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_free_ffinfcreader(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun uniffi_cove_nfc_fn_constructor_ffinfcreader_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_data_from_records(`ptr`: Long,`records`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_is_resumeable(`ptr`: Long,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_is_started(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_message_info(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_parse(`ptr`: Long,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_method_ffinfcreader_string_from_record(`ptr`: Long,`record`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_clone_nfcconst(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_free_nfcconst(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun uniffi_cove_nfc_fn_constructor_nfcconst_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_method_nfcconst_bytes_per_block(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    external fun uniffi_cove_nfc_fn_method_nfcconst_number_of_blocks_per_chunk(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    external fun uniffi_cove_nfc_fn_method_nfcconst_total_bytes_per_chunk(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    external fun uniffi_cove_nfc_fn_clone_nfcmessage(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_free_nfcmessage(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun uniffi_cove_nfc_fn_constructor_nfcmessage_try_new(`string`: RustBuffer.ByValue,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_method_nfcmessage_data(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_method_nfcmessage_string(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_clone_ndefrecordreader(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_free_ndefrecordreader(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun uniffi_cove_nfc_fn_constructor_ndefrecordreader_new(`record`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun uniffi_cove_nfc_fn_method_ndefrecordreader_id(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_method_ndefrecordreader_type_(`ptr`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun uniffi_cove_nfc_fn_func_nfc_message_is_equal(`lhs`: Long,`rhs`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    external fun ffi_cove_nfc_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun ffi_cove_nfc_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun ffi_cove_nfc_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    external fun ffi_cove_nfc_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun ffi_cove_nfc_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_u8(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    external fun ffi_cove_nfc_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_i8(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    external fun ffi_cove_nfc_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_u16(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    external fun ffi_cove_nfc_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_i16(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    external fun ffi_cove_nfc_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_u32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    external fun ffi_cove_nfc_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_i32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    external fun ffi_cove_nfc_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_u64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun ffi_cove_nfc_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_i64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    external fun ffi_cove_nfc_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_f32(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    external fun ffi_cove_nfc_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_f64(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    external fun ffi_cove_nfc_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    external fun ffi_cove_nfc_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_cancel_void(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_free_void(`handle`: Long,
    ): Unit
    external fun ffi_cove_nfc_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    
        
}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 30
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_cove_nfc_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_cove_nfc_checksum_func_nfc_message_is_equal() != 46704.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_data_from_records() != 47483.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_is_resumeable() != 29505.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_is_started() != 48293.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_message_info() != 39232.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_parse() != 50218.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ffinfcreader_string_from_record() != 37789.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_nfcconst_bytes_per_block() != 58669.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_nfcconst_number_of_blocks_per_chunk() != 30309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_nfcconst_total_bytes_per_chunk() != 10473.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_nfcmessage_data() != 54544.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_nfcmessage_string() != 16155.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ndefrecordreader_id() != 26890.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_method_ndefrecordreader_type_() != 36709.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_constructor_ffinfcreader_new() != 28355.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_constructor_nfcconst_new() != 10481.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_constructor_nfcmessage_try_new() != 25513.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cove_nfc_checksum_constructor_ndefrecordreader_new() != 7649.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    IntegrityCheckingUniffiLib
    // UniffiLib() initialized as objects are used, but we still need to explicitly
    // reference it so initialization across crates works as expected.
    UniffiLib
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Placeholder object used to signal that we're constructing an interface with a FFI handle.
 *
 * This is the first argument for interface constructors that input a raw handle. It exists is that
 * so we can avoid signature conflicts when an interface has a regular constructor than inputs a
 * Long.
 *
 * @suppress
 * */
object UniffiWithHandle

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoHandle
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a handle
// to the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque handle to the underlying Rust struct.
//     Method calls need to read this handle from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its handle should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the handle, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the handle, but is interrupted
//      before it can pass the handle over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read handle value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


//
public interface FfiNfcReaderInterface {
    
    fun `dataFromRecords`(`records`: List<NdefRecord>): kotlin.ByteArray
    
    fun `isResumeable`(`data`: kotlin.ByteArray)
    
    fun `isStarted`(): kotlin.Boolean
    
    fun `messageInfo`(): MessageInfo?
    
    fun `parse`(`data`: kotlin.ByteArray): ParseResult
    
    fun `stringFromRecord`(`record`: NdefRecord): kotlin.String?
    
    companion object
}

open class FfiNfcReader: Disposable, AutoCloseable, FfiNfcReaderInterface
{

    @Suppress("UNUSED_PARAMETER")
    /**
     * @suppress
     */
    constructor(withHandle: UniffiWithHandle, handle: Long) {
        this.handle = handle
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    /**
     * @suppress
     *
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noHandle: NoHandle) {
        this.handle = 0
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }
    constructor() :
        this(UniffiWithHandle, 
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_constructor_ffinfcreader_new(
    
        _status)
}
    )

    protected val handle: Long
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the handle being freed concurrently.
        try {
            return block(this.uniffiCloneHandle())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val handle: Long) : Runnable {
        override fun run() {
            if (handle == 0.toLong()) {
                // Fake object created with `NoHandle`, don't try to free.
                return;
            }
            uniffiRustCall { status ->
                UniffiLib.uniffi_cove_nfc_fn_free_ffinfcreader(handle, status)
            }
        }
    }

    /**
     * @suppress
     */
    fun uniffiCloneHandle(): Long {
        if (handle == 0.toLong()) {
            throw InternalException("uniffiCloneHandle() called on NoHandle object");
        }
        return uniffiRustCall() { status ->
            UniffiLib.uniffi_cove_nfc_fn_clone_ffinfcreader(handle, status)
        }
    }

    override fun `dataFromRecords`(`records`: List<NdefRecord>): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_data_from_records(
        it,
        FfiConverterSequenceTypeNdefRecord.lower(`records`),_status)
}
    }
    )
    }
    

    
    @Throws(ResumeException::class)override fun `isResumeable`(`data`: kotlin.ByteArray)
        = 
    callWithHandle {
    uniffiRustCallWithError(ResumeException) { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_is_resumeable(
        it,
        FfiConverterByteArray.lower(`data`),_status)
}
    }
    
    

    override fun `isStarted`(): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_is_started(
        it,
        _status)
}
    }
    )
    }
    

    override fun `messageInfo`(): MessageInfo? {
            return FfiConverterOptionalTypeMessageInfo.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_message_info(
        it,
        _status)
}
    }
    )
    }
    

    
    @Throws(NfcReaderException::class)override fun `parse`(`data`: kotlin.ByteArray): ParseResult {
            return FfiConverterTypeParseResult.lift(
    callWithHandle {
    uniffiRustCallWithError(NfcReaderException) { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_parse(
        it,
        FfiConverterByteArray.lower(`data`),_status)
}
    }
    )
    }
    

    override fun `stringFromRecord`(`record`: NdefRecord): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ffinfcreader_string_from_record(
        it,
        FfiConverterTypeNdefRecord.lower(`record`),_status)
}
    }
    )
    }
    

    

    


    
    
    /**
     * @suppress
     */
    companion object
    
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiNfcReader: FfiConverter<FfiNfcReader, Long> {
    override fun lower(value: FfiNfcReader): Long {
        return value.uniffiCloneHandle()
    }

    override fun lift(value: Long): FfiNfcReader {
        return FfiNfcReader(UniffiWithHandle, value)
    }

    override fun read(buf: ByteBuffer): FfiNfcReader {
        return lift(buf.getLong())
    }

    override fun allocationSize(value: FfiNfcReader) = 8UL

    override fun write(value: FfiNfcReader, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}


// This template implements a class for working with a Rust struct via a handle
// to the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque handle to the underlying Rust struct.
//     Method calls need to read this handle from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its handle should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the handle, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the handle, but is interrupted
//      before it can pass the handle over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read handle value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


//
public interface NfcConstInterface {
    
    fun `bytesPerBlock`(): kotlin.UShort
    
    fun `numberOfBlocksPerChunk`(): kotlin.UShort
    
    fun `totalBytesPerChunk`(): kotlin.UShort
    
    companion object
}

open class NfcConst: Disposable, AutoCloseable, NfcConstInterface
{

    @Suppress("UNUSED_PARAMETER")
    /**
     * @suppress
     */
    constructor(withHandle: UniffiWithHandle, handle: Long) {
        this.handle = handle
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    /**
     * @suppress
     *
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noHandle: NoHandle) {
        this.handle = 0
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }
    constructor() :
        this(UniffiWithHandle, 
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_constructor_nfcconst_new(
    
        _status)
}
    )

    protected val handle: Long
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the handle being freed concurrently.
        try {
            return block(this.uniffiCloneHandle())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val handle: Long) : Runnable {
        override fun run() {
            if (handle == 0.toLong()) {
                // Fake object created with `NoHandle`, don't try to free.
                return;
            }
            uniffiRustCall { status ->
                UniffiLib.uniffi_cove_nfc_fn_free_nfcconst(handle, status)
            }
        }
    }

    /**
     * @suppress
     */
    fun uniffiCloneHandle(): Long {
        if (handle == 0.toLong()) {
            throw InternalException("uniffiCloneHandle() called on NoHandle object");
        }
        return uniffiRustCall() { status ->
            UniffiLib.uniffi_cove_nfc_fn_clone_nfcconst(handle, status)
        }
    }

    override fun `bytesPerBlock`(): kotlin.UShort {
            return FfiConverterUShort.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_nfcconst_bytes_per_block(
        it,
        _status)
}
    }
    )
    }
    

    override fun `numberOfBlocksPerChunk`(): kotlin.UShort {
            return FfiConverterUShort.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_nfcconst_number_of_blocks_per_chunk(
        it,
        _status)
}
    }
    )
    }
    

    override fun `totalBytesPerChunk`(): kotlin.UShort {
            return FfiConverterUShort.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_nfcconst_total_bytes_per_chunk(
        it,
        _status)
}
    }
    )
    }
    

    

    


    
    
    /**
     * @suppress
     */
    companion object
    
}


/**
 * @suppress
 */
public object FfiConverterTypeNfcConst: FfiConverter<NfcConst, Long> {
    override fun lower(value: NfcConst): Long {
        return value.uniffiCloneHandle()
    }

    override fun lift(value: Long): NfcConst {
        return NfcConst(UniffiWithHandle, value)
    }

    override fun read(buf: ByteBuffer): NfcConst {
        return lift(buf.getLong())
    }

    override fun allocationSize(value: NfcConst) = 8UL

    override fun write(value: NfcConst, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}


// This template implements a class for working with a Rust struct via a handle
// to the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque handle to the underlying Rust struct.
//     Method calls need to read this handle from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its handle should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the handle, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the handle, but is interrupted
//      before it can pass the handle over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read handle value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


//
/**
 * A NFC message, could contain a string, data (bytes) or both
 */
public interface NfcMessageInterface {
    
    fun `data`(): kotlin.ByteArray?
    
    fun `string`(): kotlin.String?
    
    companion object
}

/**
 * A NFC message, could contain a string, data (bytes) or both
 */
open class NfcMessage: Disposable, AutoCloseable, NfcMessageInterface
{

    @Suppress("UNUSED_PARAMETER")
    /**
     * @suppress
     */
    constructor(withHandle: UniffiWithHandle, handle: Long) {
        this.handle = handle
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    /**
     * @suppress
     *
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noHandle: NoHandle) {
        this.handle = 0
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    protected val handle: Long
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the handle being freed concurrently.
        try {
            return block(this.uniffiCloneHandle())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val handle: Long) : Runnable {
        override fun run() {
            if (handle == 0.toLong()) {
                // Fake object created with `NoHandle`, don't try to free.
                return;
            }
            uniffiRustCall { status ->
                UniffiLib.uniffi_cove_nfc_fn_free_nfcmessage(handle, status)
            }
        }
    }

    /**
     * @suppress
     */
    fun uniffiCloneHandle(): Long {
        if (handle == 0.toLong()) {
            throw InternalException("uniffiCloneHandle() called on NoHandle object");
        }
        return uniffiRustCall() { status ->
            UniffiLib.uniffi_cove_nfc_fn_clone_nfcmessage(handle, status)
        }
    }

    override fun `data`(): kotlin.ByteArray? {
            return FfiConverterOptionalByteArray.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_nfcmessage_data(
        it,
        _status)
}
    }
    )
    }
    

    override fun `string`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_nfcmessage_string(
        it,
        _status)
}
    }
    )
    }
    

    

    


    
    companion object {
        
    @Throws(NfcMessageException::class) fun `tryNew`(`string`: kotlin.String? = null, `data`: kotlin.ByteArray? = null): NfcMessage {
            return FfiConverterTypeNfcMessage.lift(
    uniffiRustCallWithError(NfcMessageException) { _status ->
    UniffiLib.uniffi_cove_nfc_fn_constructor_nfcmessage_try_new(
    
        FfiConverterOptionalString.lower(`string`),FfiConverterOptionalByteArray.lower(`data`),_status)
}
    )
    }
    

        
    }
    
}


/**
 * @suppress
 */
public object FfiConverterTypeNfcMessage: FfiConverter<NfcMessage, Long> {
    override fun lower(value: NfcMessage): Long {
        return value.uniffiCloneHandle()
    }

    override fun lift(value: Long): NfcMessage {
        return NfcMessage(UniffiWithHandle, value)
    }

    override fun read(buf: ByteBuffer): NfcMessage {
        return lift(buf.getLong())
    }

    override fun allocationSize(value: NfcMessage) = 8UL

    override fun write(value: NfcMessage, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}


// This template implements a class for working with a Rust struct via a handle
// to the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque handle to the underlying Rust struct.
//     Method calls need to read this handle from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its handle should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the handle, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the handle, but is interrupted
//      before it can pass the handle over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read handle value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


//
public interface NdefRecordReaderInterface {
    
    fun `id`(): kotlin.String?
    
    fun `type`(): kotlin.String?
    
    companion object
}

open class NdefRecordReader: Disposable, AutoCloseable, NdefRecordReaderInterface
{

    @Suppress("UNUSED_PARAMETER")
    /**
     * @suppress
     */
    constructor(withHandle: UniffiWithHandle, handle: Long) {
        this.handle = handle
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    /**
     * @suppress
     *
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noHandle: NoHandle) {
        this.handle = 0
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }
    constructor(`record`: NdefRecord) :
        this(UniffiWithHandle, 
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_constructor_ndefrecordreader_new(
    
        FfiConverterTypeNdefRecord.lower(`record`),_status)
}
    )

    protected val handle: Long
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the handle being freed concurrently.
        try {
            return block(this.uniffiCloneHandle())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val handle: Long) : Runnable {
        override fun run() {
            if (handle == 0.toLong()) {
                // Fake object created with `NoHandle`, don't try to free.
                return;
            }
            uniffiRustCall { status ->
                UniffiLib.uniffi_cove_nfc_fn_free_ndefrecordreader(handle, status)
            }
        }
    }

    /**
     * @suppress
     */
    fun uniffiCloneHandle(): Long {
        if (handle == 0.toLong()) {
            throw InternalException("uniffiCloneHandle() called on NoHandle object");
        }
        return uniffiRustCall() { status ->
            UniffiLib.uniffi_cove_nfc_fn_clone_ndefrecordreader(handle, status)
        }
    }

    override fun `id`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ndefrecordreader_id(
        it,
        _status)
}
    }
    )
    }
    

    override fun `type`(): kotlin.String? {
            return FfiConverterOptionalString.lift(
    callWithHandle {
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_method_ndefrecordreader_type_(
        it,
        _status)
}
    }
    )
    }
    

    

    


    
    
    /**
     * @suppress
     */
    companion object
    
}


/**
 * @suppress
 */
public object FfiConverterTypeNdefRecordReader: FfiConverter<NdefRecordReader, Long> {
    override fun lower(value: NdefRecordReader): Long {
        return value.uniffiCloneHandle()
    }

    override fun lift(value: Long): NdefRecordReader {
        return NdefRecordReader(UniffiWithHandle, value)
    }

    override fun read(buf: ByteBuffer): NdefRecordReader {
        return lift(buf.getLong())
    }

    override fun allocationSize(value: NdefRecordReader) = 8UL

    override fun write(value: NdefRecordReader, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}



data class ParsingContext (
    var `messageInfo`: MessageInfo
    , 
    var `needed`: kotlin.UShort
    , 
    var `firstBlockHash`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeParsingContext: FfiConverterRustBuffer<ParsingContext> {
    override fun read(buf: ByteBuffer): ParsingContext {
        return ParsingContext(
            FfiConverterTypeMessageInfo.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ParsingContext) = (
            FfiConverterTypeMessageInfo.allocationSize(value.`messageInfo`) +
            FfiConverterUShort.allocationSize(value.`needed`) +
            FfiConverterOptionalString.allocationSize(value.`firstBlockHash`)
    )

    override fun write(value: ParsingContext, buf: ByteBuffer) {
            FfiConverterTypeMessageInfo.write(value.`messageInfo`, buf)
            FfiConverterUShort.write(value.`needed`, buf)
            FfiConverterOptionalString.write(value.`firstBlockHash`, buf)
    }
}



data class ParsingMessage (
    var `messageInfo`: MessageInfo
    , 
    var `leftOverBytes`: kotlin.ByteArray
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeParsingMessage: FfiConverterRustBuffer<ParsingMessage> {
    override fun read(buf: ByteBuffer): ParsingMessage {
        return ParsingMessage(
            FfiConverterTypeMessageInfo.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: ParsingMessage) = (
            FfiConverterTypeMessageInfo.allocationSize(value.`messageInfo`) +
            FfiConverterByteArray.allocationSize(value.`leftOverBytes`)
    )

    override fun write(value: ParsingMessage, buf: ByteBuffer) {
            FfiConverterTypeMessageInfo.write(value.`messageInfo`, buf)
            FfiConverterByteArray.write(value.`leftOverBytes`, buf)
    }
}



data class NdefHeader (
    var `messageBegin`: kotlin.Boolean
    , 
    var `messageEnd`: kotlin.Boolean
    , 
    var `chunked`: kotlin.Boolean
    , 
    var `shortRecord`: kotlin.Boolean
    , 
    var `hasIdLength`: kotlin.Boolean
    , 
    var `typeNameFormat`: NdefType
    , 
    var `typeLength`: kotlin.UByte
    , 
    var `payloadLength`: kotlin.UInt
    , 
    var `idLength`: kotlin.UByte?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNdefHeader: FfiConverterRustBuffer<NdefHeader> {
    override fun read(buf: ByteBuffer): NdefHeader {
        return NdefHeader(
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeNdefType.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalUByte.read(buf),
        )
    }

    override fun allocationSize(value: NdefHeader) = (
            FfiConverterBoolean.allocationSize(value.`messageBegin`) +
            FfiConverterBoolean.allocationSize(value.`messageEnd`) +
            FfiConverterBoolean.allocationSize(value.`chunked`) +
            FfiConverterBoolean.allocationSize(value.`shortRecord`) +
            FfiConverterBoolean.allocationSize(value.`hasIdLength`) +
            FfiConverterTypeNdefType.allocationSize(value.`typeNameFormat`) +
            FfiConverterUByte.allocationSize(value.`typeLength`) +
            FfiConverterUInt.allocationSize(value.`payloadLength`) +
            FfiConverterOptionalUByte.allocationSize(value.`idLength`)
    )

    override fun write(value: NdefHeader, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`messageBegin`, buf)
            FfiConverterBoolean.write(value.`messageEnd`, buf)
            FfiConverterBoolean.write(value.`chunked`, buf)
            FfiConverterBoolean.write(value.`shortRecord`, buf)
            FfiConverterBoolean.write(value.`hasIdLength`, buf)
            FfiConverterTypeNdefType.write(value.`typeNameFormat`, buf)
            FfiConverterUByte.write(value.`typeLength`, buf)
            FfiConverterUInt.write(value.`payloadLength`, buf)
            FfiConverterOptionalUByte.write(value.`idLength`, buf)
    }
}



data class MessageInfo (
    /**
     * The payload length of the message, including the header info
     */
    var `fullMessageLength`: kotlin.UShort
    , 
    /**
     * The payload length of the message, reported in the info header
     * This is the length of the payload, without the header info
     */
    var `payloadLength`: kotlin.UShort
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMessageInfo: FfiConverterRustBuffer<MessageInfo> {
    override fun read(buf: ByteBuffer): MessageInfo {
        return MessageInfo(
            FfiConverterUShort.read(buf),
            FfiConverterUShort.read(buf),
        )
    }

    override fun allocationSize(value: MessageInfo) = (
            FfiConverterUShort.allocationSize(value.`fullMessageLength`) +
            FfiConverterUShort.allocationSize(value.`payloadLength`)
    )

    override fun write(value: MessageInfo, buf: ByteBuffer) {
            FfiConverterUShort.write(value.`fullMessageLength`, buf)
            FfiConverterUShort.write(value.`payloadLength`, buf)
    }
}



data class TextPayload (
    var `format`: TextPayloadFormat
    , 
    var `language`: kotlin.String
    , 
    var `text`: kotlin.String
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTextPayload: FfiConverterRustBuffer<TextPayload> {
    override fun read(buf: ByteBuffer): TextPayload {
        return TextPayload(
            FfiConverterTypeTextPayloadFormat.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TextPayload) = (
            FfiConverterTypeTextPayloadFormat.allocationSize(value.`format`) +
            FfiConverterString.allocationSize(value.`language`) +
            FfiConverterString.allocationSize(value.`text`)
    )

    override fun write(value: TextPayload, buf: ByteBuffer) {
            FfiConverterTypeTextPayloadFormat.write(value.`format`, buf)
            FfiConverterString.write(value.`language`, buf)
            FfiConverterString.write(value.`text`, buf)
    }
}



data class NdefRecord (
    var `header`: NdefHeader
    , 
    var `type`: kotlin.ByteArray
    , 
    var `id`: kotlin.ByteArray?
    , 
    var `payload`: NdefPayload
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNdefRecord: FfiConverterRustBuffer<NdefRecord> {
    override fun read(buf: ByteBuffer): NdefRecord {
        return NdefRecord(
            FfiConverterTypeNdefHeader.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterOptionalByteArray.read(buf),
            FfiConverterTypeNdefPayload.read(buf),
        )
    }

    override fun allocationSize(value: NdefRecord) = (
            FfiConverterTypeNdefHeader.allocationSize(value.`header`) +
            FfiConverterByteArray.allocationSize(value.`type`) +
            FfiConverterOptionalByteArray.allocationSize(value.`id`) +
            FfiConverterTypeNdefPayload.allocationSize(value.`payload`)
    )

    override fun write(value: NdefRecord, buf: ByteBuffer) {
            FfiConverterTypeNdefHeader.write(value.`header`, buf)
            FfiConverterByteArray.write(value.`type`, buf)
            FfiConverterOptionalByteArray.write(value.`id`, buf)
            FfiConverterTypeNdefPayload.write(value.`payload`, buf)
    }
}





sealed class NfcReaderException: kotlin.Exception() {
    
    class ParsingException(
        
        val v1: kotlin.String
        ) : NfcReaderException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    class NotEnoughData(
        ) : NfcReaderException() {
        override val message
            get() = ""
    }
    
    class AlreadyParsed(
        ) : NfcReaderException() {
        override val message
            get() = ""
    }
    


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<NfcReaderException> {
        override fun lift(error_buf: RustBuffer.ByValue): NfcReaderException = FfiConverterTypeNfcReaderError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeNfcReaderError : FfiConverterRustBuffer<NfcReaderException> {
    override fun read(buf: ByteBuffer): NfcReaderException {
        

        return when(buf.getInt()) {
            1 -> NfcReaderException.ParsingException(
                FfiConverterString.read(buf),
                )
            2 -> NfcReaderException.NotEnoughData()
            3 -> NfcReaderException.AlreadyParsed()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NfcReaderException): ULong {
        return when(value) {
            is NfcReaderException.ParsingException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is NfcReaderException.NotEnoughData -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is NfcReaderException.AlreadyParsed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: NfcReaderException, buf: ByteBuffer) {
        when(value) {
            is NfcReaderException.ParsingException -> {
                buf.putInt(1)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is NfcReaderException.NotEnoughData -> {
                buf.putInt(2)
                Unit
            }
            is NfcReaderException.AlreadyParsed -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class ParseResult {
    
    /**
     * Completed The message is a NDEF message
     */
    data class Complete(
        val v1: org.bitcoinppl.cove_core.nfc.MessageInfo, 
        val v2: List<org.bitcoinppl.cove_core.nfc.NdefRecord>) : ParseResult()
        
    {
        

        companion object
    }
    
    /**
     * Incomplete, need more data to parse the message
     */
    data class Incomplete(
        val v1: org.bitcoinppl.cove_core.nfc.ParsingMessage) : ParseResult()
        
    {
        

        companion object
    }
    

    


    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeParseResult : FfiConverterRustBuffer<ParseResult>{
    override fun read(buf: ByteBuffer): ParseResult {
        return when(buf.getInt()) {
            1 -> ParseResult.Complete(
                FfiConverterTypeMessageInfo.read(buf),
                FfiConverterSequenceTypeNdefRecord.read(buf),
                )
            2 -> ParseResult.Incomplete(
                FfiConverterTypeParsingMessage.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ParseResult) = when(value) {
        is ParseResult.Complete -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMessageInfo.allocationSize(value.v1)
                + FfiConverterSequenceTypeNdefRecord.allocationSize(value.v2)
            )
        }
        is ParseResult.Incomplete -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeParsingMessage.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: ParseResult, buf: ByteBuffer) {
        when(value) {
            is ParseResult.Complete -> {
                buf.putInt(1)
                FfiConverterTypeMessageInfo.write(value.v1, buf)
                FfiConverterSequenceTypeNdefRecord.write(value.v2, buf)
                Unit
            }
            is ParseResult.Incomplete -> {
                buf.putInt(2)
                FfiConverterTypeParsingMessage.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class ParserState {
    
    object NotStarted : ParserState()
    
    
    data class Parsing(
        val v1: org.bitcoinppl.cove_core.nfc.ParsingContext) : ParserState()
        
    {
        

        companion object
    }
    
    object Complete : ParserState()
    
    

    


    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeParserState : FfiConverterRustBuffer<ParserState>{
    override fun read(buf: ByteBuffer): ParserState {
        return when(buf.getInt()) {
            1 -> ParserState.NotStarted
            2 -> ParserState.Parsing(
                FfiConverterTypeParsingContext.read(buf),
                )
            3 -> ParserState.Complete
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ParserState) = when(value) {
        is ParserState.NotStarted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
        is ParserState.Parsing -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeParsingContext.allocationSize(value.v1)
            )
        }
        is ParserState.Complete -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: ParserState, buf: ByteBuffer) {
        when(value) {
            is ParserState.NotStarted -> {
                buf.putInt(1)
                Unit
            }
            is ParserState.Parsing -> {
                buf.putInt(2)
                FfiConverterTypeParsingContext.write(value.v1, buf)
                Unit
            }
            is ParserState.Complete -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class NfcMessageException: kotlin.Exception() {
    
    class NoStringNorData(
        ) : NfcMessageException() {
        override val message
            get() = ""
    }
    


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<NfcMessageException> {
        override fun lift(error_buf: RustBuffer.ByValue): NfcMessageException = FfiConverterTypeNfcMessageError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeNfcMessageError : FfiConverterRustBuffer<NfcMessageException> {
    override fun read(buf: ByteBuffer): NfcMessageException {
        

        return when(buf.getInt()) {
            1 -> NfcMessageException.NoStringNorData()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NfcMessageException): ULong {
        return when(value) {
            is NfcMessageException.NoStringNorData -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: NfcMessageException, buf: ByteBuffer) {
        when(value) {
            is NfcMessageException.NoStringNorData -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class NdefType {
    
    EMPTY,
    WELL_KNOWN,
    MIME,
    ABSOLUTE_URI,
    EXTERNAL,
    UNKNOWN,
    UNCHANGED,
    RESERVED;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeNdefType: FfiConverterRustBuffer<NdefType> {
    override fun read(buf: ByteBuffer) = try {
        NdefType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: NdefType) = 4UL

    override fun write(value: NdefType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class NdefPayload {
    
    data class Text(
        val v1: org.bitcoinppl.cove_core.nfc.TextPayload) : NdefPayload()
        
    {
        

        companion object
    }
    
    data class Data(
        val v1: kotlin.ByteArray) : NdefPayload()
        
    {
        

        companion object
    }
    

    


    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNdefPayload : FfiConverterRustBuffer<NdefPayload>{
    override fun read(buf: ByteBuffer): NdefPayload {
        return when(buf.getInt()) {
            1 -> NdefPayload.Text(
                FfiConverterTypeTextPayload.read(buf),
                )
            2 -> NdefPayload.Data(
                FfiConverterByteArray.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: NdefPayload) = when(value) {
        is NdefPayload.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeTextPayload.allocationSize(value.v1)
            )
        }
        is NdefPayload.Data -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterByteArray.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: NdefPayload, buf: ByteBuffer) {
        when(value) {
            is NdefPayload.Text -> {
                buf.putInt(1)
                FfiConverterTypeTextPayload.write(value.v1, buf)
                Unit
            }
            is NdefPayload.Data -> {
                buf.putInt(2)
                FfiConverterByteArray.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class TextPayloadFormat {
    
    UTF8,
    UTF16;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeTextPayloadFormat: FfiConverterRustBuffer<TextPayloadFormat> {
    override fun read(buf: ByteBuffer) = try {
        TextPayloadFormat.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TextPayloadFormat) = 4UL

    override fun write(value: TextPayloadFormat, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class ResumeException: kotlin.Exception() {
    
    /**
     * The starting block of the new message is not the same as the one in the old message
     */
    class BlocksDoNotMatch(
        ) : ResumeException() {
        override val message
            get() = ""
    }
    
    class AlreadyParsed(
        ) : ResumeException() {
        override val message
            get() = ""
    }
    
    class ParsingException(
        
        val v1: kotlin.String
        ) : ResumeException() {
        override val message
            get() = "v1=${ v1 }"
    }
    
    /**
     * Block size mismatch, expected {expected}, got {actual}
     *
     * The bytes passed in needs to be a multiple of crate::cove_nfc::BYTES_PER_BLOCK
     * The bytes passed in needs to be the same size as the bytes in the old message (NUMBER_OF_BLOCKS_PER_CHUNK * BYTES_PER_BLOCK)
     */
    class BlockSizeMismatch(
        
        val `expected`: kotlin.UShort, 
        
        val `actual`: kotlin.UShort
        ) : ResumeException() {
        override val message
            get() = "expected=${ `expected` }, actual=${ `actual` }"
    }
    
    class UnableToGetFirstBlockHash(
        ) : ResumeException() {
        override val message
            get() = ""
    }
    


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ResumeException> {
        override fun lift(error_buf: RustBuffer.ByValue): ResumeException = FfiConverterTypeResumeError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeResumeError : FfiConverterRustBuffer<ResumeException> {
    override fun read(buf: ByteBuffer): ResumeException {
        

        return when(buf.getInt()) {
            1 -> ResumeException.BlocksDoNotMatch()
            2 -> ResumeException.AlreadyParsed()
            3 -> ResumeException.ParsingException(
                FfiConverterString.read(buf),
                )
            4 -> ResumeException.BlockSizeMismatch(
                FfiConverterUShort.read(buf),
                FfiConverterUShort.read(buf),
                )
            5 -> ResumeException.UnableToGetFirstBlockHash()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ResumeException): ULong {
        return when(value) {
            is ResumeException.BlocksDoNotMatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is ResumeException.AlreadyParsed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is ResumeException.ParsingException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
            is ResumeException.BlockSizeMismatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterUShort.allocationSize(value.`expected`)
                + FfiConverterUShort.allocationSize(value.`actual`)
            )
            is ResumeException.UnableToGetFirstBlockHash -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: ResumeException, buf: ByteBuffer) {
        when(value) {
            is ResumeException.BlocksDoNotMatch -> {
                buf.putInt(1)
                Unit
            }
            is ResumeException.AlreadyParsed -> {
                buf.putInt(2)
                Unit
            }
            is ResumeException.ParsingException -> {
                buf.putInt(3)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is ResumeException.BlockSizeMismatch -> {
                buf.putInt(4)
                FfiConverterUShort.write(value.`expected`, buf)
                FfiConverterUShort.write(value.`actual`, buf)
                Unit
            }
            is ResumeException.UnableToGetFirstBlockHash -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




/**
 * @suppress
 */
public object FfiConverterOptionalUByte: FfiConverterRustBuffer<kotlin.UByte?> {
    override fun read(buf: ByteBuffer): kotlin.UByte? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUByte.read(buf)
    }

    override fun allocationSize(value: kotlin.UByte?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUByte.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UByte?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUByte.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeMessageInfo: FfiConverterRustBuffer<MessageInfo?> {
    override fun read(buf: ByteBuffer): MessageInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMessageInfo.read(buf)
    }

    override fun allocationSize(value: MessageInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeMessageInfo.allocationSize(value)
        }
    }

    override fun write(value: MessageInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMessageInfo.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeNdefRecord: FfiConverterRustBuffer<List<NdefRecord>> {
    override fun read(buf: ByteBuffer): List<NdefRecord> {
        val len = buf.getInt()
        return List<NdefRecord>(len) {
            FfiConverterTypeNdefRecord.read(buf)
        }
    }

    override fun allocationSize(value: List<NdefRecord>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeNdefRecord.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<NdefRecord>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeNdefRecord.write(it, buf)
        }
    }
} fun `nfcMessageIsEqual`(`lhs`: NfcMessage, `rhs`: NfcMessage): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCall() { _status ->
    UniffiLib.uniffi_cove_nfc_fn_func_nfc_message_is_equal(
    
        FfiConverterTypeNfcMessage.lower(`lhs`),FfiConverterTypeNfcMessage.lower(`rhs`),_status)
}
    )
    }
    


