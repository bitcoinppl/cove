// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(cove_nfcFFI)
import cove_nfcFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_cove_nfc_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_cove_nfc_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureCoveNfcInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol FfiNfcReaderProtocol: AnyObject, Sendable {
    
    func dataFromRecords(records: [NdefRecord])  -> Data
    
    func isResumeable(data: Data) throws 
    
    func isStarted()  -> Bool
    
    func messageInfo()  -> MessageInfo?
    
    func parse(data: Data) throws  -> ParseResult
    
    func stringFromRecord(record: NdefRecord)  -> String?
    
}
open class FfiNfcReader: FfiNfcReaderProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_nfc_fn_clone_ffinfcreader(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_nfc_fn_constructor_ffinfcreader_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_nfc_fn_free_ffinfcreader(pointer, $0) }
    }

    

    
open func dataFromRecords(records: [NdefRecord]) -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ffinfcreader_data_from_records(self.uniffiClonePointer(),
        FfiConverterSequenceTypeNdefRecord.lower(records),$0
    )
})
}
    
open func isResumeable(data: Data)throws   {try rustCallWithError(FfiConverterTypeResumeError_lift) {
    uniffi_cove_nfc_fn_method_ffinfcreader_is_resumeable(self.uniffiClonePointer(),
        FfiConverterData.lower(data),$0
    )
}
}
    
open func isStarted() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ffinfcreader_is_started(self.uniffiClonePointer(),$0
    )
})
}
    
open func messageInfo() -> MessageInfo?  {
    return try!  FfiConverterOptionTypeMessageInfo.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ffinfcreader_message_info(self.uniffiClonePointer(),$0
    )
})
}
    
open func parse(data: Data)throws  -> ParseResult  {
    return try  FfiConverterTypeParseResult_lift(try rustCallWithError(FfiConverterTypeNfcReaderError_lift) {
    uniffi_cove_nfc_fn_method_ffinfcreader_parse(self.uniffiClonePointer(),
        FfiConverterData.lower(data),$0
    )
})
}
    
open func stringFromRecord(record: NdefRecord) -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ffinfcreader_string_from_record(self.uniffiClonePointer(),
        FfiConverterTypeNdefRecord_lower(record),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiNfcReader: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiNfcReader

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiNfcReader {
        return FfiNfcReader(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiNfcReader) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiNfcReader {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiNfcReader, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiNfcReader_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiNfcReader {
    return try FfiConverterTypeFfiNfcReader.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiNfcReader_lower(_ value: FfiNfcReader) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiNfcReader.lower(value)
}






public protocol NdefRecordReaderProtocol: AnyObject, Sendable {
    
    func id()  -> String?
    
    func type()  -> String?
    
}
open class NdefRecordReader: NdefRecordReaderProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_nfc_fn_clone_ndefrecordreader(self.pointer, $0) }
    }
public convenience init(record: NdefRecord) {
    let pointer =
        try! rustCall() {
    uniffi_cove_nfc_fn_constructor_ndefrecordreader_new(
        FfiConverterTypeNdefRecord_lower(record),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_nfc_fn_free_ndefrecordreader(pointer, $0) }
    }

    

    
open func id() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ndefrecordreader_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func type() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_ndefrecordreader_type_(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNdefRecordReader: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NdefRecordReader

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NdefRecordReader {
        return NdefRecordReader(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NdefRecordReader) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NdefRecordReader {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NdefRecordReader, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefRecordReader_lift(_ pointer: UnsafeMutableRawPointer) throws -> NdefRecordReader {
    return try FfiConverterTypeNdefRecordReader.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefRecordReader_lower(_ value: NdefRecordReader) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNdefRecordReader.lower(value)
}






public protocol NfcConstProtocol: AnyObject, Sendable {
    
    func bytesPerBlock()  -> UInt16
    
    func numberOfBlocksPerChunk()  -> UInt16
    
    func totalBytesPerChunk()  -> UInt16
    
}
open class NfcConst: NfcConstProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_nfc_fn_clone_nfcconst(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_nfc_fn_constructor_nfcconst_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_nfc_fn_free_nfcconst(pointer, $0) }
    }

    

    
open func bytesPerBlock() -> UInt16  {
    return try!  FfiConverterUInt16.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_nfcconst_bytes_per_block(self.uniffiClonePointer(),$0
    )
})
}
    
open func numberOfBlocksPerChunk() -> UInt16  {
    return try!  FfiConverterUInt16.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_nfcconst_number_of_blocks_per_chunk(self.uniffiClonePointer(),$0
    )
})
}
    
open func totalBytesPerChunk() -> UInt16  {
    return try!  FfiConverterUInt16.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_nfcconst_total_bytes_per_chunk(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNfcConst: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NfcConst

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NfcConst {
        return NfcConst(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NfcConst) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NfcConst {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NfcConst, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcConst_lift(_ pointer: UnsafeMutableRawPointer) throws -> NfcConst {
    return try FfiConverterTypeNfcConst.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcConst_lower(_ value: NfcConst) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNfcConst.lower(value)
}






/**
 * A NFC message, could contain a string, data (bytes) or both
 */
public protocol NfcMessageProtocol: AnyObject, Sendable {
    
    func data()  -> Data?
    
    func string()  -> String?
    
}
/**
 * A NFC message, could contain a string, data (bytes) or both
 */
open class NfcMessage: NfcMessageProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_nfc_fn_clone_nfcmessage(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_nfc_fn_free_nfcmessage(pointer, $0) }
    }

    
public static func tryNew(string: String? = nil, data: Data? = nil)throws  -> NfcMessage  {
    return try  FfiConverterTypeNfcMessage_lift(try rustCallWithError(FfiConverterTypeNfcMessageError_lift) {
    uniffi_cove_nfc_fn_constructor_nfcmessage_try_new(
        FfiConverterOptionString.lower(string),
        FfiConverterOptionData.lower(data),$0
    )
})
}
    

    
open func data() -> Data?  {
    return try!  FfiConverterOptionData.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_nfcmessage_data(self.uniffiClonePointer(),$0
    )
})
}
    
open func string() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_nfc_fn_method_nfcmessage_string(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNfcMessage: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NfcMessage

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NfcMessage {
        return NfcMessage(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NfcMessage) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NfcMessage {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NfcMessage, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcMessage_lift(_ pointer: UnsafeMutableRawPointer) throws -> NfcMessage {
    return try FfiConverterTypeNfcMessage.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcMessage_lower(_ value: NfcMessage) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNfcMessage.lower(value)
}




public struct MessageInfo {
    /**
     * The payload length of the message, including the header info
     */
    public var fullMessageLength: UInt16
    /**
     * The payload length of the message, reported in the info header
     * This is the length of the payload, without the header info
     */
    public var payloadLength: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The payload length of the message, including the header info
         */fullMessageLength: UInt16, 
        /**
         * The payload length of the message, reported in the info header
         * This is the length of the payload, without the header info
         */payloadLength: UInt16) {
        self.fullMessageLength = fullMessageLength
        self.payloadLength = payloadLength
    }
}

#if compiler(>=6)
extension MessageInfo: Sendable {}
#endif


extension MessageInfo: Equatable, Hashable {
    public static func ==(lhs: MessageInfo, rhs: MessageInfo) -> Bool {
        if lhs.fullMessageLength != rhs.fullMessageLength {
            return false
        }
        if lhs.payloadLength != rhs.payloadLength {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fullMessageLength)
        hasher.combine(payloadLength)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessageInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MessageInfo {
        return
            try MessageInfo(
                fullMessageLength: FfiConverterUInt16.read(from: &buf), 
                payloadLength: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: MessageInfo, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.fullMessageLength, into: &buf)
        FfiConverterUInt16.write(value.payloadLength, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageInfo_lift(_ buf: RustBuffer) throws -> MessageInfo {
    return try FfiConverterTypeMessageInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageInfo_lower(_ value: MessageInfo) -> RustBuffer {
    return FfiConverterTypeMessageInfo.lower(value)
}


public struct NdefHeader {
    public var messageBegin: Bool
    public var messageEnd: Bool
    public var chunked: Bool
    public var shortRecord: Bool
    public var hasIdLength: Bool
    public var typeNameFormat: NdefType
    public var typeLength: UInt8
    public var payloadLength: UInt32
    public var idLength: UInt8?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(messageBegin: Bool, messageEnd: Bool, chunked: Bool, shortRecord: Bool, hasIdLength: Bool, typeNameFormat: NdefType, typeLength: UInt8, payloadLength: UInt32, idLength: UInt8?) {
        self.messageBegin = messageBegin
        self.messageEnd = messageEnd
        self.chunked = chunked
        self.shortRecord = shortRecord
        self.hasIdLength = hasIdLength
        self.typeNameFormat = typeNameFormat
        self.typeLength = typeLength
        self.payloadLength = payloadLength
        self.idLength = idLength
    }
}

#if compiler(>=6)
extension NdefHeader: Sendable {}
#endif


extension NdefHeader: Equatable, Hashable {
    public static func ==(lhs: NdefHeader, rhs: NdefHeader) -> Bool {
        if lhs.messageBegin != rhs.messageBegin {
            return false
        }
        if lhs.messageEnd != rhs.messageEnd {
            return false
        }
        if lhs.chunked != rhs.chunked {
            return false
        }
        if lhs.shortRecord != rhs.shortRecord {
            return false
        }
        if lhs.hasIdLength != rhs.hasIdLength {
            return false
        }
        if lhs.typeNameFormat != rhs.typeNameFormat {
            return false
        }
        if lhs.typeLength != rhs.typeLength {
            return false
        }
        if lhs.payloadLength != rhs.payloadLength {
            return false
        }
        if lhs.idLength != rhs.idLength {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(messageBegin)
        hasher.combine(messageEnd)
        hasher.combine(chunked)
        hasher.combine(shortRecord)
        hasher.combine(hasIdLength)
        hasher.combine(typeNameFormat)
        hasher.combine(typeLength)
        hasher.combine(payloadLength)
        hasher.combine(idLength)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNdefHeader: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NdefHeader {
        return
            try NdefHeader(
                messageBegin: FfiConverterBool.read(from: &buf), 
                messageEnd: FfiConverterBool.read(from: &buf), 
                chunked: FfiConverterBool.read(from: &buf), 
                shortRecord: FfiConverterBool.read(from: &buf), 
                hasIdLength: FfiConverterBool.read(from: &buf), 
                typeNameFormat: FfiConverterTypeNdefType.read(from: &buf), 
                typeLength: FfiConverterUInt8.read(from: &buf), 
                payloadLength: FfiConverterUInt32.read(from: &buf), 
                idLength: FfiConverterOptionUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: NdefHeader, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.messageBegin, into: &buf)
        FfiConverterBool.write(value.messageEnd, into: &buf)
        FfiConverterBool.write(value.chunked, into: &buf)
        FfiConverterBool.write(value.shortRecord, into: &buf)
        FfiConverterBool.write(value.hasIdLength, into: &buf)
        FfiConverterTypeNdefType.write(value.typeNameFormat, into: &buf)
        FfiConverterUInt8.write(value.typeLength, into: &buf)
        FfiConverterUInt32.write(value.payloadLength, into: &buf)
        FfiConverterOptionUInt8.write(value.idLength, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefHeader_lift(_ buf: RustBuffer) throws -> NdefHeader {
    return try FfiConverterTypeNdefHeader.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefHeader_lower(_ value: NdefHeader) -> RustBuffer {
    return FfiConverterTypeNdefHeader.lower(value)
}


public struct NdefRecord {
    public var header: NdefHeader
    public var type: Data
    public var id: Data?
    public var payload: NdefPayload

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(header: NdefHeader, type: Data, id: Data?, payload: NdefPayload) {
        self.header = header
        self.type = type
        self.id = id
        self.payload = payload
    }
}

#if compiler(>=6)
extension NdefRecord: Sendable {}
#endif


extension NdefRecord: Equatable, Hashable {
    public static func ==(lhs: NdefRecord, rhs: NdefRecord) -> Bool {
        if lhs.header != rhs.header {
            return false
        }
        if lhs.type != rhs.type {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.payload != rhs.payload {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(header)
        hasher.combine(type)
        hasher.combine(id)
        hasher.combine(payload)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNdefRecord: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NdefRecord {
        return
            try NdefRecord(
                header: FfiConverterTypeNdefHeader.read(from: &buf), 
                type: FfiConverterData.read(from: &buf), 
                id: FfiConverterOptionData.read(from: &buf), 
                payload: FfiConverterTypeNdefPayload.read(from: &buf)
        )
    }

    public static func write(_ value: NdefRecord, into buf: inout [UInt8]) {
        FfiConverterTypeNdefHeader.write(value.header, into: &buf)
        FfiConverterData.write(value.type, into: &buf)
        FfiConverterOptionData.write(value.id, into: &buf)
        FfiConverterTypeNdefPayload.write(value.payload, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefRecord_lift(_ buf: RustBuffer) throws -> NdefRecord {
    return try FfiConverterTypeNdefRecord.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefRecord_lower(_ value: NdefRecord) -> RustBuffer {
    return FfiConverterTypeNdefRecord.lower(value)
}


public struct ParsingContext {
    public var messageInfo: MessageInfo
    public var needed: UInt16
    public var firstBlockHash: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(messageInfo: MessageInfo, needed: UInt16, firstBlockHash: String?) {
        self.messageInfo = messageInfo
        self.needed = needed
        self.firstBlockHash = firstBlockHash
    }
}

#if compiler(>=6)
extension ParsingContext: Sendable {}
#endif


extension ParsingContext: Equatable, Hashable {
    public static func ==(lhs: ParsingContext, rhs: ParsingContext) -> Bool {
        if lhs.messageInfo != rhs.messageInfo {
            return false
        }
        if lhs.needed != rhs.needed {
            return false
        }
        if lhs.firstBlockHash != rhs.firstBlockHash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(messageInfo)
        hasher.combine(needed)
        hasher.combine(firstBlockHash)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeParsingContext: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParsingContext {
        return
            try ParsingContext(
                messageInfo: FfiConverterTypeMessageInfo.read(from: &buf), 
                needed: FfiConverterUInt16.read(from: &buf), 
                firstBlockHash: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ParsingContext, into buf: inout [UInt8]) {
        FfiConverterTypeMessageInfo.write(value.messageInfo, into: &buf)
        FfiConverterUInt16.write(value.needed, into: &buf)
        FfiConverterOptionString.write(value.firstBlockHash, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingContext_lift(_ buf: RustBuffer) throws -> ParsingContext {
    return try FfiConverterTypeParsingContext.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingContext_lower(_ value: ParsingContext) -> RustBuffer {
    return FfiConverterTypeParsingContext.lower(value)
}


public struct ParsingMessage {
    public var messageInfo: MessageInfo
    public var leftOverBytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(messageInfo: MessageInfo, leftOverBytes: Data) {
        self.messageInfo = messageInfo
        self.leftOverBytes = leftOverBytes
    }
}

#if compiler(>=6)
extension ParsingMessage: Sendable {}
#endif


extension ParsingMessage: Equatable, Hashable {
    public static func ==(lhs: ParsingMessage, rhs: ParsingMessage) -> Bool {
        if lhs.messageInfo != rhs.messageInfo {
            return false
        }
        if lhs.leftOverBytes != rhs.leftOverBytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(messageInfo)
        hasher.combine(leftOverBytes)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeParsingMessage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParsingMessage {
        return
            try ParsingMessage(
                messageInfo: FfiConverterTypeMessageInfo.read(from: &buf), 
                leftOverBytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: ParsingMessage, into buf: inout [UInt8]) {
        FfiConverterTypeMessageInfo.write(value.messageInfo, into: &buf)
        FfiConverterData.write(value.leftOverBytes, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingMessage_lift(_ buf: RustBuffer) throws -> ParsingMessage {
    return try FfiConverterTypeParsingMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingMessage_lower(_ value: ParsingMessage) -> RustBuffer {
    return FfiConverterTypeParsingMessage.lower(value)
}


public struct TextPayload {
    public var format: TextPayloadFormat
    public var language: String
    public var text: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(format: TextPayloadFormat, language: String, text: String) {
        self.format = format
        self.language = language
        self.text = text
    }
}

#if compiler(>=6)
extension TextPayload: Sendable {}
#endif


extension TextPayload: Equatable, Hashable {
    public static func ==(lhs: TextPayload, rhs: TextPayload) -> Bool {
        if lhs.format != rhs.format {
            return false
        }
        if lhs.language != rhs.language {
            return false
        }
        if lhs.text != rhs.text {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(format)
        hasher.combine(language)
        hasher.combine(text)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTextPayload: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextPayload {
        return
            try TextPayload(
                format: FfiConverterTypeTextPayloadFormat.read(from: &buf), 
                language: FfiConverterString.read(from: &buf), 
                text: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TextPayload, into buf: inout [UInt8]) {
        FfiConverterTypeTextPayloadFormat.write(value.format, into: &buf)
        FfiConverterString.write(value.language, into: &buf)
        FfiConverterString.write(value.text, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextPayload_lift(_ buf: RustBuffer) throws -> TextPayload {
    return try FfiConverterTypeTextPayload.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextPayload_lower(_ value: TextPayload) -> RustBuffer {
    return FfiConverterTypeTextPayload.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NdefPayload {
    
    case text(TextPayload
    )
    case data(Data
    )
}


#if compiler(>=6)
extension NdefPayload: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNdefPayload: FfiConverterRustBuffer {
    typealias SwiftType = NdefPayload

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NdefPayload {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .text(try FfiConverterTypeTextPayload.read(from: &buf)
        )
        
        case 2: return .data(try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NdefPayload, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .text(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTextPayload.write(v1, into: &buf)
            
        
        case let .data(v1):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefPayload_lift(_ buf: RustBuffer) throws -> NdefPayload {
    return try FfiConverterTypeNdefPayload.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefPayload_lower(_ value: NdefPayload) -> RustBuffer {
    return FfiConverterTypeNdefPayload.lower(value)
}


extension NdefPayload: Equatable, Hashable {}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NdefType {
    
    case empty
    case wellKnown
    case mime
    case absoluteUri
    case external
    case unknown
    case unchanged
    case reserved
}


#if compiler(>=6)
extension NdefType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNdefType: FfiConverterRustBuffer {
    typealias SwiftType = NdefType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NdefType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .empty
        
        case 2: return .wellKnown
        
        case 3: return .mime
        
        case 4: return .absoluteUri
        
        case 5: return .external
        
        case 6: return .unknown
        
        case 7: return .unchanged
        
        case 8: return .reserved
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NdefType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .empty:
            writeInt(&buf, Int32(1))
        
        
        case .wellKnown:
            writeInt(&buf, Int32(2))
        
        
        case .mime:
            writeInt(&buf, Int32(3))
        
        
        case .absoluteUri:
            writeInt(&buf, Int32(4))
        
        
        case .external:
            writeInt(&buf, Int32(5))
        
        
        case .unknown:
            writeInt(&buf, Int32(6))
        
        
        case .unchanged:
            writeInt(&buf, Int32(7))
        
        
        case .reserved:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefType_lift(_ buf: RustBuffer) throws -> NdefType {
    return try FfiConverterTypeNdefType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNdefType_lower(_ value: NdefType) -> RustBuffer {
    return FfiConverterTypeNdefType.lower(value)
}


extension NdefType: Equatable, Hashable {}





public enum NfcMessageError: Swift.Error {

    
    
    case NoStringNorData
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNfcMessageError: FfiConverterRustBuffer {
    typealias SwiftType = NfcMessageError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NfcMessageError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NoStringNorData

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NfcMessageError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .NoStringNorData:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcMessageError_lift(_ buf: RustBuffer) throws -> NfcMessageError {
    return try FfiConverterTypeNfcMessageError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcMessageError_lower(_ value: NfcMessageError) -> RustBuffer {
    return FfiConverterTypeNfcMessageError.lower(value)
}


extension NfcMessageError: Equatable, Hashable {}




extension NfcMessageError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



public enum NfcReaderError: Swift.Error {

    
    
    case ParsingError(String
    )
    case NotEnoughData
    case AlreadyParsed
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNfcReaderError: FfiConverterRustBuffer {
    typealias SwiftType = NfcReaderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NfcReaderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ParsingError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .NotEnoughData
        case 3: return .AlreadyParsed

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NfcReaderError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ParsingError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NotEnoughData:
            writeInt(&buf, Int32(2))
        
        
        case .AlreadyParsed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcReaderError_lift(_ buf: RustBuffer) throws -> NfcReaderError {
    return try FfiConverterTypeNfcReaderError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNfcReaderError_lower(_ value: NfcReaderError) -> RustBuffer {
    return FfiConverterTypeNfcReaderError.lower(value)
}


extension NfcReaderError: Equatable, Hashable {}




extension NfcReaderError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ParseResult {
    
    /**
     * Completed The message is a NDEF message
     */
    case complete(MessageInfo,[NdefRecord]
    )
    /**
     * Incomplete, need more data to parse the message
     */
    case incomplete(ParsingMessage
    )
}


#if compiler(>=6)
extension ParseResult: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeParseResult: FfiConverterRustBuffer {
    typealias SwiftType = ParseResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParseResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .complete(try FfiConverterTypeMessageInfo.read(from: &buf), try FfiConverterSequenceTypeNdefRecord.read(from: &buf)
        )
        
        case 2: return .incomplete(try FfiConverterTypeParsingMessage.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ParseResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .complete(v1,v2):
            writeInt(&buf, Int32(1))
            FfiConverterTypeMessageInfo.write(v1, into: &buf)
            FfiConverterSequenceTypeNdefRecord.write(v2, into: &buf)
            
        
        case let .incomplete(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeParsingMessage.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParseResult_lift(_ buf: RustBuffer) throws -> ParseResult {
    return try FfiConverterTypeParseResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParseResult_lower(_ value: ParseResult) -> RustBuffer {
    return FfiConverterTypeParseResult.lower(value)
}


extension ParseResult: Equatable, Hashable {}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ParserState {
    
    case notStarted
    case parsing(ParsingContext
    )
    case complete
}


#if compiler(>=6)
extension ParserState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeParserState: FfiConverterRustBuffer {
    typealias SwiftType = ParserState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParserState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .notStarted
        
        case 2: return .parsing(try FfiConverterTypeParsingContext.read(from: &buf)
        )
        
        case 3: return .complete
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ParserState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .notStarted:
            writeInt(&buf, Int32(1))
        
        
        case let .parsing(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeParsingContext.write(v1, into: &buf)
            
        
        case .complete:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParserState_lift(_ buf: RustBuffer) throws -> ParserState {
    return try FfiConverterTypeParserState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParserState_lower(_ value: ParserState) -> RustBuffer {
    return FfiConverterTypeParserState.lower(value)
}


extension ParserState: Equatable, Hashable {}





public enum ResumeError: Swift.Error {

    
    
    /**
     * The starting block of the new message is not the same as the one in the old message
     */
    case BlocksDoNotMatch
    case AlreadyParsed
    case ParsingError(String
    )
    /**
     * Block size mismatch, expected {expected}, got {actual}
     *
     * The bytes passed in needs to be a multiple of crate::cove_nfc::BYTES_PER_BLOCK
     * The bytes passed in needs to be the same size as the bytes in the old message (NUMBER_OF_BLOCKS_PER_CHUNK * BYTES_PER_BLOCK)
     */
    case BlockSizeMismatch(expected: UInt16, actual: UInt16
    )
    case UnableToGetFirstBlockHash
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeResumeError: FfiConverterRustBuffer {
    typealias SwiftType = ResumeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ResumeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BlocksDoNotMatch
        case 2: return .AlreadyParsed
        case 3: return .ParsingError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .BlockSizeMismatch(
            expected: try FfiConverterUInt16.read(from: &buf), 
            actual: try FfiConverterUInt16.read(from: &buf)
            )
        case 5: return .UnableToGetFirstBlockHash

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ResumeError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .BlocksDoNotMatch:
            writeInt(&buf, Int32(1))
        
        
        case .AlreadyParsed:
            writeInt(&buf, Int32(2))
        
        
        case let .ParsingError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .BlockSizeMismatch(expected,actual):
            writeInt(&buf, Int32(4))
            FfiConverterUInt16.write(expected, into: &buf)
            FfiConverterUInt16.write(actual, into: &buf)
            
        
        case .UnableToGetFirstBlockHash:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResumeError_lift(_ buf: RustBuffer) throws -> ResumeError {
    return try FfiConverterTypeResumeError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeResumeError_lower(_ value: ResumeError) -> RustBuffer {
    return FfiConverterTypeResumeError.lower(value)
}


extension ResumeError: Equatable, Hashable {}




extension ResumeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TextPayloadFormat {
    
    case utf8
    case utf16
}


#if compiler(>=6)
extension TextPayloadFormat: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTextPayloadFormat: FfiConverterRustBuffer {
    typealias SwiftType = TextPayloadFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextPayloadFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .utf8
        
        case 2: return .utf16
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TextPayloadFormat, into buf: inout [UInt8]) {
        switch value {
        
        
        case .utf8:
            writeInt(&buf, Int32(1))
        
        
        case .utf16:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextPayloadFormat_lift(_ buf: RustBuffer) throws -> TextPayloadFormat {
    return try FfiConverterTypeTextPayloadFormat.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextPayloadFormat_lower(_ value: TextPayloadFormat) -> RustBuffer {
    return FfiConverterTypeTextPayloadFormat.lower(value)
}


extension TextPayloadFormat: Equatable, Hashable {}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeMessageInfo: FfiConverterRustBuffer {
    typealias SwiftType = MessageInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMessageInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMessageInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeNdefRecord: FfiConverterRustBuffer {
    typealias SwiftType = [NdefRecord]

    public static func write(_ value: [NdefRecord], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNdefRecord.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NdefRecord] {
        let len: Int32 = try readInt(&buf)
        var seq = [NdefRecord]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeNdefRecord.read(from: &buf))
        }
        return seq
    }
}
public func nfcMessageIsEqual(lhs: NfcMessage, rhs: NfcMessage) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_nfc_fn_func_nfc_message_is_equal(
        FfiConverterTypeNfcMessage_lower(lhs),
        FfiConverterTypeNfcMessage_lower(rhs),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_cove_nfc_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_cove_nfc_checksum_func_nfc_message_is_equal() != 47520) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_data_from_records() != 34072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_is_resumeable() != 15004) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_is_started() != 34307) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_message_info() != 53340) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_parse() != 62093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ffinfcreader_string_from_record() != 499) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ndefrecordreader_id() != 12646) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_ndefrecordreader_type_() != 20702) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_nfcconst_bytes_per_block() != 42358) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_nfcconst_number_of_blocks_per_chunk() != 58624) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_nfcconst_total_bytes_per_chunk() != 25318) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_nfcmessage_data() != 1508) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_method_nfcmessage_string() != 21081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_constructor_ffinfcreader_new() != 61696) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_constructor_ndefrecordreader_new() != 27665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_constructor_nfcconst_new() != 53215) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_nfc_checksum_constructor_nfcmessage_try_new() != 28935) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureCoveNfcInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all