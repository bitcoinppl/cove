// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(coveFFI)
import coveFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_cove_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_cove_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureCoveInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterFloat: FfiConverterPrimitive {
    typealias FfiType = Float
    typealias SwiftType = Float

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Float {
        return try lift(readFloat(&buf))
    }

    public static func write(_ value: Float, into buf: inout [UInt8]) {
        writeFloat(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}




public protocol AddressArgsProtocol: AnyObject, Sendable {
    
}
open class AddressArgs: AddressArgsProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_addressargs(self.pointer, $0) }
    }
public convenience init(address: Address, changeAddress: Address?, direction: TransactionDirection) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_addressargs_new(
        FfiConverterTypeAddress_lower(address),
        FfiConverterOptionTypeAddress.lower(changeAddress),
        FfiConverterTypeTransactionDirection_lower(direction),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_addressargs(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddressArgs: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddressArgs

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressArgs {
        return AddressArgs(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddressArgs) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressArgs {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddressArgs, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressArgs_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddressArgs {
    return try FfiConverterTypeAddressArgs.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddressArgs_lower(_ value: AddressArgs) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddressArgs.lower(value)
}






public protocol AuthPinProtocol: AnyObject, Sendable {
    
    func check(pin: String)  -> Bool
    
}
open class AuthPin: AuthPinProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_authpin(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_authpin_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_authpin(pointer, $0) }
    }

    

    
open func check(pin: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_authpin_check(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthPin: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthPin

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthPin {
        return AuthPin(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthPin) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthPin {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthPin, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthPin_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthPin {
    return try FfiConverterTypeAuthPin.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthPin_lower(_ value: AuthPin) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthPin.lower(value)
}






public protocol AutoComplete: AnyObject, Sendable {
    
    func autocomplete(word: String)  -> [String]
    
    func isValidWord(word: String)  -> Bool
    
}
open class AutoCompleteImpl: AutoComplete, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_autocomplete(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_autocomplete(pointer, $0) }
    }

    

    
open func autocomplete(word: String) -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_autocomplete_autocomplete(self.uniffiClonePointer(),
        FfiConverterString.lower(word),$0
    )
})
}
    
open func isValidWord(word: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_autocomplete_is_valid_word(self.uniffiClonePointer(),
        FfiConverterString.lower(word),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceAutoComplete {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceAutoComplete] = [UniffiVTableCallbackInterfaceAutoComplete(
        autocomplete: { (
            uniffiHandle: UInt64,
            word: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [String] in
                guard let uniffiObj = try? FfiConverterTypeAutoComplete.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.autocomplete(
                     word: try FfiConverterString.lift(word)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceString.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        isValidWord: { (
            uniffiHandle: UInt64,
            word: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterTypeAutoComplete.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.isValidWord(
                     word: try FfiConverterString.lift(word)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeAutoComplete.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface AutoComplete: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitAutoComplete() {
    uniffi_cove_fn_init_callback_vtable_autocomplete(UniffiCallbackInterfaceAutoComplete.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAutoComplete: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<AutoComplete>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AutoComplete

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AutoComplete {
        return AutoCompleteImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AutoComplete) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AutoComplete {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AutoComplete, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAutoComplete_lift(_ pointer: UnsafeMutableRawPointer) throws -> AutoComplete {
    return try FfiConverterTypeAutoComplete.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAutoComplete_lower(_ value: AutoComplete) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAutoComplete.lower(value)
}






public protocol BalanceProtocol: AnyObject, Sendable {
    
    func spendable()  -> Amount
    
    func total()  -> Amount
    
}
open class Balance: BalanceProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_balance(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_balance(pointer, $0) }
    }

    
public static func zero() -> Balance  {
    return try!  FfiConverterTypeBalance_lift(try! rustCall() {
    uniffi_cove_fn_constructor_balance_zero($0
    )
})
}
    

    
open func spendable() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_balance_spendable(self.uniffiClonePointer(),$0
    )
})
}
    
open func total() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_balance_total(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBalance: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Balance

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Balance {
        return Balance(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Balance) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Balance {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Balance, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalance_lift(_ pointer: UnsafeMutableRawPointer) throws -> Balance {
    return try FfiConverterTypeBalance.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBalance_lower(_ value: Balance) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBalance.lower(value)
}






public protocol BbqrJoinResultProtocol: AnyObject, Sendable {
    
    func finalResult() throws  -> String
    
    func isComplete()  -> Bool
    
    func partsLeft()  -> UInt32
    
}
open class BbqrJoinResult: BbqrJoinResultProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bbqrjoinresult(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bbqrjoinresult(pointer, $0) }
    }

    

    
open func finalResult()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_bbqrjoinresult_final_result(self.uniffiClonePointer(),$0
    )
})
}
    
open func isComplete() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_bbqrjoinresult_is_complete(self.uniffiClonePointer(),$0
    )
})
}
    
open func partsLeft() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_cove_fn_method_bbqrjoinresult_parts_left(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBbqrJoinResult: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BbqrJoinResult

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BbqrJoinResult {
        return BbqrJoinResult(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BbqrJoinResult) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BbqrJoinResult {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BbqrJoinResult, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBbqrJoinResult_lift(_ pointer: UnsafeMutableRawPointer) throws -> BbqrJoinResult {
    return try FfiConverterTypeBbqrJoinResult.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBbqrJoinResult_lower(_ value: BbqrJoinResult) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBbqrJoinResult.lower(value)
}






public protocol BbqrJoinedProtocol: AnyObject, Sendable {
    
    func getGroupedWords(chunks: UInt8) throws  -> [[String]]
    
    func getSeedWords() throws  -> [String]
    
}
open class BbqrJoined: BbqrJoinedProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bbqrjoined(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bbqrjoined(pointer, $0) }
    }

    

    
open func getGroupedWords(chunks: UInt8)throws  -> [[String]]  {
    return try  FfiConverterSequenceSequenceString.lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_bbqrjoined_get_grouped_words(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(chunks),$0
    )
})
}
    
open func getSeedWords()throws  -> [String]  {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_bbqrjoined_get_seed_words(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBbqrJoined: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BbqrJoined

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BbqrJoined {
        return BbqrJoined(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BbqrJoined) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BbqrJoined {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BbqrJoined, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBbqrJoined_lift(_ pointer: UnsafeMutableRawPointer) throws -> BbqrJoined {
    return try FfiConverterTypeBbqrJoined.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBbqrJoined_lower(_ value: BbqrJoined) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBbqrJoined.lower(value)
}






public protocol Bip329LabelsProtocol: AnyObject, Sendable {
    
}
open class Bip329Labels: Bip329LabelsProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bip329labels(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bip329labels(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBip329Labels: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Bip329Labels

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip329Labels {
        return Bip329Labels(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Bip329Labels) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bip329Labels {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Bip329Labels, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip329Labels_lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip329Labels {
    return try FfiConverterTypeBip329Labels.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip329Labels_lower(_ value: Bip329Labels) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBip329Labels.lower(value)
}






public protocol Bip39AutoCompleteProtocol: AnyObject, Sendable {
    
    func autocomplete(word: String)  -> [String]
    
    func isValidWord(word: String)  -> Bool
    
    /**
     * Find the next invalid or empty field number
     */
    func nextFieldNumber(currentFieldNumber: UInt8, enteredWords: [String])  -> UInt8
    
}
open class Bip39AutoComplete: Bip39AutoCompleteProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bip39autocomplete(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_bip39autocomplete_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bip39autocomplete(pointer, $0) }
    }

    

    
open func autocomplete(word: String) -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39autocomplete_autocomplete(self.uniffiClonePointer(),
        FfiConverterString.lower(word),$0
    )
})
}
    
open func isValidWord(word: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39autocomplete_is_valid_word(self.uniffiClonePointer(),
        FfiConverterString.lower(word),$0
    )
})
}
    
    /**
     * Find the next invalid or empty field number
     */
open func nextFieldNumber(currentFieldNumber: UInt8, enteredWords: [String]) -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39autocomplete_next_field_number(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(currentFieldNumber),
        FfiConverterSequenceString.lower(enteredWords),$0
    )
})
}
    

}
extension Bip39AutoComplete: AutoComplete {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBip39AutoComplete: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Bip39AutoComplete

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip39AutoComplete {
        return Bip39AutoComplete(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Bip39AutoComplete) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bip39AutoComplete {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Bip39AutoComplete, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39AutoComplete_lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip39AutoComplete {
    return try FfiConverterTypeBip39AutoComplete.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39AutoComplete_lower(_ value: Bip39AutoComplete) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBip39AutoComplete.lower(value)
}






public protocol Bip39WordSpecificAutocompleteProtocol: AnyObject, Sendable {
    
    func autocomplete(word: String, allWords: [[String]])  -> [String]
    
    func isBip39Word(word: String)  -> Bool
    
    func isValidWord(word: String, allWords: [[String]])  -> Bool
    
    func nextFieldNumber(currentFieldNumber: UInt8, enteredWords: [String])  -> UInt8
    
}
open class Bip39WordSpecificAutocomplete: Bip39WordSpecificAutocompleteProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bip39wordspecificautocomplete(self.pointer, $0) }
    }
public convenience init(wordNumber: UInt16, numberOfWords: NumberOfBip39Words) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_bip39wordspecificautocomplete_new(
        FfiConverterUInt16.lower(wordNumber),
        FfiConverterTypeNumberOfBip39Words_lower(numberOfWords),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bip39wordspecificautocomplete(pointer, $0) }
    }

    

    
open func autocomplete(word: String, allWords: [[String]]) -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39wordspecificautocomplete_autocomplete(self.uniffiClonePointer(),
        FfiConverterString.lower(word),
        FfiConverterSequenceSequenceString.lower(allWords),$0
    )
})
}
    
open func isBip39Word(word: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39wordspecificautocomplete_is_bip39_word(self.uniffiClonePointer(),
        FfiConverterString.lower(word),$0
    )
})
}
    
open func isValidWord(word: String, allWords: [[String]]) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39wordspecificautocomplete_is_valid_word(self.uniffiClonePointer(),
        FfiConverterString.lower(word),
        FfiConverterSequenceSequenceString.lower(allWords),$0
    )
})
}
    
open func nextFieldNumber(currentFieldNumber: UInt8, enteredWords: [String]) -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_cove_fn_method_bip39wordspecificautocomplete_next_field_number(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(currentFieldNumber),
        FfiConverterSequenceString.lower(enteredWords),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBip39WordSpecificAutocomplete: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Bip39WordSpecificAutocomplete

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip39WordSpecificAutocomplete {
        return Bip39WordSpecificAutocomplete(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Bip39WordSpecificAutocomplete) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bip39WordSpecificAutocomplete {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Bip39WordSpecificAutocomplete, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39WordSpecificAutocomplete_lift(_ pointer: UnsafeMutableRawPointer) throws -> Bip39WordSpecificAutocomplete {
    return try FfiConverterTypeBip39WordSpecificAutocomplete.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39WordSpecificAutocomplete_lower(_ value: Bip39WordSpecificAutocomplete) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBip39WordSpecificAutocomplete.lower(value)
}






public protocol BitcoinTransactionProtocol: AnyObject, Sendable {
    
    func normalizeTxId()  -> String
    
    func txId()  -> TxId
    
    func txIdHash()  -> String
    
}
open class BitcoinTransaction: BitcoinTransactionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_bitcointransaction(self.pointer, $0) }
    }
public convenience init(txHex: String)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeBitcoinTransactionError_lift) {
    uniffi_cove_fn_constructor_bitcointransaction_new(
        FfiConverterString.lower(txHex),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_bitcointransaction(pointer, $0) }
    }

    
public static func tryFromData(data: Data)throws  -> BitcoinTransaction  {
    return try  FfiConverterTypeBitcoinTransaction_lift(try rustCallWithError(FfiConverterTypeBitcoinTransactionError_lift) {
    uniffi_cove_fn_constructor_bitcointransaction_tryfromdata(
        FfiConverterData.lower(data),$0
    )
})
}
    
public static func tryFromNfcMessage(nfcMessage: NfcMessage)throws  -> BitcoinTransaction  {
    return try  FfiConverterTypeBitcoinTransaction_lift(try rustCallWithError(FfiConverterTypeBitcoinTransactionError_lift) {
    uniffi_cove_fn_constructor_bitcointransaction_tryfromnfcmessage(
        FfiConverterTypeNfcMessage_lower(nfcMessage),$0
    )
})
}
    
public static func tryFromStringOrData(stringOrData: StringOrData)throws  -> BitcoinTransaction  {
    return try  FfiConverterTypeBitcoinTransaction_lift(try rustCallWithError(FfiConverterTypeBitcoinTransactionError_lift) {
    uniffi_cove_fn_constructor_bitcointransaction_tryfromstringordata(
        FfiConverterTypeStringOrData_lower(stringOrData),$0
    )
})
}
    

    
open func normalizeTxId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_bitcointransaction_normalize_tx_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func txId() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_bitcointransaction_tx_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func txIdHash() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_bitcointransaction_tx_id_hash(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBitcoinTransaction: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BitcoinTransaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BitcoinTransaction {
        return BitcoinTransaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BitcoinTransaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BitcoinTransaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BitcoinTransaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> BitcoinTransaction {
    return try FfiConverterTypeBitcoinTransaction.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinTransaction_lower(_ value: BitcoinTransaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBitcoinTransaction.lower(value)
}






public protocol BoxedRouteProtocol: AnyObject, Sendable {
    
    func route()  -> Route
    
}
open class BoxedRoute: BoxedRouteProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_boxedroute(self.pointer, $0) }
    }
public convenience init(route: Route) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_boxedroute_new(
        FfiConverterTypeRoute_lower(route),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_boxedroute(pointer, $0) }
    }

    

    
open func route() -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_boxedroute_route(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBoxedRoute: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BoxedRoute

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BoxedRoute {
        return BoxedRoute(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BoxedRoute) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BoxedRoute {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BoxedRoute, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBoxedRoute_lift(_ pointer: UnsafeMutableRawPointer) throws -> BoxedRoute {
    return try FfiConverterTypeBoxedRoute.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBoxedRoute_lower(_ value: BoxedRoute) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBoxedRoute.lower(value)
}






public protocol ConfirmedTransactionProtocol: AnyObject, Sendable {
    
    func blockHeight()  -> UInt32
    
    func blockHeightFmt()  -> String
    
    func confirmedAt()  -> UInt64
    
    func confirmedAtFmt()  -> String
    
    func confirmedAtFmtWithTime()  -> String
    
    func fiatAmount()  -> FiatAmount?
    
    func id()  -> TxId
    
    func label()  -> String
    
    func labelOpt()  -> String?
    
    func sentAndReceived()  -> SentAndReceived
    
}
open class ConfirmedTransaction: ConfirmedTransactionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_confirmedtransaction(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_confirmedtransaction(pointer, $0) }
    }

    

    
open func blockHeight() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_block_height(self.uniffiClonePointer(),$0
    )
})
}
    
open func blockHeightFmt() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_block_height_fmt(self.uniffiClonePointer(),$0
    )
})
}
    
open func confirmedAt() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_confirmed_at(self.uniffiClonePointer(),$0
    )
})
}
    
open func confirmedAtFmt() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_confirmed_at_fmt(self.uniffiClonePointer(),$0
    )
})
}
    
open func confirmedAtFmtWithTime() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_confirmed_at_fmt_with_time(self.uniffiClonePointer(),$0
    )
})
}
    
open func fiatAmount() -> FiatAmount?  {
    return try!  FfiConverterOptionTypeFiatAmount.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_fiat_amount(self.uniffiClonePointer(),$0
    )
})
}
    
open func id() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func label() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_label(self.uniffiClonePointer(),$0
    )
})
}
    
open func labelOpt() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_label_opt(self.uniffiClonePointer(),$0
    )
})
}
    
open func sentAndReceived() -> SentAndReceived  {
    return try!  FfiConverterTypeSentAndReceived_lift(try! rustCall() {
    uniffi_cove_fn_method_confirmedtransaction_sent_and_received(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfirmedTransaction: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ConfirmedTransaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ConfirmedTransaction {
        return ConfirmedTransaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ConfirmedTransaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConfirmedTransaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ConfirmedTransaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfirmedTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> ConfirmedTransaction {
    return try FfiConverterTypeConfirmedTransaction.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfirmedTransaction_lower(_ value: ConfirmedTransaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConfirmedTransaction.lower(value)
}






public protocol ConverterProtocol: AnyObject, Sendable {
    
    func convertFromFiat(fiatAmount: Double, currency: FiatCurrency, prices: PriceResponse)  -> Amount
    
    func convertFromFiatString(fiatAmount: String, currency: FiatCurrency, prices: PriceResponse)  -> Amount
    
    func getFiatValue(fiatAmount: String) throws  -> Double
    
    func removeFiatSuffix(fiatAmount: String)  -> String
    
}
open class Converter: ConverterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_converter(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_converter_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_converter(pointer, $0) }
    }

    

    
open func convertFromFiat(fiatAmount: Double, currency: FiatCurrency, prices: PriceResponse) -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_converter_convert_from_fiat(self.uniffiClonePointer(),
        FfiConverterDouble.lower(fiatAmount),
        FfiConverterTypeFiatCurrency_lower(currency),
        FfiConverterTypePriceResponse_lower(prices),$0
    )
})
}
    
open func convertFromFiatString(fiatAmount: String, currency: FiatCurrency, prices: PriceResponse) -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_converter_convert_from_fiat_string(self.uniffiClonePointer(),
        FfiConverterString.lower(fiatAmount),
        FfiConverterTypeFiatCurrency_lower(currency),
        FfiConverterTypePriceResponse_lower(prices),$0
    )
})
}
    
open func getFiatValue(fiatAmount: String)throws  -> Double  {
    return try  FfiConverterDouble.lift(try rustCallWithError(FfiConverterTypeConverterError_lift) {
    uniffi_cove_fn_method_converter_get_fiat_value(self.uniffiClonePointer(),
        FfiConverterString.lower(fiatAmount),$0
    )
})
}
    
open func removeFiatSuffix(fiatAmount: String) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_converter_remove_fiat_suffix(self.uniffiClonePointer(),
        FfiConverterString.lower(fiatAmount),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConverter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Converter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Converter {
        return Converter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Converter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Converter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Converter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConverter_lift(_ pointer: UnsafeMutableRawPointer) throws -> Converter {
    return try FfiConverterTypeConverter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConverter_lower(_ value: Converter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConverter.lower(value)
}






public protocol DatabaseProtocol: AnyObject, Sendable {
    
    func dangerousResetAllData() 
    
    func globalConfig()  -> GlobalConfigTable
    
    func historicalPrices()  -> HistoricalPriceTable
    
    func unsignedTransactions()  -> UnsignedTransactionsTable
    
    func wallets()  -> WalletsTable
    
}
open class Database: DatabaseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_database(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_database_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_database(pointer, $0) }
    }

    

    
open func dangerousResetAllData()  {try! rustCall() {
    uniffi_cove_fn_method_database_dangerous_reset_all_data(self.uniffiClonePointer(),$0
    )
}
}
    
open func globalConfig() -> GlobalConfigTable  {
    return try!  FfiConverterTypeGlobalConfigTable_lift(try! rustCall() {
    uniffi_cove_fn_method_database_global_config(self.uniffiClonePointer(),$0
    )
})
}
    
open func historicalPrices() -> HistoricalPriceTable  {
    return try!  FfiConverterTypeHistoricalPriceTable_lift(try! rustCall() {
    uniffi_cove_fn_method_database_historical_prices(self.uniffiClonePointer(),$0
    )
})
}
    
open func unsignedTransactions() -> UnsignedTransactionsTable  {
    return try!  FfiConverterTypeUnsignedTransactionsTable_lift(try! rustCall() {
    uniffi_cove_fn_method_database_unsigned_transactions(self.uniffiClonePointer(),$0
    )
})
}
    
open func wallets() -> WalletsTable  {
    return try!  FfiConverterTypeWalletsTable_lift(try! rustCall() {
    uniffi_cove_fn_method_database_wallets(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDatabase: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Database

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Database {
        return Database(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Database) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Database {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Database, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabase_lift(_ pointer: UnsafeMutableRawPointer) throws -> Database {
    return try FfiConverterTypeDatabase.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabase_lower(_ value: Database) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDatabase.lower(value)
}






/**
 * Representation of our app over FFI. Essenially a wrapper of [`App`].
 */
public protocol FfiAppProtocol: AnyObject, Sendable {
    
    /**
     * Get the auth type for the app
     */
    func authType()  -> AuthType
    
    /**
     * DANGER: This will wipe all wallet data on this device
     */
    func dangerousWipeAllData() 
    
    func debugOrRelease()  -> String
    
    /**
     * Frontend calls this method to send events to the rust application logic
     */
    func dispatch(action: AppAction) 
    
    func emailMailto(ios: String)  -> String
    
    func fees() async throws  -> FeeResponse
    
    /**
     * Find tapsigner wallet by card ident
     * Get the backup for the tap signer
     */
    func findTapSignerWallet(tapSigner: TapSigner)  -> WalletMetadata?
    
    /**
     * Get the backup for the tap signer
     */
    func getTapSignerBackup(tapSigner: TapSigner)  -> Data?
    
    func gitShortHash()  -> String
    
    /**
     * Get the selected wallet
     */
    func goToSelectedWallet()  -> WalletId?
    
    /**
     * Check if there's any wallets
     */
    func hasWallets()  -> Bool
    
    /**
     * run all initialization tasks here, only called once
     */
    func initOnStart() async 
    
    func listenForUpdates(updater: FfiReconcile) 
    
    /**
     * Load and reset the default route after 800ms delay
     */
    func loadAndResetDefaultRoute(route: Route) 
    
    /**
     * Load and reset the default route
     * Shows a laoding screen, and then resets the default route
     */
    func loadAndResetDefaultRouteAfter(route: Route, afterMillis: UInt32) 
    
    func network()  -> Network
    
    /**
     * Number of wallets
     */
    func numWallets()  -> UInt16
    
    func prices() async throws  -> PriceResponse
    
    /**
     * Change the default route, and reset the routes
     */
    func resetDefaultRouteTo(route: Route) 
    
    /**
     * Reset the default route, with a nested route
     */
    func resetNestedRoutesTo(defaultRoute: Route, nestedRoutes: [Route]) 
    
    /**
     * Save the backup for the tap signer in the keychain
     */
    func saveTapSignerBackup(tapSigner: TapSigner, backup: Data)  -> Bool
    
    /**
     * Select a wallet
     */
    func selectWallet(id: WalletId, nextRoute: Route?) throws 
    
    func state()  -> AppState
    
    /**
     * Get wallets that have not been backed up and verified
     */
    func unverifiedWalletIds()  -> [WalletId]
    
    func version()  -> String
    
}
/**
 * Representation of our app over FFI. Essenially a wrapper of [`App`].
 */
open class FfiApp: FfiAppProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_ffiapp(self.pointer, $0) }
    }
    /**
     * FFI constructor which wraps in an Arc
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_ffiapp_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_ffiapp(pointer, $0) }
    }

    

    
    /**
     * Get the auth type for the app
     */
open func authType() -> AuthType  {
    return try!  FfiConverterTypeAuthType_lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_auth_type(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * DANGER: This will wipe all wallet data on this device
     */
open func dangerousWipeAllData()  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_dangerous_wipe_all_data(self.uniffiClonePointer(),$0
    )
}
}
    
open func debugOrRelease() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_debug_or_release(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Frontend calls this method to send events to the rust application logic
     */
open func dispatch(action: AppAction)  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_dispatch(self.uniffiClonePointer(),
        FfiConverterTypeAppAction_lower(action),$0
    )
}
}
    
open func emailMailto(ios: String) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_email_mailto(self.uniffiClonePointer(),
        FfiConverterString.lower(ios),$0
    )
})
}
    
open func fees()async throws  -> FeeResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_ffiapp_fees(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeFeeResponse_lift,
            errorHandler: FfiConverterTypeAppError_lift
        )
}
    
    /**
     * Find tapsigner wallet by card ident
     * Get the backup for the tap signer
     */
open func findTapSignerWallet(tapSigner: TapSigner) -> WalletMetadata?  {
    return try!  FfiConverterOptionTypeWalletMetadata.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_find_tap_signer_wallet(self.uniffiClonePointer(),
        FfiConverterTypeTapSigner_lower(tapSigner),$0
    )
})
}
    
    /**
     * Get the backup for the tap signer
     */
open func getTapSignerBackup(tapSigner: TapSigner) -> Data?  {
    return try!  FfiConverterOptionData.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_get_tap_signer_backup(self.uniffiClonePointer(),
        FfiConverterTypeTapSigner_lower(tapSigner),$0
    )
})
}
    
open func gitShortHash() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_git_short_hash(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the selected wallet
     */
open func goToSelectedWallet() -> WalletId?  {
    return try!  FfiConverterOptionTypeWalletId.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_go_to_selected_wallet(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if there's any wallets
     */
open func hasWallets() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_has_wallets(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * run all initialization tasks here, only called once
     */
open func initOnStart()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_ffiapp_init_on_start(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func listenForUpdates(updater: FfiReconcile)  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_listen_for_updates(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceFfiReconcile_lower(updater),$0
    )
}
}
    
    /**
     * Load and reset the default route after 800ms delay
     */
open func loadAndResetDefaultRoute(route: Route)  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_load_and_reset_default_route(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(route),$0
    )
}
}
    
    /**
     * Load and reset the default route
     * Shows a laoding screen, and then resets the default route
     */
open func loadAndResetDefaultRouteAfter(route: Route, afterMillis: UInt32)  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_load_and_reset_default_route_after(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(route),
        FfiConverterUInt32.lower(afterMillis),$0
    )
}
}
    
open func network() -> Network  {
    return try!  FfiConverterTypeNetwork_lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_network(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Number of wallets
     */
open func numWallets() -> UInt16  {
    return try!  FfiConverterUInt16.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_num_wallets(self.uniffiClonePointer(),$0
    )
})
}
    
open func prices()async throws  -> PriceResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_ffiapp_prices(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypePriceResponse_lift,
            errorHandler: FfiConverterTypeAppError_lift
        )
}
    
    /**
     * Change the default route, and reset the routes
     */
open func resetDefaultRouteTo(route: Route)  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_reset_default_route_to(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(route),$0
    )
}
}
    
    /**
     * Reset the default route, with a nested route
     */
open func resetNestedRoutesTo(defaultRoute: Route, nestedRoutes: [Route])  {try! rustCall() {
    uniffi_cove_fn_method_ffiapp_reset_nested_routes_to(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(defaultRoute),
        FfiConverterSequenceTypeRoute.lower(nestedRoutes),$0
    )
}
}
    
    /**
     * Save the backup for the tap signer in the keychain
     */
open func saveTapSignerBackup(tapSigner: TapSigner, backup: Data) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_save_tap_signer_backup(self.uniffiClonePointer(),
        FfiConverterTypeTapSigner_lower(tapSigner),
        FfiConverterData.lower(backup),$0
    )
})
}
    
    /**
     * Select a wallet
     */
open func selectWallet(id: WalletId, nextRoute: Route? = nil)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_ffiapp_select_wallet(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),
        FfiConverterOptionTypeRoute.lower(nextRoute),$0
    )
}
}
    
open func state() -> AppState  {
    return try!  FfiConverterTypeAppState_lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_state(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get wallets that have not been backed up and verified
     */
open func unverifiedWalletIds() -> [WalletId]  {
    return try!  FfiConverterSequenceTypeWalletId.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_unverified_wallet_ids(self.uniffiClonePointer(),$0
    )
})
}
    
open func version() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_ffiapp_version(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiApp: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiApp

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiApp {
        return FfiApp(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiApp) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiApp {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiApp, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiApp_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiApp {
    return try FfiConverterTypeFfiApp.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiApp_lower(_ value: FfiApp) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiApp.lower(value)
}






public protocol FiatClientProtocol: AnyObject, Sendable {
    
}
open class FiatClient: FiatClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_fiatclient(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_fiatclient(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FiatClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FiatClient {
        return FiatClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FiatClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FiatClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> FiatClient {
    return try FfiConverterTypeFiatClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatClient_lower(_ value: FiatClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFiatClient.lower(value)
}






public protocol FileHandlerProtocol: AnyObject, Sendable {
    
    func read() throws  -> MultiFormat
    
}
open class FileHandler: FileHandlerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_filehandler(self.pointer, $0) }
    }
public convenience init(filePath: String) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_filehandler_new(
        FfiConverterString.lower(filePath),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_filehandler(pointer, $0) }
    }

    

    
open func read()throws  -> MultiFormat  {
    return try  FfiConverterTypeMultiFormat_lift(try rustCallWithError(FfiConverterTypeFileHandlerError_lift) {
    uniffi_cove_fn_method_filehandler_read(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFileHandler: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FileHandler

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FileHandler {
        return FileHandler(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FileHandler) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileHandler {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FileHandler, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFileHandler_lift(_ pointer: UnsafeMutableRawPointer) throws -> FileHandler {
    return try FfiConverterTypeFileHandler.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFileHandler_lower(_ value: FileHandler) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFileHandler.lower(value)
}






public protocol FingerprintProtocol: AnyObject, Sendable {
    
    func asLowercase()  -> String
    
    func asUppercase()  -> String
    
}
open class Fingerprint: FingerprintProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_fingerprint(self.pointer, $0) }
    }
public convenience init(id: WalletId)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeFingerprintError_lift) {
    uniffi_cove_fn_constructor_fingerprint_new(
        FfiConverterTypeWalletId_lower(id),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_fingerprint(pointer, $0) }
    }

    

    
open func asLowercase() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_fingerprint_as_lowercase(self.uniffiClonePointer(),$0
    )
})
}
    
open func asUppercase() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_fingerprint_as_uppercase(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFingerprint: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Fingerprint

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Fingerprint {
        return Fingerprint(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Fingerprint) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Fingerprint {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Fingerprint, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFingerprint_lift(_ pointer: UnsafeMutableRawPointer) throws -> Fingerprint {
    return try FfiConverterTypeFingerprint.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFingerprint_lower(_ value: Fingerprint) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFingerprint.lower(value)
}






public protocol FoundJsonProtocol: AnyObject, Sendable {
    
}
open class FoundJson: FoundJsonProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_foundjson(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_foundjson(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFoundJson: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FoundJson

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FoundJson {
        return FoundJson(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FoundJson) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FoundJson {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FoundJson, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFoundJson_lift(_ pointer: UnsafeMutableRawPointer) throws -> FoundJson {
    return try FfiConverterTypeFoundJson.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFoundJson_lower(_ value: FoundJson) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFoundJson.lower(value)
}






public protocol GlobalConfigTableProtocol: AnyObject, Sendable {
    
    func authType()  -> AuthType
    
    func clearSelectedWallet() throws 
    
    func colorScheme()  -> ColorSchemeSelection
    
    func delete(key: GlobalConfigKey) throws 
    
    func deleteHashedPinCode() throws 
    
    func get(key: GlobalConfigKey) throws  -> String?
    
    func hashedPinCode() throws  -> String
    
    func isInDecoyMode()  -> Bool
    
    func isInMainMode()  -> Bool
    
    func selectWallet(id: WalletId) throws 
    
    func selectedFiatCurrency()  -> FiatCurrency
    
    func selectedNetwork()  -> Network
    
    func selectedNode()  -> Node
    
    func selectedWallet()  -> WalletId?
    
    func set(key: GlobalConfigKey, value: String) throws 
    
    func setColorScheme(colorScheme: ColorSchemeSelection) throws 
    
    func setHashedPinCode(hashedPinCode: String) throws 
    
    func setSelectedNetwork(network: Network) throws 
    
    func setSelectedNode(node: Node) throws 
    
    func walletMode()  -> WalletMode
    
}
open class GlobalConfigTable: GlobalConfigTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_globalconfigtable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_globalconfigtable(pointer, $0) }
    }

    

    
open func authType() -> AuthType  {
    return try!  FfiConverterTypeAuthType_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_authtype(self.uniffiClonePointer(),$0
    )
})
}
    
open func clearSelectedWallet()throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_clear_selected_wallet(self.uniffiClonePointer(),$0
    )
}
}
    
open func colorScheme() -> ColorSchemeSelection  {
    return try!  FfiConverterTypeColorSchemeSelection_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_colorscheme(self.uniffiClonePointer(),$0
    )
})
}
    
open func delete(key: GlobalConfigKey)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_delete(self.uniffiClonePointer(),
        FfiConverterTypeGlobalConfigKey_lower(key),$0
    )
}
}
    
open func deleteHashedPinCode()throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_delete_hashed_pin_code(self.uniffiClonePointer(),$0
    )
}
}
    
open func get(key: GlobalConfigKey)throws  -> String?  {
    return try  FfiConverterOptionString.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_get(self.uniffiClonePointer(),
        FfiConverterTypeGlobalConfigKey_lower(key),$0
    )
})
}
    
open func hashedPinCode()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_hashed_pin_code(self.uniffiClonePointer(),$0
    )
})
}
    
open func isInDecoyMode() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_is_in_decoy_mode(self.uniffiClonePointer(),$0
    )
})
}
    
open func isInMainMode() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_is_in_main_mode(self.uniffiClonePointer(),$0
    )
})
}
    
open func selectWallet(id: WalletId)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_select_wallet(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),$0
    )
}
}
    
open func selectedFiatCurrency() -> FiatCurrency  {
    return try!  FfiConverterTypeFiatCurrency_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_selectedfiatcurrency(self.uniffiClonePointer(),$0
    )
})
}
    
open func selectedNetwork() -> Network  {
    return try!  FfiConverterTypeNetwork_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_selected_network(self.uniffiClonePointer(),$0
    )
})
}
    
open func selectedNode() -> Node  {
    return try!  FfiConverterTypeNode_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_selected_node(self.uniffiClonePointer(),$0
    )
})
}
    
open func selectedWallet() -> WalletId?  {
    return try!  FfiConverterOptionTypeWalletId.lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_selected_wallet(self.uniffiClonePointer(),$0
    )
})
}
    
open func set(key: GlobalConfigKey, value: String)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_set(self.uniffiClonePointer(),
        FfiConverterTypeGlobalConfigKey_lower(key),
        FfiConverterString.lower(value),$0
    )
}
}
    
open func setColorScheme(colorScheme: ColorSchemeSelection)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_setcolorscheme(self.uniffiClonePointer(),
        FfiConverterTypeColorSchemeSelection_lower(colorScheme),$0
    )
}
}
    
open func setHashedPinCode(hashedPinCode: String)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_set_hashed_pin_code(self.uniffiClonePointer(),
        FfiConverterString.lower(hashedPinCode),$0
    )
}
}
    
open func setSelectedNetwork(network: Network)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_set_selected_network(self.uniffiClonePointer(),
        FfiConverterTypeNetwork_lower(network),$0
    )
}
}
    
open func setSelectedNode(node: Node)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalconfigtable_set_selected_node(self.uniffiClonePointer(),
        FfiConverterTypeNode_lower(node),$0
    )
}
}
    
open func walletMode() -> WalletMode  {
    return try!  FfiConverterTypeWalletMode_lift(try! rustCall() {
    uniffi_cove_fn_method_globalconfigtable_wallet_mode(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalConfigTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = GlobalConfigTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> GlobalConfigTable {
        return GlobalConfigTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: GlobalConfigTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalConfigTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: GlobalConfigTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> GlobalConfigTable {
    return try FfiConverterTypeGlobalConfigTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigTable_lower(_ value: GlobalConfigTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGlobalConfigTable.lower(value)
}






public protocol GlobalFlagTableProtocol: AnyObject, Sendable {
    
    func get(key: GlobalFlagKey) throws  -> Bool
    
    func getBoolConfig(key: GlobalFlagKey)  -> Bool
    
    func set(key: GlobalFlagKey, value: Bool) throws 
    
    func toggleBoolConfig(key: GlobalFlagKey) throws 
    
}
open class GlobalFlagTable: GlobalFlagTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_globalflagtable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_globalflagtable(pointer, $0) }
    }

    

    
open func get(key: GlobalFlagKey)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalflagtable_get(self.uniffiClonePointer(),
        FfiConverterTypeGlobalFlagKey_lower(key),$0
    )
})
}
    
open func getBoolConfig(key: GlobalFlagKey) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_globalflagtable_get_bool_config(self.uniffiClonePointer(),
        FfiConverterTypeGlobalFlagKey_lower(key),$0
    )
})
}
    
open func set(key: GlobalFlagKey, value: Bool)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalflagtable_set(self.uniffiClonePointer(),
        FfiConverterTypeGlobalFlagKey_lower(key),
        FfiConverterBool.lower(value),$0
    )
}
}
    
open func toggleBoolConfig(key: GlobalFlagKey)throws   {try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_globalflagtable_toggle_bool_config(self.uniffiClonePointer(),
        FfiConverterTypeGlobalFlagKey_lower(key),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalFlagTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = GlobalFlagTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> GlobalFlagTable {
        return GlobalFlagTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: GlobalFlagTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalFlagTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: GlobalFlagTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> GlobalFlagTable {
    return try FfiConverterTypeGlobalFlagTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagTable_lower(_ value: GlobalFlagTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGlobalFlagTable.lower(value)
}






public protocol HardwareExportProtocol: AnyObject, Sendable {
    
}
open class HardwareExport: HardwareExportProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_hardwareexport(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_hardwareexport(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHardwareExport: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HardwareExport

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HardwareExport {
        return HardwareExport(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HardwareExport) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HardwareExport {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HardwareExport, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHardwareExport_lift(_ pointer: UnsafeMutableRawPointer) throws -> HardwareExport {
    return try FfiConverterTypeHardwareExport.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHardwareExport_lower(_ value: HardwareExport) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHardwareExport.lower(value)
}






public protocol HeaderIconPresenterProtocol: AnyObject, Sendable {
    
    func backgroundColor(state: TransactionState, direction: TransactionDirection, colorScheme: FfiColorScheme, confirmationCount: Int64)  -> FfiColor
    
    func iconColor(state: TransactionState, direction: TransactionDirection, colorScheme: FfiColorScheme, confirmationCount: Int64)  -> FfiColor
    
    func ringColor(state: TransactionState, colorScheme: FfiColorScheme, direction: TransactionDirection, confirmations: Int64, ringNumber: Int64)  -> FfiColor
    
}
open class HeaderIconPresenter: HeaderIconPresenterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_headericonpresenter(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_headericonpresenter_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_headericonpresenter(pointer, $0) }
    }

    

    
open func backgroundColor(state: TransactionState, direction: TransactionDirection, colorScheme: FfiColorScheme, confirmationCount: Int64) -> FfiColor  {
    return try!  FfiConverterTypeFfiColor_lift(try! rustCall() {
    uniffi_cove_fn_method_headericonpresenter_background_color(self.uniffiClonePointer(),
        FfiConverterTypeTransactionState_lower(state),
        FfiConverterTypeTransactionDirection_lower(direction),
        FfiConverterTypeFfiColorScheme_lower(colorScheme),
        FfiConverterInt64.lower(confirmationCount),$0
    )
})
}
    
open func iconColor(state: TransactionState, direction: TransactionDirection, colorScheme: FfiColorScheme, confirmationCount: Int64) -> FfiColor  {
    return try!  FfiConverterTypeFfiColor_lift(try! rustCall() {
    uniffi_cove_fn_method_headericonpresenter_icon_color(self.uniffiClonePointer(),
        FfiConverterTypeTransactionState_lower(state),
        FfiConverterTypeTransactionDirection_lower(direction),
        FfiConverterTypeFfiColorScheme_lower(colorScheme),
        FfiConverterInt64.lower(confirmationCount),$0
    )
})
}
    
open func ringColor(state: TransactionState, colorScheme: FfiColorScheme, direction: TransactionDirection, confirmations: Int64, ringNumber: Int64) -> FfiColor  {
    return try!  FfiConverterTypeFfiColor_lift(try! rustCall() {
    uniffi_cove_fn_method_headericonpresenter_ring_color(self.uniffiClonePointer(),
        FfiConverterTypeTransactionState_lower(state),
        FfiConverterTypeFfiColorScheme_lower(colorScheme),
        FfiConverterTypeTransactionDirection_lower(direction),
        FfiConverterInt64.lower(confirmations),
        FfiConverterInt64.lower(ringNumber),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHeaderIconPresenter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HeaderIconPresenter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HeaderIconPresenter {
        return HeaderIconPresenter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HeaderIconPresenter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HeaderIconPresenter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HeaderIconPresenter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeaderIconPresenter_lift(_ pointer: UnsafeMutableRawPointer) throws -> HeaderIconPresenter {
    return try FfiConverterTypeHeaderIconPresenter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeaderIconPresenter_lower(_ value: HeaderIconPresenter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHeaderIconPresenter.lower(value)
}






public protocol HistoricalPriceTableProtocol: AnyObject, Sendable {
    
}
open class HistoricalPriceTable: HistoricalPriceTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_historicalpricetable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_historicalpricetable(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHistoricalPriceTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HistoricalPriceTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HistoricalPriceTable {
        return HistoricalPriceTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HistoricalPriceTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HistoricalPriceTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HistoricalPriceTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> HistoricalPriceTable {
    return try FfiConverterTypeHistoricalPriceTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceTable_lower(_ value: HistoricalPriceTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHistoricalPriceTable.lower(value)
}






public protocol HistoricalPricesResponseProtocol: AnyObject, Sendable {
    
}
open class HistoricalPricesResponse: HistoricalPricesResponseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_historicalpricesresponse(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_historicalpricesresponse(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHistoricalPricesResponse: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HistoricalPricesResponse

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HistoricalPricesResponse {
        return HistoricalPricesResponse(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HistoricalPricesResponse) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HistoricalPricesResponse {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HistoricalPricesResponse, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPricesResponse_lift(_ pointer: UnsafeMutableRawPointer) throws -> HistoricalPricesResponse {
    return try FfiConverterTypeHistoricalPricesResponse.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPricesResponse_lower(_ value: HistoricalPricesResponse) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHistoricalPricesResponse.lower(value)
}






public protocol LabelManagerProtocol: AnyObject, Sendable {
    
    func deleteLabelsForTxn(txId: TxId) throws 
    
    func export() throws  -> String
    
    func exportDefaultFileName(name: String)  -> String
    
    func hasLabels()  -> Bool
    
    func `import`(jsonl: String) throws 
    
    func importLabels(labels: Bip329Labels) throws 
    
    func insertOrUpdateLabelsForTxn(details: TransactionDetails, label: String, origin: String?) throws 
    
    func transactionLabel(txId: TxId)  -> String?
    
}
open class LabelManager: LabelManagerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_labelmanager(self.pointer, $0) }
    }
public convenience init(id: WalletId) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_labelmanager_new(
        FfiConverterTypeWalletId_lower(id),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_labelmanager(pointer, $0) }
    }

    

    
open func deleteLabelsForTxn(txId: TxId)throws   {try rustCallWithError(FfiConverterTypeLabelManagerError_lift) {
    uniffi_cove_fn_method_labelmanager_delete_labels_for_txn(self.uniffiClonePointer(),
        FfiConverterTypeTxId_lower(txId),$0
    )
}
}
    
open func export()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLabelManagerError_lift) {
    uniffi_cove_fn_method_labelmanager_export(self.uniffiClonePointer(),$0
    )
})
}
    
open func exportDefaultFileName(name: String) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_labelmanager_export_default_file_name(self.uniffiClonePointer(),
        FfiConverterString.lower(name),$0
    )
})
}
    
open func hasLabels() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_labelmanager_has_labels(self.uniffiClonePointer(),$0
    )
})
}
    
open func `import`(jsonl: String)throws   {try rustCallWithError(FfiConverterTypeLabelManagerError_lift) {
    uniffi_cove_fn_method_labelmanager_import(self.uniffiClonePointer(),
        FfiConverterString.lower(jsonl),$0
    )
}
}
    
open func importLabels(labels: Bip329Labels)throws   {try rustCallWithError(FfiConverterTypeLabelManagerError_lift) {
    uniffi_cove_fn_method_labelmanager_importlabels(self.uniffiClonePointer(),
        FfiConverterTypeBip329Labels_lower(labels),$0
    )
}
}
    
open func insertOrUpdateLabelsForTxn(details: TransactionDetails, label: String, origin: String?)throws   {try rustCallWithError(FfiConverterTypeLabelManagerError_lift) {
    uniffi_cove_fn_method_labelmanager_insert_or_update_labels_for_txn(self.uniffiClonePointer(),
        FfiConverterTypeTransactionDetails_lower(details),
        FfiConverterString.lower(label),
        FfiConverterOptionString.lower(origin),$0
    )
}
}
    
open func transactionLabel(txId: TxId) -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_labelmanager_transaction_label(self.uniffiClonePointer(),
        FfiConverterTypeTxId_lower(txId),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLabelManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LabelManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LabelManager {
        return LabelManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LabelManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LabelManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LabelManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> LabelManager {
    return try FfiConverterTypeLabelManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelManager_lower(_ value: LabelManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLabelManager.lower(value)
}






public protocol LabelsTableProtocol: AnyObject, Sendable {
    
}
open class LabelsTable: LabelsTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_labelstable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_labelstable(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLabelsTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LabelsTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LabelsTable {
        return LabelsTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LabelsTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LabelsTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LabelsTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelsTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> LabelsTable {
    return try FfiConverterTypeLabelsTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelsTable_lower(_ value: LabelsTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLabelsTable.lower(value)
}






public protocol MnemonicProtocol: AnyObject, Sendable {
    
    func allWords()  -> [GroupedWord]
    
    func words()  -> [String]
    
}
open class Mnemonic: MnemonicProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_mnemonic(self.pointer, $0) }
    }
public convenience init(id: WalletId)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeMnemonicError_lift) {
    uniffi_cove_fn_constructor_mnemonic_new(
        FfiConverterTypeWalletId_lower(id),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_mnemonic(pointer, $0) }
    }

    
public static func preview(numberOfBip39Words: NumberOfBip39Words) -> Mnemonic  {
    return try!  FfiConverterTypeMnemonic_lift(try! rustCall() {
    uniffi_cove_fn_constructor_mnemonic_preview(
        FfiConverterTypeNumberOfBip39Words_lower(numberOfBip39Words),$0
    )
})
}
    

    
open func allWords() -> [GroupedWord]  {
    return try!  FfiConverterSequenceTypeGroupedWord.lift(try! rustCall() {
    uniffi_cove_fn_method_mnemonic_all_words(self.uniffiClonePointer(),$0
    )
})
}
    
open func words() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_mnemonic_words(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMnemonic: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Mnemonic

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mnemonic {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Mnemonic, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonic_lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
    return try FfiConverterTypeMnemonic.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonic_lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMnemonic.lower(value)
}






public protocol MultiQrProtocol: AnyObject, Sendable {
    
    func addPart(qr: String) throws  -> BbqrJoinResult
    
    func getGroupedWords(qr: StringOrData, groupsOf: UInt8) throws  -> [[String]]?
    
    func handleScanResult(qr: StringOrData) throws  -> MultiQrScanResult
    
    func isBbqr()  -> Bool
    
    func isSeedQr()  -> Bool
    
    func totalParts()  -> UInt32
    
}
open class MultiQr: MultiQrProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_multiqr(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_multiqr(pointer, $0) }
    }

    
public static func newFromString(qr: String) -> MultiQr  {
    return try!  FfiConverterTypeMultiQr_lift(try! rustCall() {
    uniffi_cove_fn_constructor_multiqr_new_from_string(
        FfiConverterString.lower(qr),$0
    )
})
}
    
public static func tryNew(qr: StringOrData)throws  -> MultiQr  {
    return try  FfiConverterTypeMultiQr_lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_constructor_multiqr_try_new(
        FfiConverterTypeStringOrData_lower(qr),$0
    )
})
}
    
public static func tryNewFromData(data: Data)throws  -> MultiQr  {
    return try  FfiConverterTypeMultiQr_lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_constructor_multiqr_try_new_from_data(
        FfiConverterData.lower(data),$0
    )
})
}
    

    
open func addPart(qr: String)throws  -> BbqrJoinResult  {
    return try  FfiConverterTypeBbqrJoinResult_lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_multiqr_add_part(self.uniffiClonePointer(),
        FfiConverterString.lower(qr),$0
    )
})
}
    
open func getGroupedWords(qr: StringOrData, groupsOf: UInt8)throws  -> [[String]]?  {
    return try  FfiConverterOptionSequenceSequenceString.lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_multiqr_get_grouped_words(self.uniffiClonePointer(),
        FfiConverterTypeStringOrData_lower(qr),
        FfiConverterUInt8.lower(groupsOf),$0
    )
})
}
    
open func handleScanResult(qr: StringOrData)throws  -> MultiQrScanResult  {
    return try  FfiConverterTypeMultiQrScanResult_lift(try rustCallWithError(FfiConverterTypeMultiQrError_lift) {
    uniffi_cove_fn_method_multiqr_handle_scan_result(self.uniffiClonePointer(),
        FfiConverterTypeStringOrData_lower(qr),$0
    )
})
}
    
open func isBbqr() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_multiqr_is_bbqr(self.uniffiClonePointer(),$0
    )
})
}
    
open func isSeedQr() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_multiqr_is_seed_qr(self.uniffiClonePointer(),$0
    )
})
}
    
open func totalParts() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_cove_fn_method_multiqr_total_parts(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiQr: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MultiQr

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MultiQr {
        return MultiQr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MultiQr) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiQr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MultiQr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQr_lift(_ pointer: UnsafeMutableRawPointer) throws -> MultiQr {
    return try FfiConverterTypeMultiQr.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQr_lower(_ value: MultiQr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMultiQr.lower(value)
}






public protocol NodeSelectorProtocol: AnyObject, Sendable {
    
    /**
     * Check the node url and set it as selected node if it is valid
     */
    func checkAndSaveNode(node: Node) async throws 
    
    func checkSelectedNode(node: Node) async throws 
    
    func nodeList()  -> [NodeSelection]
    
    /**
     * Use the url and name of the custom node to set it as the selected node
     */
    func parseCustomNode(url: String, name: String, enteredName: String) throws  -> Node
    
    func selectPresetNode(name: String) throws  -> Node
    
    func selectedNode()  -> NodeSelection
    
}
open class NodeSelector: NodeSelectorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_nodeselector(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_nodeselector_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_nodeselector(pointer, $0) }
    }

    

    
    /**
     * Check the node url and set it as selected node if it is valid
     */
open func checkAndSaveNode(node: Node)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_nodeselector_check_and_save_node(
                    self.uniffiClonePointer(),
                    FfiConverterTypeNode_lower(node)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeNodeSelectorError_lift
        )
}
    
open func checkSelectedNode(node: Node)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_nodeselector_check_selected_node(
                    self.uniffiClonePointer(),
                    FfiConverterTypeNode_lower(node)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeNodeSelectorError_lift
        )
}
    
open func nodeList() -> [NodeSelection]  {
    return try!  FfiConverterSequenceTypeNodeSelection.lift(try! rustCall() {
    uniffi_cove_fn_method_nodeselector_node_list(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Use the url and name of the custom node to set it as the selected node
     */
open func parseCustomNode(url: String, name: String, enteredName: String)throws  -> Node  {
    return try  FfiConverterTypeNode_lift(try rustCallWithError(FfiConverterTypeNodeSelectorError_lift) {
    uniffi_cove_fn_method_nodeselector_parse_custom_node(self.uniffiClonePointer(),
        FfiConverterString.lower(url),
        FfiConverterString.lower(name),
        FfiConverterString.lower(enteredName),$0
    )
})
}
    
open func selectPresetNode(name: String)throws  -> Node  {
    return try  FfiConverterTypeNode_lift(try rustCallWithError(FfiConverterTypeNodeSelectorError_lift) {
    uniffi_cove_fn_method_nodeselector_select_preset_node(self.uniffiClonePointer(),
        FfiConverterString.lower(name),$0
    )
})
}
    
open func selectedNode() -> NodeSelection  {
    return try!  FfiConverterTypeNodeSelection_lift(try! rustCall() {
    uniffi_cove_fn_method_nodeselector_selected_node(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeSelector: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeSelector

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeSelector {
        return NodeSelector(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeSelector) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeSelector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeSelector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelector_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeSelector {
    return try FfiConverterTypeNodeSelector.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelector_lower(_ value: NodeSelector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeSelector.lower(value)
}






public protocol PendingWalletProtocol: AnyObject, Sendable {
    
}
open class PendingWallet: PendingWalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_pendingwallet(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_pendingwallet(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PendingWallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PendingWallet {
        return PendingWallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PendingWallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingWallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PendingWallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> PendingWallet {
    return try FfiConverterTypePendingWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWallet_lower(_ value: PendingWallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypePendingWallet.lower(value)
}






public protocol PriceResponseProtocol: AnyObject, Sendable {
    
    func get()  -> UInt64
    
    func getForCurrency(currency: FiatCurrency)  -> UInt64
    
}
open class PriceResponse: PriceResponseProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_priceresponse(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_priceresponse(pointer, $0) }
    }

    

    
open func get() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_priceresponse_get(self.uniffiClonePointer(),$0
    )
})
}
    
open func getForCurrency(currency: FiatCurrency) -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_priceresponse_get_for_currency(self.uniffiClonePointer(),
        FfiConverterTypeFiatCurrency_lower(currency),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePriceResponse: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PriceResponse

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PriceResponse {
        return PriceResponse(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PriceResponse) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PriceResponse {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PriceResponse, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePriceResponse_lift(_ pointer: UnsafeMutableRawPointer) throws -> PriceResponse {
    return try FfiConverterTypePriceResponse.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePriceResponse_lower(_ value: PriceResponse) -> UnsafeMutableRawPointer {
    return FfiConverterTypePriceResponse.lower(value)
}






public protocol PushTxProtocol: AnyObject, Sendable {
    
}
open class PushTx: PushTxProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_pushtx(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_pushtx(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePushTx: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PushTx

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PushTx {
        return PushTx(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PushTx) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PushTx {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PushTx, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePushTx_lift(_ pointer: UnsafeMutableRawPointer) throws -> PushTx {
    return try FfiConverterTypePushTx.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePushTx_lower(_ value: PushTx) -> UnsafeMutableRawPointer {
    return FfiConverterTypePushTx.lower(value)
}






public protocol RouteFactoryProtocol: AnyObject, Sendable {
    
    func coldWalletImport(route: ColdWalletRoute)  -> Route
    
    func hotWallet(route: HotWalletRoute)  -> Route
    
    func hotWalletImportFromScan()  -> Route
    
    func isSameParentRoute(route: Route, routeToCheck: Route)  -> Bool
    
    func loadAndResetNestedTo(defaultRoute: Route, nestedRoutes: [Route])  -> Route
    
    func loadAndResetTo(resetTo: Route)  -> Route
    
    func loadAndResetToAfter(resetTo: Route, time: UInt32)  -> Route
    
    func mainWalletSettings(id: WalletId)  -> Route
    
    func nestedSettings(route: SettingsRoute)  -> [Route]
    
    func nestedWalletSettings(id: WalletId)  -> [Route]
    
    func newHotWallet()  -> Route
    
    func newWalletSelect()  -> Route
    
    func qrImport()  -> Route
    
    func secretWords(walletId: WalletId)  -> Route
    
    func send(send: SendRoute)  -> Route
    
    func sendConfirm(id: WalletId, details: ConfirmDetails, signedTransaction: BitcoinTransaction?, signedPsbt: Psbt?)  -> Route
    
    func sendHardwareExport(id: WalletId, details: ConfirmDetails)  -> Route
    
    func sendSetAmount(id: WalletId, address: Address?, amount: Amount?)  -> Route
    
    func walletSettings(id: WalletId, route: WalletSettingsRoute)  -> Route
    
}
open class RouteFactory: RouteFactoryProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_routefactory(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_routefactory_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_routefactory(pointer, $0) }
    }

    

    
open func coldWalletImport(route: ColdWalletRoute) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_cold_wallet_import(self.uniffiClonePointer(),
        FfiConverterTypeColdWalletRoute_lower(route),$0
    )
})
}
    
open func hotWallet(route: HotWalletRoute) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_hot_wallet(self.uniffiClonePointer(),
        FfiConverterTypeHotWalletRoute_lower(route),$0
    )
})
}
    
open func hotWalletImportFromScan() -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_hot_wallet_import_from_scan(self.uniffiClonePointer(),$0
    )
})
}
    
open func isSameParentRoute(route: Route, routeToCheck: Route) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_is_same_parent_route(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(route),
        FfiConverterTypeRoute_lower(routeToCheck),$0
    )
})
}
    
open func loadAndResetNestedTo(defaultRoute: Route, nestedRoutes: [Route]) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_load_and_reset_nested_to(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(defaultRoute),
        FfiConverterSequenceTypeRoute.lower(nestedRoutes),$0
    )
})
}
    
open func loadAndResetTo(resetTo: Route) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_load_and_reset_to(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(resetTo),$0
    )
})
}
    
open func loadAndResetToAfter(resetTo: Route, time: UInt32) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_load_and_reset_to_after(self.uniffiClonePointer(),
        FfiConverterTypeRoute_lower(resetTo),
        FfiConverterUInt32.lower(time),$0
    )
})
}
    
open func mainWalletSettings(id: WalletId) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_main_wallet_settings(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),$0
    )
})
}
    
open func nestedSettings(route: SettingsRoute) -> [Route]  {
    return try!  FfiConverterSequenceTypeRoute.lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_nested_settings(self.uniffiClonePointer(),
        FfiConverterTypeSettingsRoute_lower(route),$0
    )
})
}
    
open func nestedWalletSettings(id: WalletId) -> [Route]  {
    return try!  FfiConverterSequenceTypeRoute.lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_nested_wallet_settings(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),$0
    )
})
}
    
open func newHotWallet() -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_new_hot_wallet(self.uniffiClonePointer(),$0
    )
})
}
    
open func newWalletSelect() -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_new_wallet_select(self.uniffiClonePointer(),$0
    )
})
}
    
open func qrImport() -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_qr_import(self.uniffiClonePointer(),$0
    )
})
}
    
open func secretWords(walletId: WalletId) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_secret_words(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(walletId),$0
    )
})
}
    
open func send(send: SendRoute) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_send(self.uniffiClonePointer(),
        FfiConverterTypeSendRoute_lower(send),$0
    )
})
}
    
open func sendConfirm(id: WalletId, details: ConfirmDetails, signedTransaction: BitcoinTransaction? = nil, signedPsbt: Psbt? = nil) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_send_confirm(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),
        FfiConverterTypeConfirmDetails_lower(details),
        FfiConverterOptionTypeBitcoinTransaction.lower(signedTransaction),
        FfiConverterOptionTypePsbt.lower(signedPsbt),$0
    )
})
}
    
open func sendHardwareExport(id: WalletId, details: ConfirmDetails) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_send_hardware_export(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),
        FfiConverterTypeConfirmDetails_lower(details),$0
    )
})
}
    
open func sendSetAmount(id: WalletId, address: Address? = nil, amount: Amount? = nil) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_send_set_amount(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),
        FfiConverterOptionTypeAddress.lower(address),
        FfiConverterOptionTypeAmount.lower(amount),$0
    )
})
}
    
open func walletSettings(id: WalletId, route: WalletSettingsRoute) -> Route  {
    return try!  FfiConverterTypeRoute_lift(try! rustCall() {
    uniffi_cove_fn_method_routefactory_wallet_settings(self.uniffiClonePointer(),
        FfiConverterTypeWalletId_lower(id),
        FfiConverterTypeWalletSettingsRoute_lower(route),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteFactory: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteFactory

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteFactory {
        return RouteFactory(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteFactory) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteFactory {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteFactory, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteFactory_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteFactory {
    return try FfiConverterTypeRouteFactory.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteFactory_lower(_ value: RouteFactory) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteFactory.lower(value)
}






public protocol RustAuthManagerProtocol: AnyObject, Sendable {
    
    /**
     * Get the auth type for the app
     */
    func authType()  -> AuthType
    
    /**
     * Check to see if the passed in PIN matches the decoy pin
     */
    func checkDecoyPin(pin: String)  -> Bool
    
    /**
     * Check to see if the passed in PIN matches the wipe data PIN
     */
    func checkWipeDataPin(pin: String)  -> Bool
    
    /**
     * Delete the decoy pin
     */
    func deleteDecoyPin() 
    
    /**
     * Delete the wipe data pin
     */
    func deleteWipeDataPin() 
    
    /**
     * Action from the frontend to change the state of the view model
     */
    func dispatch(action: AuthManagerAction) 
    
    /**
     * Check if decoy pin is enabled, not if the user is in decoy mode
     */
    func isDecoyPinEnabled()  -> Bool
    
    /**
     * Actually check if the user is in decoy mode
     */
    func isInDecoyMode()  -> Bool
    
    /**
     * Check if the wipe data pin is enabled
     */
    func isWipeDataPinEnabled()  -> Bool
    
    func listenForUpdates(reconciler: AuthManagerReconciler) 
    
    func lockedAt()  -> UInt64?
    
    func send(message: AuthManagerReconcileMessage) 
    
    func setAuthType(authType: AuthType) 
    
    /**
     * Set the decoy pin
     */
    func setDecoyPin(pin: String) throws 
    
    func setLockedAt(lockedAt: UInt64) throws 
    
    /**
     * Set the wipe data pin
     */
    func setWipeDataPin(pin: String) throws 
    
    /**
     * Switch from main mode to decoy mode
     */
    func switchToDecoyMode() 
    
    /**
     * Switch from decoy mode to main mode
     */
    func switchToMainMode() 
    
    /**
     * Validate if we have the correct settings to be able to set a decoy or wipe data pin
     */
    func validatePinSettings(pin: String) throws 
    
}
open class RustAuthManager: RustAuthManagerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_rustauthmanager(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_rustauthmanager_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_rustauthmanager(pointer, $0) }
    }

    

    
    /**
     * Get the auth type for the app
     */
open func authType() -> AuthType  {
    return try!  FfiConverterTypeAuthType_lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_auth_type(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check to see if the passed in PIN matches the decoy pin
     */
open func checkDecoyPin(pin: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_checkdecoypin(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
})
}
    
    /**
     * Check to see if the passed in PIN matches the wipe data PIN
     */
open func checkWipeDataPin(pin: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_checkwipedatapin(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
})
}
    
    /**
     * Delete the decoy pin
     */
open func deleteDecoyPin()  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_delete_decoy_pin(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Delete the wipe data pin
     */
open func deleteWipeDataPin()  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_delete_wipe_data_pin(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Action from the frontend to change the state of the view model
     */
open func dispatch(action: AuthManagerAction)  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_dispatch(self.uniffiClonePointer(),
        FfiConverterTypeAuthManagerAction_lower(action),$0
    )
}
}
    
    /**
     * Check if decoy pin is enabled, not if the user is in decoy mode
     */
open func isDecoyPinEnabled() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_is_decoy_pin_enabled(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Actually check if the user is in decoy mode
     */
open func isInDecoyMode() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_is_in_decoy_mode(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if the wipe data pin is enabled
     */
open func isWipeDataPinEnabled() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_is_wipe_data_pin_enabled(self.uniffiClonePointer(),$0
    )
})
}
    
open func listenForUpdates(reconciler: AuthManagerReconciler)  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_listen_for_updates(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceAuthManagerReconciler_lower(reconciler),$0
    )
}
}
    
open func lockedAt() -> UInt64?  {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_locked_at(self.uniffiClonePointer(),$0
    )
})
}
    
open func send(message: AuthManagerReconcileMessage)  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_send(self.uniffiClonePointer(),
        FfiConverterTypeAuthManagerReconcileMessage_lower(message),$0
    )
}
}
    
open func setAuthType(authType: AuthType)  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_set_auth_type(self.uniffiClonePointer(),
        FfiConverterTypeAuthType_lower(authType),$0
    )
}
}
    
    /**
     * Set the decoy pin
     */
open func setDecoyPin(pin: String)throws   {try rustCallWithError(FfiConverterTypeAuthManagerError_lift) {
    uniffi_cove_fn_method_rustauthmanager_set_decoy_pin(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
}
}
    
open func setLockedAt(lockedAt: UInt64)throws   {try rustCallWithError(FfiConverterTypeAuthManagerError_lift) {
    uniffi_cove_fn_method_rustauthmanager_set_locked_at(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(lockedAt),$0
    )
}
}
    
    /**
     * Set the wipe data pin
     */
open func setWipeDataPin(pin: String)throws   {try rustCallWithError(FfiConverterTypeAuthManagerError_lift) {
    uniffi_cove_fn_method_rustauthmanager_set_wipe_data_pin(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
}
}
    
    /**
     * Switch from main mode to decoy mode
     */
open func switchToDecoyMode()  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_switch_to_decoy_mode(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Switch from decoy mode to main mode
     */
open func switchToMainMode()  {try! rustCall() {
    uniffi_cove_fn_method_rustauthmanager_switch_to_main_mode(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Validate if we have the correct settings to be able to set a decoy or wipe data pin
     */
open func validatePinSettings(pin: String)throws   {try rustCallWithError(FfiConverterTypeTrickPinError_lift) {
    uniffi_cove_fn_method_rustauthmanager_validate_pin_settings(self.uniffiClonePointer(),
        FfiConverterString.lower(pin),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRustAuthManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RustAuthManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RustAuthManager {
        return RustAuthManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RustAuthManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RustAuthManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RustAuthManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustAuthManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> RustAuthManager {
    return try FfiConverterTypeRustAuthManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustAuthManager_lower(_ value: RustAuthManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRustAuthManager.lower(value)
}






public protocol RustImportWalletManagerProtocol: AnyObject, Sendable {
    
    /**
     * Action from the frontend to change the state of the view model
     */
    func dispatch(action: ImportWalletManagerAction) 
    
    /**
     * Import wallet view from entered words
     */
    func importWallet(enteredWords: [[String]]) throws  -> WalletMetadata
    
    func listenForUpdates(reconciler: ImportWalletManagerReconciler) 
    
}
open class RustImportWalletManager: RustImportWalletManagerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_rustimportwalletmanager(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_rustimportwalletmanager_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_rustimportwalletmanager(pointer, $0) }
    }

    

    
    /**
     * Action from the frontend to change the state of the view model
     */
open func dispatch(action: ImportWalletManagerAction)  {try! rustCall() {
    uniffi_cove_fn_method_rustimportwalletmanager_dispatch(self.uniffiClonePointer(),
        FfiConverterTypeImportWalletManagerAction_lower(action),$0
    )
}
}
    
    /**
     * Import wallet view from entered words
     */
open func importWallet(enteredWords: [[String]])throws  -> WalletMetadata  {
    return try  FfiConverterTypeWalletMetadata_lift(try rustCallWithError(FfiConverterTypeImportWalletError_lift) {
    uniffi_cove_fn_method_rustimportwalletmanager_import_wallet(self.uniffiClonePointer(),
        FfiConverterSequenceSequenceString.lower(enteredWords),$0
    )
})
}
    
open func listenForUpdates(reconciler: ImportWalletManagerReconciler)  {try! rustCall() {
    uniffi_cove_fn_method_rustimportwalletmanager_listen_for_updates(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceImportWalletManagerReconciler_lower(reconciler),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRustImportWalletManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RustImportWalletManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RustImportWalletManager {
        return RustImportWalletManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RustImportWalletManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RustImportWalletManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RustImportWalletManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustImportWalletManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> RustImportWalletManager {
    return try FfiConverterTypeRustImportWalletManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustImportWalletManager_lower(_ value: RustImportWalletManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRustImportWalletManager.lower(value)
}






public protocol RustPendingWalletManagerProtocol: AnyObject, Sendable {
    
    func bip39Words()  -> [String]
    
    func bip39WordsGrouped()  -> [[GroupedWord]]
    
    func cardIndexes()  -> UInt8
    
    /**
     * Action from the frontend to change the state of the view model
     */
    func dispatch(action: PendingWalletManagerAction) 
    
    func getState()  -> PendingWalletManagerState
    
    func listenForUpdates(reconciler: PendingWalletManagerReconciler) 
    
    func numberOfWordsCount()  -> UInt8
    
    func saveWallet() throws  -> WalletMetadata
    
}
open class RustPendingWalletManager: RustPendingWalletManagerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_rustpendingwalletmanager(self.pointer, $0) }
    }
public convenience init(numberOfWords: NumberOfBip39Words) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_rustpendingwalletmanager_new(
        FfiConverterTypeNumberOfBip39Words_lower(numberOfWords),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_rustpendingwalletmanager(pointer, $0) }
    }

    

    
open func bip39Words() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_bip_39_words(self.uniffiClonePointer(),$0
    )
})
}
    
open func bip39WordsGrouped() -> [[GroupedWord]]  {
    return try!  FfiConverterSequenceSequenceTypeGroupedWord.lift(try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_bip_39_words_grouped(self.uniffiClonePointer(),$0
    )
})
}
    
open func cardIndexes() -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_card_indexes(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Action from the frontend to change the state of the view model
     */
open func dispatch(action: PendingWalletManagerAction)  {try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_dispatch(self.uniffiClonePointer(),
        FfiConverterTypePendingWalletManagerAction_lower(action),$0
    )
}
}
    
open func getState() -> PendingWalletManagerState  {
    return try!  FfiConverterTypePendingWalletManagerState_lift(try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_get_state(self.uniffiClonePointer(),$0
    )
})
}
    
open func listenForUpdates(reconciler: PendingWalletManagerReconciler)  {try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_listen_for_updates(self.uniffiClonePointer(),
        FfiConverterCallbackInterfacePendingWalletManagerReconciler_lower(reconciler),$0
    )
}
}
    
open func numberOfWordsCount() -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_cove_fn_method_rustpendingwalletmanager_number_of_words_count(self.uniffiClonePointer(),$0
    )
})
}
    
open func saveWallet()throws  -> WalletMetadata  {
    return try  FfiConverterTypeWalletMetadata_lift(try rustCallWithError(FfiConverterTypePendingWalletManagerError_lift) {
    uniffi_cove_fn_method_rustpendingwalletmanager_save_wallet(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRustPendingWalletManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RustPendingWalletManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RustPendingWalletManager {
        return RustPendingWalletManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RustPendingWalletManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RustPendingWalletManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RustPendingWalletManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustPendingWalletManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> RustPendingWalletManager {
    return try FfiConverterTypeRustPendingWalletManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustPendingWalletManager_lower(_ value: RustPendingWalletManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRustPendingWalletManager.lower(value)
}






public protocol RustWalletManagerProtocol: AnyObject, Sendable {
    
    /**
     * Get address at the given index
     */
    func addressAt(index: UInt32) async throws  -> AddressInfo
    
    func amountInFiat(amount: Amount) async throws  -> Double
    
    func balance() async  -> Balance
    
    func balanceInFiat() async throws  -> Double
    
    func broadcastTransaction(signedTransaction: BitcoinTransaction) async throws 
    
    func buildDrainTransaction(address: Address, fee: FeeRate) async throws  -> Psbt
    
    func buildTransaction(amount: Amount, address: Address) async throws  -> Psbt
    
    func buildTransactionWithFeeRate(amount: Amount, address: Address, feeRate: FeeRate) async throws  -> Psbt
    
    func confirmTxn(amount: Amount, address: Address, feeRate: FeeRate) async throws  -> ConfirmDetails
    
    func convertAndDisplayFiat(amount: Amount, prices: PriceResponse, withSuffix: Bool)  -> String
    
    func convertFromFiatString(fiatAmount: String, prices: PriceResponse)  -> Amount
    
    func convertToFiat(amount: Amount, prices: PriceResponse)  -> Double
    
    func createTransactionsWithFiatExport() async throws  -> String
    
    func currentBlockHeight() async throws  -> UInt32
    
    func deleteUnsignedTransaction(txId: TxId) throws 
    
    func deleteWallet() throws 
    
    /**
     * Action from the frontend to change the state of the view model
     */
    func dispatch(action: WalletManagerAction) 
    
    func displayAmount(amount: Amount)  -> String
    
    func displayFiatAmount(amount: Double, withSuffix: Bool)  -> String
    
    func displaySentAndReceivedAmount(sentAndReceived: SentAndReceived)  -> String
    
    func feeRateOptions() async throws  -> FeeRateOptions
    
    func feeRateOptionsWithTotalFee(feeRateOptions: FeeRateOptions?, amount: Amount, address: Address) async throws  -> FeeRateOptionsWithTotalFee
    
    func feeRateOptionsWithTotalFeeForDrain(feeRateOptions: FeeRateOptionsWithTotalFee, address: Address) async throws  -> FeeRateOptionsWithTotalFee
    
    func fees()  -> FeeResponse?
    
    /**
     * Finalize a signed PSBT
     */
    func finalizePsbt(psbt: Psbt) async throws  -> BitcoinTransaction
    
    func forceUpdateHeight() async throws  -> UInt32
    
    func forceWalletScan() async 
    
    func getFeeOptions() async throws  -> FeeRateOptions
    
    /**
     * gets the transactions for the wallet that are currently available
     */
    func getTransactions() async 
    
    func getUnsignedTransactions() throws  -> [UnsignedTransaction]
    
    func labelManager()  -> LabelManager
    
    func listenForUpdates(reconciler: WalletManagerReconciler) 
    
    func markWalletAsVerified() throws 
    
    func masterFingerprint()  -> String?
    
    /**
     * Get the next address for the wallet
     */
    func nextAddress() async throws  -> AddressInfo
    
    func numberOfConfirmations(blockHeight: UInt32) async throws  -> UInt32
    
    func numberOfConfirmationsFmt(blockHeight: UInt32) async throws  -> String
    
    func saveUnsignedTransaction(details: ConfirmDetails) throws 
    
    func selectedFiatCurrency()  -> FiatCurrency
    
    func sentAndReceivedFiat(sentAndReceived: SentAndReceived) async throws  -> Double
    
    func setWalletMetadata(metadata: WalletMetadata) 
    
    func signAndBroadcastTransaction(psbt: Psbt) async throws 
    
    func splitTransactionOutputs(outputs: [AddressAndAmount]) async throws  -> SplitOutput
    
    func startWalletScan() async throws 
    
    func switchToDifferentWalletAddressType(walletAddressType: WalletAddressType) async throws 
    
    func transactionDetails(txId: TxId) async throws  -> TransactionDetails
    
    func validateMetadata() 
    
    func walletMetadata()  -> WalletMetadata
    
    func wordValidator() throws  -> WordValidator
    
}
open class RustWalletManager: RustWalletManagerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_rustwalletmanager(self.pointer, $0) }
    }
public convenience init(id: WalletId)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_constructor_rustwalletmanager_new(
        FfiConverterTypeWalletId_lower(id),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_rustwalletmanager(pointer, $0) }
    }

    
public static func previewNewWallet() -> RustWalletManager  {
    return try!  FfiConverterTypeRustWalletManager_lift(try! rustCall() {
    uniffi_cove_fn_constructor_rustwalletmanager_preview_new_wallet($0
    )
})
}
    
public static func previewNewWalletWithMetadata(metadata: WalletMetadata) -> RustWalletManager  {
    return try!  FfiConverterTypeRustWalletManager_lift(try! rustCall() {
    uniffi_cove_fn_constructor_rustwalletmanager_preview_new_wallet_with_metadata(
        FfiConverterTypeWalletMetadata_lower(metadata),$0
    )
})
}
    
public static func tryNewFromTapSigner(tapSigner: TapSigner, deriveInfo: DeriveInfo, backup: Data? = nil)throws  -> RustWalletManager  {
    return try  FfiConverterTypeRustWalletManager_lift(try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_constructor_rustwalletmanager_try_new_from_tap_signer(
        FfiConverterTypeTapSigner_lower(tapSigner),
        FfiConverterTypeDeriveInfo_lower(deriveInfo),
        FfiConverterOptionData.lower(backup),$0
    )
})
}
    
public static func tryNewFromXpub(xpub: String)throws  -> RustWalletManager  {
    return try  FfiConverterTypeRustWalletManager_lift(try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_constructor_rustwalletmanager_try_new_from_xpub(
        FfiConverterString.lower(xpub),$0
    )
})
}
    

    
    /**
     * Get address at the given index
     */
open func addressAt(index: UInt32)async throws  -> AddressInfo  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_address_at(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(index)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeAddressInfo_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func amountInFiat(amount: Amount)async throws  -> Double  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_amount_in_fiat(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_f64,
            completeFunc: ffi_cove_rust_future_complete_f64,
            freeFunc: ffi_cove_rust_future_free_f64,
            liftFunc: FfiConverterDouble.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func balance()async  -> Balance  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeBalance_lift,
            errorHandler: nil
            
        )
}
    
open func balanceInFiat()async throws  -> Double  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_balance_in_fiat(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_f64,
            completeFunc: ffi_cove_rust_future_complete_f64,
            freeFunc: ffi_cove_rust_future_free_f64,
            liftFunc: FfiConverterDouble.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func broadcastTransaction(signedTransaction: BitcoinTransaction)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_broadcast_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeBitcoinTransaction_lower(signedTransaction)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func buildDrainTransaction(address: Address, fee: FeeRate)async throws  -> Psbt  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_build_drain_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAddress_lower(address),FfiConverterTypeFeeRate_lower(fee)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypePsbt_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func buildTransaction(amount: Amount, address: Address)async throws  -> Psbt  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_build_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount),FfiConverterTypeAddress_lower(address)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypePsbt_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func buildTransactionWithFeeRate(amount: Amount, address: Address, feeRate: FeeRate)async throws  -> Psbt  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_build_transaction_with_fee_rate(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount),FfiConverterTypeAddress_lower(address),FfiConverterTypeFeeRate_lower(feeRate)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypePsbt_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func confirmTxn(amount: Amount, address: Address, feeRate: FeeRate)async throws  -> ConfirmDetails  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_confirm_txn(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAmount_lower(amount),FfiConverterTypeAddress_lower(address),FfiConverterTypeFeeRate_lower(feeRate)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeConfirmDetails_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func convertAndDisplayFiat(amount: Amount, prices: PriceResponse, withSuffix: Bool = true) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_convert_and_display_fiat(self.uniffiClonePointer(),
        FfiConverterTypeAmount_lower(amount),
        FfiConverterTypePriceResponse_lower(prices),
        FfiConverterBool.lower(withSuffix),$0
    )
})
}
    
open func convertFromFiatString(fiatAmount: String, prices: PriceResponse) -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_convert_from_fiat_string(self.uniffiClonePointer(),
        FfiConverterString.lower(fiatAmount),
        FfiConverterTypePriceResponse_lower(prices),$0
    )
})
}
    
open func convertToFiat(amount: Amount, prices: PriceResponse) -> Double  {
    return try!  FfiConverterDouble.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_convert_to_fiat(self.uniffiClonePointer(),
        FfiConverterTypeAmount_lower(amount),
        FfiConverterTypePriceResponse_lower(prices),$0
    )
})
}
    
open func createTransactionsWithFiatExport()async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_create_transactions_with_fiat_export(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func currentBlockHeight()async throws  -> UInt32  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_current_block_height(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_u32,
            completeFunc: ffi_cove_rust_future_complete_u32,
            freeFunc: ffi_cove_rust_future_free_u32,
            liftFunc: FfiConverterUInt32.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func deleteUnsignedTransaction(txId: TxId)throws   {try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_delete_unsigned_transaction(self.uniffiClonePointer(),
        FfiConverterTypeTxId_lower(txId),$0
    )
}
}
    
open func deleteWallet()throws   {try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_delete_wallet(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Action from the frontend to change the state of the view model
     */
open func dispatch(action: WalletManagerAction)  {try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_dispatch(self.uniffiClonePointer(),
        FfiConverterTypeWalletManagerAction_lower(action),$0
    )
}
}
    
open func displayAmount(amount: Amount) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_display_amount(self.uniffiClonePointer(),
        FfiConverterTypeAmount_lower(amount),$0
    )
})
}
    
open func displayFiatAmount(amount: Double, withSuffix: Bool = true) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_display_fiat_amount(self.uniffiClonePointer(),
        FfiConverterDouble.lower(amount),
        FfiConverterBool.lower(withSuffix),$0
    )
})
}
    
open func displaySentAndReceivedAmount(sentAndReceived: SentAndReceived) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_display_sent_and_received_amount(self.uniffiClonePointer(),
        FfiConverterTypeSentAndReceived_lower(sentAndReceived),$0
    )
})
}
    
open func feeRateOptions()async throws  -> FeeRateOptions  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_fee_rate_options(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeFeeRateOptions_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func feeRateOptionsWithTotalFee(feeRateOptions: FeeRateOptions?, amount: Amount, address: Address)async throws  -> FeeRateOptionsWithTotalFee  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_fee_rate_options_with_total_fee(
                    self.uniffiClonePointer(),
                    FfiConverterOptionTypeFeeRateOptions.lower(feeRateOptions),FfiConverterTypeAmount_lower(amount),FfiConverterTypeAddress_lower(address)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeFeeRateOptionsWithTotalFee_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func feeRateOptionsWithTotalFeeForDrain(feeRateOptions: FeeRateOptionsWithTotalFee, address: Address)async throws  -> FeeRateOptionsWithTotalFee  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_fee_rate_options_with_total_fee_for_drain(
                    self.uniffiClonePointer(),
                    FfiConverterTypeFeeRateOptionsWithTotalFee_lower(feeRateOptions),FfiConverterTypeAddress_lower(address)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeFeeRateOptionsWithTotalFee_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func fees() -> FeeResponse?  {
    return try!  FfiConverterOptionTypeFeeResponse.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_fees(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Finalize a signed PSBT
     */
open func finalizePsbt(psbt: Psbt)async throws  -> BitcoinTransaction  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_finalize_psbt(
                    self.uniffiClonePointer(),
                    FfiConverterTypePsbt_lower(psbt)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeBitcoinTransaction_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func forceUpdateHeight()async throws  -> UInt32  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_force_update_height(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_u32,
            completeFunc: ffi_cove_rust_future_complete_u32,
            freeFunc: ffi_cove_rust_future_free_u32,
            liftFunc: FfiConverterUInt32.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func forceWalletScan()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_force_wallet_scan(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func getFeeOptions()async throws  -> FeeRateOptions  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_get_fee_options(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeFeeRateOptions_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
    /**
     * gets the transactions for the wallet that are currently available
     */
open func getTransactions()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_get_transactions(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
open func getUnsignedTransactions()throws  -> [UnsignedTransaction]  {
    return try  FfiConverterSequenceTypeUnsignedTransaction.lift(try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_get_unsigned_transactions(self.uniffiClonePointer(),$0
    )
})
}
    
open func labelManager() -> LabelManager  {
    return try!  FfiConverterTypeLabelManager_lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_label_manager(self.uniffiClonePointer(),$0
    )
})
}
    
open func listenForUpdates(reconciler: WalletManagerReconciler)  {try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_listen_for_updates(self.uniffiClonePointer(),
        FfiConverterCallbackInterfaceWalletManagerReconciler_lower(reconciler),$0
    )
}
}
    
open func markWalletAsVerified()throws   {try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_mark_wallet_as_verified(self.uniffiClonePointer(),$0
    )
}
}
    
open func masterFingerprint() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_master_fingerprint(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the next address for the wallet
     */
open func nextAddress()async throws  -> AddressInfo  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_next_address(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeAddressInfo_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func numberOfConfirmations(blockHeight: UInt32)async throws  -> UInt32  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_number_of_confirmations(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(blockHeight)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_u32,
            completeFunc: ffi_cove_rust_future_complete_u32,
            freeFunc: ffi_cove_rust_future_free_u32,
            liftFunc: FfiConverterUInt32.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func numberOfConfirmationsFmt(blockHeight: UInt32)async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_number_of_confirmations_fmt(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(blockHeight)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func saveUnsignedTransaction(details: ConfirmDetails)throws   {try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_save_unsigned_transaction(self.uniffiClonePointer(),
        FfiConverterTypeConfirmDetails_lower(details),$0
    )
}
}
    
open func selectedFiatCurrency() -> FiatCurrency  {
    return try!  FfiConverterTypeFiatCurrency_lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_selected_fiat_currency(self.uniffiClonePointer(),$0
    )
})
}
    
open func sentAndReceivedFiat(sentAndReceived: SentAndReceived)async throws  -> Double  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_sent_and_received_fiat(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSentAndReceived_lower(sentAndReceived)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_f64,
            completeFunc: ffi_cove_rust_future_complete_f64,
            freeFunc: ffi_cove_rust_future_free_f64,
            liftFunc: FfiConverterDouble.lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func setWalletMetadata(metadata: WalletMetadata)  {try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_set_wallet_metadata(self.uniffiClonePointer(),
        FfiConverterTypeWalletMetadata_lower(metadata),$0
    )
}
}
    
open func signAndBroadcastTransaction(psbt: Psbt)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_sign_and_broadcast_transaction(
                    self.uniffiClonePointer(),
                    FfiConverterTypePsbt_lower(psbt)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func splitTransactionOutputs(outputs: [AddressAndAmount])async throws  -> SplitOutput  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_split_transaction_outputs(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeAddressAndAmount.lower(outputs)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSplitOutput_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func startWalletScan()async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_start_wallet_scan(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func switchToDifferentWalletAddressType(walletAddressType: WalletAddressType)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_switch_to_different_wallet_address_type(
                    self.uniffiClonePointer(),
                    FfiConverterTypeWalletAddressType_lower(walletAddressType)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func transactionDetails(txId: TxId)async throws  -> TransactionDetails  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_rustwalletmanager_transaction_details(
                    self.uniffiClonePointer(),
                    FfiConverterTypeTxId_lower(txId)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeTransactionDetails_lift,
            errorHandler: FfiConverterTypeWalletManagerError_lift
        )
}
    
open func validateMetadata()  {try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_validate_metadata(self.uniffiClonePointer(),$0
    )
}
}
    
open func walletMetadata() -> WalletMetadata  {
    return try!  FfiConverterTypeWalletMetadata_lift(try! rustCall() {
    uniffi_cove_fn_method_rustwalletmanager_wallet_metadata(self.uniffiClonePointer(),$0
    )
})
}
    
open func wordValidator()throws  -> WordValidator  {
    return try  FfiConverterTypeWordValidator_lift(try rustCallWithError(FfiConverterTypeWalletManagerError_lift) {
    uniffi_cove_fn_method_rustwalletmanager_word_validator(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRustWalletManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RustWalletManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RustWalletManager {
        return RustWalletManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RustWalletManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RustWalletManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RustWalletManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustWalletManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> RustWalletManager {
    return try FfiConverterTypeRustWalletManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRustWalletManager_lower(_ value: RustWalletManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRustWalletManager.lower(value)
}






public protocol SeedQrProtocol: AnyObject, Sendable {
    
    func getWords()  -> [String]
    
    func groupedPlainWords()  -> [[String]]
    
}
open class SeedQr: SeedQrProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_seedqr(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_seedqr(pointer, $0) }
    }

    
public static func newFromData(data: Data)throws  -> SeedQr  {
    return try  FfiConverterTypeSeedQr_lift(try rustCallWithError(FfiConverterTypeSeedQrError_lift) {
    uniffi_cove_fn_constructor_seedqr_new_from_data(
        FfiConverterData.lower(data),$0
    )
})
}
    
public static func newFromStr(qr: String)throws  -> SeedQr  {
    return try  FfiConverterTypeSeedQr_lift(try rustCallWithError(FfiConverterTypeSeedQrError_lift) {
    uniffi_cove_fn_constructor_seedqr_new_from_str(
        FfiConverterString.lower(qr),$0
    )
})
}
    

    
open func getWords() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_seedqr_get_words(self.uniffiClonePointer(),$0
    )
})
}
    
open func groupedPlainWords() -> [[String]]  {
    return try!  FfiConverterSequenceSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_seedqr_grouped_plain_words(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSeedQr: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SeedQr

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SeedQr {
        return SeedQr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SeedQr) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SeedQr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SeedQr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSeedQr_lift(_ pointer: UnsafeMutableRawPointer) throws -> SeedQr {
    return try FfiConverterTypeSeedQr.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSeedQr_lower(_ value: SeedQr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSeedQr.lower(value)
}






/**
 * Handles the logic for what happens when the fiat amount onChange is called
 */
public protocol SendFlowFiatOnChangeHandlerProtocol: AnyObject, Sendable {
    
    func onChange(oldValue: String, newValue: String) throws  -> SendFlowFiatOnChangeResult
    
}
/**
 * Handles the logic for what happens when the fiat amount onChange is called
 */
open class SendFlowFiatOnChangeHandler: SendFlowFiatOnChangeHandlerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_sendflowfiatonchangehandler(self.pointer, $0) }
    }
public convenience init(prices: PriceResponse, selectedCurrency: FiatCurrency) {
    let pointer =
        try! rustCall() {
    uniffi_cove_fn_constructor_sendflowfiatonchangehandler_new(
        FfiConverterTypePriceResponse_lower(prices),
        FfiConverterTypeFiatCurrency_lower(selectedCurrency),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_sendflowfiatonchangehandler(pointer, $0) }
    }

    

    
open func onChange(oldValue: String, newValue: String)throws  -> SendFlowFiatOnChangeResult  {
    return try  FfiConverterTypeSendFlowFiatOnChangeResult_lift(try rustCallWithError(FfiConverterTypeSendFlowFiatOnChangeError_lift) {
    uniffi_cove_fn_method_sendflowfiatonchangehandler_on_change(self.uniffiClonePointer(),
        FfiConverterString.lower(oldValue),
        FfiConverterString.lower(newValue),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendFlowFiatOnChangeHandler: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SendFlowFiatOnChangeHandler

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SendFlowFiatOnChangeHandler {
        return SendFlowFiatOnChangeHandler(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SendFlowFiatOnChangeHandler) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendFlowFiatOnChangeHandler {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SendFlowFiatOnChangeHandler, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeHandler_lift(_ pointer: UnsafeMutableRawPointer) throws -> SendFlowFiatOnChangeHandler {
    return try FfiConverterTypeSendFlowFiatOnChangeHandler.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeHandler_lower(_ value: SendFlowFiatOnChangeHandler) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSendFlowFiatOnChangeHandler.lower(value)
}






public protocol SetupCmdProtocol: AnyObject, Sendable {
    
}
open class SetupCmd: SetupCmdProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_setupcmd(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_setupcmd(pointer, $0) }
    }

    
public static func tryNew(factoryPin: String, newPin: String, chainCode: Data? = nil)throws  -> SetupCmd  {
    return try  FfiConverterTypeSetupCmd_lift(try rustCallWithError(FfiConverterTypeTapSignerReaderError_lift) {
    uniffi_cove_fn_constructor_setupcmd_try_new(
        FfiConverterString.lower(factoryPin),
        FfiConverterString.lower(newPin),
        FfiConverterOptionData.lower(chainCode),$0
    )
})
}
    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSetupCmd: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SetupCmd

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SetupCmd {
        return SetupCmd(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SetupCmd) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SetupCmd {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SetupCmd, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSetupCmd_lift(_ pointer: UnsafeMutableRawPointer) throws -> SetupCmd {
    return try FfiConverterTypeSetupCmd.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSetupCmd_lower(_ value: SetupCmd) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSetupCmd.lower(value)
}






public protocol TapSignerReaderProtocol: AnyObject, Sendable {
    
    /**
     * User started the setup process, but errored out before completing the setup, we can continue from the last step
     */
    func continueSetup(response: SetupCmdResponse) async throws  -> SetupCmdResponse
    
    /**
     * Get the last response from the reader
     */
    func lastResponse()  -> TapSignerResponse?
    
    func run() async throws  -> TapSignerResponse
    
    /**
     * Start the setup process
     */
    func setup(cmd: SetupCmd) async throws  -> SetupCmdResponse
    
    func sign(psbt: Psbt, pin: String) async throws  -> Psbt
    
}
open class TapSignerReader: TapSignerReaderProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_tapsignerreader(self.pointer, $0) }
    }
public convenience init(transport: TapcardTransportProtocol, cmd: TapSignerCmd? = nil)async throws  {
    let pointer =
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_constructor_tapsignerreader_new(FfiConverterCallbackInterfaceTapcardTransportProtocol_lower(transport),FfiConverterOptionTypeTapSignerCmd.lower(cmd)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypeTapSignerReader_lift,
            errorHandler: FfiConverterTypeTapSignerReaderError_lift
        )
        
        .uniffiClonePointer()
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_tapsignerreader(pointer, $0) }
    }

    

    
    /**
     * User started the setup process, but errored out before completing the setup, we can continue from the last step
     */
open func continueSetup(response: SetupCmdResponse)async throws  -> SetupCmdResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_tapsignerreader_continue_setup(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSetupCmdResponse_lower(response)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSetupCmdResponse_lift,
            errorHandler: FfiConverterTypeTapSignerReaderError_lift
        )
}
    
    /**
     * Get the last response from the reader
     */
open func lastResponse() -> TapSignerResponse?  {
    return try!  FfiConverterOptionTypeTapSignerResponse.lift(try! rustCall() {
    uniffi_cove_fn_method_tapsignerreader_last_response(self.uniffiClonePointer(),$0
    )
})
}
    
open func run()async throws  -> TapSignerResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_tapsignerreader_run(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeTapSignerResponse_lift,
            errorHandler: FfiConverterTypeTapSignerReaderError_lift
        )
}
    
    /**
     * Start the setup process
     */
open func setup(cmd: SetupCmd)async throws  -> SetupCmdResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_tapsignerreader_setup(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSetupCmd_lower(cmd)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSetupCmdResponse_lift,
            errorHandler: FfiConverterTypeTapSignerReaderError_lift
        )
}
    
open func sign(psbt: Psbt, pin: String)async throws  -> Psbt  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_tapsignerreader_sign(
                    self.uniffiClonePointer(),
                    FfiConverterTypePsbt_lower(psbt),FfiConverterString.lower(pin)
                )
            },
            pollFunc: ffi_cove_rust_future_poll_pointer,
            completeFunc: ffi_cove_rust_future_complete_pointer,
            freeFunc: ffi_cove_rust_future_free_pointer,
            liftFunc: FfiConverterTypePsbt_lift,
            errorHandler: FfiConverterTypeTapSignerReaderError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerReader: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TapSignerReader

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TapSignerReader {
        return TapSignerReader(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TapSignerReader) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerReader {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TapSignerReader, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerReader_lift(_ pointer: UnsafeMutableRawPointer) throws -> TapSignerReader {
    return try FfiConverterTypeTapSignerReader.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerReader_lower(_ value: TapSignerReader) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTapSignerReader.lower(value)
}






public protocol TransactionDetailsProtocol: AnyObject, Sendable {
    
    func address()  -> Address
    
    func addressSpacedOut()  -> String
    
    func amount()  -> Amount
    
    func amountFiat() async throws  -> Double
    
    func amountFiatFmt() async throws  -> String
    
    func amountFmt(unit: Unit)  -> String
    
    func blockNumber()  -> UInt32?
    
    func blockNumberFmt()  -> String?
    
    func confirmationDateTime()  -> String?
    
    func feeFiatFmt() async throws  -> String
    
    func feeFmt(unit: Unit)  -> String?
    
    func isConfirmed()  -> Bool
    
    func isReceived()  -> Bool
    
    func isSent()  -> Bool
    
    func sentSansFeeFiatFmt() async throws  -> String
    
    func sentSansFeeFmt(unit: Unit)  -> String?
    
    func transactionLabel()  -> String?
    
    func transactionUrl()  -> String
    
    func txId()  -> TxId
    
}
open class TransactionDetails: TransactionDetailsProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_transactiondetails(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_transactiondetails(pointer, $0) }
    }

    
public static func previewConfirmedReceived() -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_confirmed_received($0
    )
})
}
    
public static func previewConfirmedSent() -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_confirmed_sent($0
    )
})
}
    
public static func previewNewConfirmed() -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_new_confirmed($0
    )
})
}
    
public static func previewNewWithLabel(label: String = "bike payment") -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_new_with_label(
        FfiConverterString.lower(label),$0
    )
})
}
    
public static func previewPendingReceived() -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_pending_received($0
    )
})
}
    
public static func previewPendingSent() -> TransactionDetails  {
    return try!  FfiConverterTypeTransactionDetails_lift(try! rustCall() {
    uniffi_cove_fn_constructor_transactiondetails_preview_pending_sent($0
    )
})
}
    

    
open func address() -> Address  {
    return try!  FfiConverterTypeAddress_lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_address(self.uniffiClonePointer(),$0
    )
})
}
    
open func addressSpacedOut() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_address_spaced_out(self.uniffiClonePointer(),$0
    )
})
}
    
open func amount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_amount(self.uniffiClonePointer(),$0
    )
})
}
    
open func amountFiat()async throws  -> Double  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_transactiondetails_amount_fiat(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_f64,
            completeFunc: ffi_cove_rust_future_complete_f64,
            freeFunc: ffi_cove_rust_future_free_f64,
            liftFunc: FfiConverterDouble.lift,
            errorHandler: FfiConverterTypeTransactionDetailError_lift
        )
}
    
open func amountFiatFmt()async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_transactiondetails_amount_fiat_fmt(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeTransactionDetailError_lift
        )
}
    
open func amountFmt(unit: Unit) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_amount_fmt(self.uniffiClonePointer(),
        FfiConverterTypeUnit_lower(unit),$0
    )
})
}
    
open func blockNumber() -> UInt32?  {
    return try!  FfiConverterOptionUInt32.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_block_number(self.uniffiClonePointer(),$0
    )
})
}
    
open func blockNumberFmt() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_block_number_fmt(self.uniffiClonePointer(),$0
    )
})
}
    
open func confirmationDateTime() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_confirmation_date_time(self.uniffiClonePointer(),$0
    )
})
}
    
open func feeFiatFmt()async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_transactiondetails_fee_fiat_fmt(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeTransactionDetailError_lift
        )
}
    
open func feeFmt(unit: Unit) -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_fee_fmt(self.uniffiClonePointer(),
        FfiConverterTypeUnit_lower(unit),$0
    )
})
}
    
open func isConfirmed() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_is_confirmed(self.uniffiClonePointer(),$0
    )
})
}
    
open func isReceived() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_is_received(self.uniffiClonePointer(),$0
    )
})
}
    
open func isSent() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_is_sent(self.uniffiClonePointer(),$0
    )
})
}
    
open func sentSansFeeFiatFmt()async throws  -> String  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_method_transactiondetails_sent_sans_fee_fiat_fmt(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_cove_rust_future_poll_rust_buffer,
            completeFunc: ffi_cove_rust_future_complete_rust_buffer,
            freeFunc: ffi_cove_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeTransactionDetailError_lift
        )
}
    
open func sentSansFeeFmt(unit: Unit) -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_sent_sans_fee_fmt(self.uniffiClonePointer(),
        FfiConverterTypeUnit_lower(unit),$0
    )
})
}
    
open func transactionLabel() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_transaction_label(self.uniffiClonePointer(),$0
    )
})
}
    
open func transactionUrl() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_transaction_url(self.uniffiClonePointer(),$0
    )
})
}
    
open func txId() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_transactiondetails_tx_id(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionDetails: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TransactionDetails

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TransactionDetails {
        return TransactionDetails(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TransactionDetails) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionDetails {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TransactionDetails, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDetails_lift(_ pointer: UnsafeMutableRawPointer) throws -> TransactionDetails {
    return try FfiConverterTypeTransactionDetails.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDetails_lower(_ value: TransactionDetails) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTransactionDetails.lower(value)
}






public protocol UnconfirmedTransactionProtocol: AnyObject, Sendable {
    
    func fiatAmount()  -> FiatAmount?
    
    func id()  -> TxId
    
    func label()  -> String
    
    func lastSeen()  -> UInt64
    
    func sentAndReceived()  -> SentAndReceived
    
}
open class UnconfirmedTransaction: UnconfirmedTransactionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_unconfirmedtransaction(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_unconfirmedtransaction(pointer, $0) }
    }

    

    
open func fiatAmount() -> FiatAmount?  {
    return try!  FfiConverterOptionTypeFiatAmount.lift(try! rustCall() {
    uniffi_cove_fn_method_unconfirmedtransaction_fiat_amount(self.uniffiClonePointer(),$0
    )
})
}
    
open func id() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_unconfirmedtransaction_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func label() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_unconfirmedtransaction_label(self.uniffiClonePointer(),$0
    )
})
}
    
open func lastSeen() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_unconfirmedtransaction_last_seen(self.uniffiClonePointer(),$0
    )
})
}
    
open func sentAndReceived() -> SentAndReceived  {
    return try!  FfiConverterTypeSentAndReceived_lift(try! rustCall() {
    uniffi_cove_fn_method_unconfirmedtransaction_sent_and_received(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnconfirmedTransaction: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnconfirmedTransaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnconfirmedTransaction {
        return UnconfirmedTransaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UnconfirmedTransaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnconfirmedTransaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UnconfirmedTransaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnconfirmedTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> UnconfirmedTransaction {
    return try FfiConverterTypeUnconfirmedTransaction.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnconfirmedTransaction_lower(_ value: UnconfirmedTransaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnconfirmedTransaction.lower(value)
}






public protocol UnsignedTransactionProtocol: AnyObject, Sendable {
    
    func details()  -> ConfirmDetails
    
    func id()  -> TxId
    
    func label()  -> String
    
    func sendingAmount()  -> Amount
    
    func spendingAmount()  -> Amount
    
}
open class UnsignedTransaction: UnsignedTransactionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_unsignedtransaction(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_unsignedtransaction(pointer, $0) }
    }

    
public static func previewNew() -> UnsignedTransaction  {
    return try!  FfiConverterTypeUnsignedTransaction_lift(try! rustCall() {
    uniffi_cove_fn_constructor_unsignedtransaction_preview_new($0
    )
})
}
    

    
open func details() -> ConfirmDetails  {
    return try!  FfiConverterTypeConfirmDetails_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransaction_details(self.uniffiClonePointer(),$0
    )
})
}
    
open func id() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransaction_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func label() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransaction_label(self.uniffiClonePointer(),$0
    )
})
}
    
open func sendingAmount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransaction_sending_amount(self.uniffiClonePointer(),$0
    )
})
}
    
open func spendingAmount() -> Amount  {
    return try!  FfiConverterTypeAmount_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransaction_spending_amount(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnsignedTransaction: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnsignedTransaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransaction {
        return UnsignedTransaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UnsignedTransaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnsignedTransaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UnsignedTransaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransaction {
    return try FfiConverterTypeUnsignedTransaction.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransaction_lower(_ value: UnsignedTransaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnsignedTransaction.lower(value)
}






public protocol UnsignedTransactionRecordProtocol: AnyObject, Sendable {
    
    func confirmDetails()  -> ConfirmDetails
    
    func createdAt()  -> UInt64
    
    func txId()  -> TxId
    
    func walletId()  -> WalletId
    
}
open class UnsignedTransactionRecord: UnsignedTransactionRecordProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_unsignedtransactionrecord(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_unsignedtransactionrecord(pointer, $0) }
    }

    

    
open func confirmDetails() -> ConfirmDetails  {
    return try!  FfiConverterTypeConfirmDetails_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransactionrecord_confirm_details(self.uniffiClonePointer(),$0
    )
})
}
    
open func createdAt() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransactionrecord_created_at(self.uniffiClonePointer(),$0
    )
})
}
    
open func txId() -> TxId  {
    return try!  FfiConverterTypeTxId_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransactionrecord_tx_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func walletId() -> WalletId  {
    return try!  FfiConverterTypeWalletId_lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransactionrecord_wallet_id(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnsignedTransactionRecord: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnsignedTransactionRecord

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransactionRecord {
        return UnsignedTransactionRecord(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UnsignedTransactionRecord) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnsignedTransactionRecord {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UnsignedTransactionRecord, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionRecord_lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransactionRecord {
    return try FfiConverterTypeUnsignedTransactionRecord.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionRecord_lower(_ value: UnsignedTransactionRecord) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnsignedTransactionRecord.lower(value)
}






public protocol UnsignedTransactionsTableProtocol: AnyObject, Sendable {
    
    func getTx(txId: TxId)  -> UnsignedTransactionRecord?
    
    func getTxThrow(txId: TxId) throws  -> UnsignedTransactionRecord
    
}
open class UnsignedTransactionsTable: UnsignedTransactionsTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_unsignedtransactionstable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_unsignedtransactionstable(pointer, $0) }
    }

    

    
open func getTx(txId: TxId) -> UnsignedTransactionRecord?  {
    return try!  FfiConverterOptionTypeUnsignedTransactionRecord.lift(try! rustCall() {
    uniffi_cove_fn_method_unsignedtransactionstable_gettx(self.uniffiClonePointer(),
        FfiConverterTypeTxId_lower(txId),$0
    )
})
}
    
open func getTxThrow(txId: TxId)throws  -> UnsignedTransactionRecord  {
    return try  FfiConverterTypeUnsignedTransactionRecord_lift(try rustCallWithError(FfiConverterTypeUnsignedTransactionsTableError_lift) {
    uniffi_cove_fn_method_unsignedtransactionstable_gettxthrow(self.uniffiClonePointer(),
        FfiConverterTypeTxId_lower(txId),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnsignedTransactionsTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnsignedTransactionsTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransactionsTable {
        return UnsignedTransactionsTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UnsignedTransactionsTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnsignedTransactionsTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UnsignedTransactionsTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionsTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedTransactionsTable {
    return try FfiConverterTypeUnsignedTransactionsTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionsTable_lower(_ value: UnsignedTransactionsTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnsignedTransactionsTable.lower(value)
}






public protocol WalletProtocol: AnyObject, Sendable {
    
    func id()  -> WalletId
    
}
open class Wallet: WalletProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_wallet(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_wallet(pointer, $0) }
    }

    
public static func newFromExport(export: HardwareExport)throws  -> Wallet  {
    return try  FfiConverterTypeWallet_lift(try rustCallWithError(FfiConverterTypeWalletError_lift) {
    uniffi_cove_fn_constructor_wallet_new_from_export(
        FfiConverterTypeHardwareExport_lower(export),$0
    )
})
}
    
public static func newFromXpub(xpub: String)throws  -> Wallet  {
    return try  FfiConverterTypeWallet_lift(try rustCallWithError(FfiConverterTypeWalletError_lift) {
    uniffi_cove_fn_constructor_wallet_new_from_xpub(
        FfiConverterString.lower(xpub),$0
    )
})
}
    
public static func previewNewWallet() -> Wallet  {
    return try!  FfiConverterTypeWallet_lift(try! rustCall() {
    uniffi_cove_fn_constructor_wallet_previewnewwallet($0
    )
})
}
    

    
open func id() -> WalletId  {
    return try!  FfiConverterTypeWalletId_lift(try! rustCall() {
    uniffi_cove_fn_method_wallet_id(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}






public protocol WalletDataDbProtocol: AnyObject, Sendable {
    
}
open class WalletDataDb: WalletDataDbProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_walletdatadb(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_walletdatadb(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletDataDb: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletDataDb

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletDataDb {
        return WalletDataDb(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletDataDb) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletDataDb {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletDataDb, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataDb_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletDataDb {
    return try FfiConverterTypeWalletDataDb.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataDb_lower(_ value: WalletDataDb) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletDataDb.lower(value)
}






public protocol WalletKeyProtocol: AnyObject, Sendable {
    
}
open class WalletKey: WalletKeyProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_walletkey(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_walletkey(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletKey: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletKey {
        return WalletKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletKey {
    return try FfiConverterTypeWalletKey.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletKey_lower(_ value: WalletKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletKey.lower(value)
}






public protocol WalletsTableProtocol: AnyObject, Sendable {
    
    func all() throws  -> [WalletMetadata]
    
    func allSortedActive() throws  -> [WalletMetadata]
    
    func isEmpty() throws  -> Bool
    
    func len(network: Network, mode: WalletMode) throws  -> UInt16
    
}
open class WalletsTable: WalletsTableProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_walletstable(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_walletstable(pointer, $0) }
    }

    

    
open func all()throws  -> [WalletMetadata]  {
    return try  FfiConverterSequenceTypeWalletMetadata.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_walletstable_all(self.uniffiClonePointer(),$0
    )
})
}
    
open func allSortedActive()throws  -> [WalletMetadata]  {
    return try  FfiConverterSequenceTypeWalletMetadata.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_walletstable_all_sorted_active(self.uniffiClonePointer(),$0
    )
})
}
    
open func isEmpty()throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_walletstable_is_empty(self.uniffiClonePointer(),$0
    )
})
}
    
open func len(network: Network, mode: WalletMode)throws  -> UInt16  {
    return try  FfiConverterUInt16.lift(try rustCallWithError(FfiConverterTypeDatabaseError_lift) {
    uniffi_cove_fn_method_walletstable_len(self.uniffiClonePointer(),
        FfiConverterTypeNetwork_lower(network),
        FfiConverterTypeWalletMode_lower(mode),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletsTable: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WalletsTable

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletsTable {
        return WalletsTable(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WalletsTable) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletsTable {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WalletsTable, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletsTable_lift(_ pointer: UnsafeMutableRawPointer) throws -> WalletsTable {
    return try FfiConverterTypeWalletsTable.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletsTable_lower(_ value: WalletsTable) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWalletsTable.lower(value)
}






public protocol WordValidatorProtocol: AnyObject, Sendable {
    
    func isComplete(wordNumber: UInt8)  -> Bool
    
    func isWordCorrect(word: String, `for`: UInt8)  -> Bool
    
    func possibleWords(`for`: UInt8)  -> [String]
    
}
open class WordValidator: WordValidatorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_wordvalidator(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_wordvalidator(pointer, $0) }
    }

    
public static func preview(preview: Bool, numberOfWords: NumberOfBip39Words? = nil) -> WordValidator  {
    return try!  FfiConverterTypeWordValidator_lift(try! rustCall() {
    uniffi_cove_fn_constructor_wordvalidator_preview(
        FfiConverterBool.lower(preview),
        FfiConverterOptionTypeNumberOfBip39Words.lower(numberOfWords),$0
    )
})
}
    

    
open func isComplete(wordNumber: UInt8) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_wordvalidator_is_complete(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(wordNumber),$0
    )
})
}
    
open func isWordCorrect(word: String, `for`: UInt8) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_method_wordvalidator_is_word_correct(self.uniffiClonePointer(),
        FfiConverterString.lower(word),
        FfiConverterUInt8.lower(`for`),$0
    )
})
}
    
open func possibleWords(`for`: UInt8) -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_method_wordvalidator_possible_words(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(`for`),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWordValidator: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WordValidator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WordValidator {
        return WordValidator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WordValidator) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WordValidator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WordValidator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWordValidator_lift(_ pointer: UnsafeMutableRawPointer) throws -> WordValidator {
    return try FfiConverterTypeWordValidator.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWordValidator_lower(_ value: WordValidator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWordValidator.lower(value)
}




public struct AppState {
    public var router: Router

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(router: Router) {
        self.router = router
    }
}

#if compiler(>=6)
extension AppState: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAppState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppState {
        return
            try AppState(
                router: FfiConverterTypeRouter.read(from: &buf)
        )
    }

    public static func write(_ value: AppState, into buf: inout [UInt8]) {
        FfiConverterTypeRouter.write(value.router, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppState_lift(_ buf: RustBuffer) throws -> AppState {
    return try FfiConverterTypeAppState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppState_lower(_ value: AppState) -> RustBuffer {
    return FfiConverterTypeAppState.lower(value)
}


public struct AuthManagerState {

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {
    }
}

#if compiler(>=6)
extension AuthManagerState: Sendable {}
#endif


extension AuthManagerState: Equatable, Hashable {
    public static func ==(lhs: AuthManagerState, rhs: AuthManagerState) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthManagerState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthManagerState {
        return
            AuthManagerState()
    }

    public static func write(_ value: AuthManagerState, into buf: inout [UInt8]) {
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerState_lift(_ buf: RustBuffer) throws -> AuthManagerState {
    return try FfiConverterTypeAuthManagerState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerState_lower(_ value: AuthManagerState) -> RustBuffer {
    return FfiConverterTypeAuthManagerState.lower(value)
}


public struct ConfirmedDetails {
    public var blockNumber: UInt32
    public var confirmationTime: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(blockNumber: UInt32, confirmationTime: UInt64) {
        self.blockNumber = blockNumber
        self.confirmationTime = confirmationTime
    }
}

#if compiler(>=6)
extension ConfirmedDetails: Sendable {}
#endif


extension ConfirmedDetails: Equatable, Hashable {
    public static func ==(lhs: ConfirmedDetails, rhs: ConfirmedDetails) -> Bool {
        if lhs.blockNumber != rhs.blockNumber {
            return false
        }
        if lhs.confirmationTime != rhs.confirmationTime {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(blockNumber)
        hasher.combine(confirmationTime)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfirmedDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConfirmedDetails {
        return
            try ConfirmedDetails(
                blockNumber: FfiConverterUInt32.read(from: &buf), 
                confirmationTime: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: ConfirmedDetails, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.blockNumber, into: &buf)
        FfiConverterUInt64.write(value.confirmationTime, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfirmedDetails_lift(_ buf: RustBuffer) throws -> ConfirmedDetails {
    return try FfiConverterTypeConfirmedDetails.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfirmedDetails_lower(_ value: ConfirmedDetails) -> RustBuffer {
    return FfiConverterTypeConfirmedDetails.lower(value)
}


public struct ContinueFromBackup {
    public var backup: Data
    public var continueCmd: SetupCmd
    public var error: TapSignerReaderError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backup: Data, continueCmd: SetupCmd, error: TapSignerReaderError) {
        self.backup = backup
        self.continueCmd = continueCmd
        self.error = error
    }
}

#if compiler(>=6)
extension ContinueFromBackup: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContinueFromBackup: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContinueFromBackup {
        return
            try ContinueFromBackup(
                backup: FfiConverterData.read(from: &buf), 
                continueCmd: FfiConverterTypeSetupCmd.read(from: &buf), 
                error: FfiConverterTypeTapSignerReaderError.read(from: &buf)
        )
    }

    public static func write(_ value: ContinueFromBackup, into buf: inout [UInt8]) {
        FfiConverterData.write(value.backup, into: &buf)
        FfiConverterTypeSetupCmd.write(value.continueCmd, into: &buf)
        FfiConverterTypeTapSignerReaderError.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromBackup_lift(_ buf: RustBuffer) throws -> ContinueFromBackup {
    return try FfiConverterTypeContinueFromBackup.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromBackup_lower(_ value: ContinueFromBackup) -> RustBuffer {
    return FfiConverterTypeContinueFromBackup.lower(value)
}


public struct ContinueFromDerive {
    public var backup: Data
    public var deriveInfo: DeriveInfo
    public var continueCmd: SetupCmd
    public var error: TapSignerReaderError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backup: Data, deriveInfo: DeriveInfo, continueCmd: SetupCmd, error: TapSignerReaderError) {
        self.backup = backup
        self.deriveInfo = deriveInfo
        self.continueCmd = continueCmd
        self.error = error
    }
}

#if compiler(>=6)
extension ContinueFromDerive: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContinueFromDerive: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContinueFromDerive {
        return
            try ContinueFromDerive(
                backup: FfiConverterData.read(from: &buf), 
                deriveInfo: FfiConverterTypeDeriveInfo.read(from: &buf), 
                continueCmd: FfiConverterTypeSetupCmd.read(from: &buf), 
                error: FfiConverterTypeTapSignerReaderError.read(from: &buf)
        )
    }

    public static func write(_ value: ContinueFromDerive, into buf: inout [UInt8]) {
        FfiConverterData.write(value.backup, into: &buf)
        FfiConverterTypeDeriveInfo.write(value.deriveInfo, into: &buf)
        FfiConverterTypeSetupCmd.write(value.continueCmd, into: &buf)
        FfiConverterTypeTapSignerReaderError.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromDerive_lift(_ buf: RustBuffer) throws -> ContinueFromDerive {
    return try FfiConverterTypeContinueFromDerive.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromDerive_lower(_ value: ContinueFromDerive) -> RustBuffer {
    return FfiConverterTypeContinueFromDerive.lower(value)
}


public struct ContinueFromInit {
    public var continueCmd: SetupCmd
    public var error: TapSignerReaderError

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(continueCmd: SetupCmd, error: TapSignerReaderError) {
        self.continueCmd = continueCmd
        self.error = error
    }
}

#if compiler(>=6)
extension ContinueFromInit: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContinueFromInit: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContinueFromInit {
        return
            try ContinueFromInit(
                continueCmd: FfiConverterTypeSetupCmd.read(from: &buf), 
                error: FfiConverterTypeTapSignerReaderError.read(from: &buf)
        )
    }

    public static func write(_ value: ContinueFromInit, into buf: inout [UInt8]) {
        FfiConverterTypeSetupCmd.write(value.continueCmd, into: &buf)
        FfiConverterTypeTapSignerReaderError.write(value.error, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromInit_lift(_ buf: RustBuffer) throws -> ContinueFromInit {
    return try FfiConverterTypeContinueFromInit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContinueFromInit_lower(_ value: ContinueFromInit) -> RustBuffer {
    return FfiConverterTypeContinueFromInit.lower(value)
}


public struct DeriveInfo {
    public var masterPubkey: Data
    public var pubkey: Data
    public var chainCode: Data
    public var path: [UInt32]
    public var network: Network

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(masterPubkey: Data, pubkey: Data, chainCode: Data, path: [UInt32], network: Network) {
        self.masterPubkey = masterPubkey
        self.pubkey = pubkey
        self.chainCode = chainCode
        self.path = path
        self.network = network
    }
}

#if compiler(>=6)
extension DeriveInfo: Sendable {}
#endif


extension DeriveInfo: Equatable, Hashable {
    public static func ==(lhs: DeriveInfo, rhs: DeriveInfo) -> Bool {
        if lhs.masterPubkey != rhs.masterPubkey {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.chainCode != rhs.chainCode {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(masterPubkey)
        hasher.combine(pubkey)
        hasher.combine(chainCode)
        hasher.combine(path)
        hasher.combine(network)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDeriveInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DeriveInfo {
        return
            try DeriveInfo(
                masterPubkey: FfiConverterData.read(from: &buf), 
                pubkey: FfiConverterData.read(from: &buf), 
                chainCode: FfiConverterData.read(from: &buf), 
                path: FfiConverterSequenceUInt32.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf)
        )
    }

    public static func write(_ value: DeriveInfo, into buf: inout [UInt8]) {
        FfiConverterData.write(value.masterPubkey, into: &buf)
        FfiConverterData.write(value.pubkey, into: &buf)
        FfiConverterData.write(value.chainCode, into: &buf)
        FfiConverterSequenceUInt32.write(value.path, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDeriveInfo_lift(_ buf: RustBuffer) throws -> DeriveInfo {
    return try FfiConverterTypeDeriveInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDeriveInfo_lower(_ value: DeriveInfo) -> RustBuffer {
    return FfiConverterTypeDeriveInfo.lower(value)
}


public struct FeeResponse {
    public var fastestFee: Float
    public var halfHourFee: Float
    public var hourFee: Float
    public var economyFee: Float
    public var minimumFee: Float

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fastestFee: Float, halfHourFee: Float, hourFee: Float, economyFee: Float, minimumFee: Float) {
        self.fastestFee = fastestFee
        self.halfHourFee = halfHourFee
        self.hourFee = hourFee
        self.economyFee = economyFee
        self.minimumFee = minimumFee
    }
}

#if compiler(>=6)
extension FeeResponse: Sendable {}
#endif


extension FeeResponse: Equatable, Hashable {
    public static func ==(lhs: FeeResponse, rhs: FeeResponse) -> Bool {
        if lhs.fastestFee != rhs.fastestFee {
            return false
        }
        if lhs.halfHourFee != rhs.halfHourFee {
            return false
        }
        if lhs.hourFee != rhs.hourFee {
            return false
        }
        if lhs.economyFee != rhs.economyFee {
            return false
        }
        if lhs.minimumFee != rhs.minimumFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fastestFee)
        hasher.combine(halfHourFee)
        hasher.combine(hourFee)
        hasher.combine(economyFee)
        hasher.combine(minimumFee)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFeeResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeeResponse {
        return
            try FeeResponse(
                fastestFee: FfiConverterFloat.read(from: &buf), 
                halfHourFee: FfiConverterFloat.read(from: &buf), 
                hourFee: FfiConverterFloat.read(from: &buf), 
                economyFee: FfiConverterFloat.read(from: &buf), 
                minimumFee: FfiConverterFloat.read(from: &buf)
        )
    }

    public static func write(_ value: FeeResponse, into buf: inout [UInt8]) {
        FfiConverterFloat.write(value.fastestFee, into: &buf)
        FfiConverterFloat.write(value.halfHourFee, into: &buf)
        FfiConverterFloat.write(value.hourFee, into: &buf)
        FfiConverterFloat.write(value.economyFee, into: &buf)
        FfiConverterFloat.write(value.minimumFee, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFeeResponse_lift(_ buf: RustBuffer) throws -> FeeResponse {
    return try FfiConverterTypeFeeResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFeeResponse_lower(_ value: FeeResponse) -> RustBuffer {
    return FfiConverterTypeFeeResponse.lower(value)
}


public struct FiatAmount {
    public var amount: Double
    public var currency: FiatCurrency

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amount: Double, currency: FiatCurrency) {
        self.amount = amount
        self.currency = currency
    }
}

#if compiler(>=6)
extension FiatAmount: Sendable {}
#endif


extension FiatAmount: Equatable, Hashable {
    public static func ==(lhs: FiatAmount, rhs: FiatAmount) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.currency != rhs.currency {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(currency)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatAmount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatAmount {
        return
            try FiatAmount(
                amount: FfiConverterDouble.read(from: &buf), 
                currency: FfiConverterTypeFiatCurrency.read(from: &buf)
        )
    }

    public static func write(_ value: FiatAmount, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.amount, into: &buf)
        FfiConverterTypeFiatCurrency.write(value.currency, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatAmount_lift(_ buf: RustBuffer) throws -> FiatAmount {
    return try FfiConverterTypeFiatAmount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatAmount_lower(_ value: FiatAmount) -> RustBuffer {
    return FfiConverterTypeFiatAmount.lower(value)
}


public struct FoundAddress {
    public var type: WalletAddressType
    public var firstAddress: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(type: WalletAddressType, firstAddress: String) {
        self.type = type
        self.firstAddress = firstAddress
    }
}

#if compiler(>=6)
extension FoundAddress: Sendable {}
#endif


extension FoundAddress: Equatable, Hashable {
    public static func ==(lhs: FoundAddress, rhs: FoundAddress) -> Bool {
        if lhs.type != rhs.type {
            return false
        }
        if lhs.firstAddress != rhs.firstAddress {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(type)
        hasher.combine(firstAddress)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFoundAddress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FoundAddress {
        return
            try FoundAddress(
                type: FfiConverterTypeWalletAddressType.read(from: &buf), 
                firstAddress: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: FoundAddress, into buf: inout [UInt8]) {
        FfiConverterTypeWalletAddressType.write(value.type, into: &buf)
        FfiConverterString.write(value.firstAddress, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFoundAddress_lift(_ buf: RustBuffer) throws -> FoundAddress {
    return try FfiConverterTypeFoundAddress.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFoundAddress_lower(_ value: FoundAddress) -> RustBuffer {
    return FfiConverterTypeFoundAddress.lower(value)
}


public struct GroupedWord {
    public var number: UInt8
    public var word: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(number: UInt8, word: String) {
        self.number = number
        self.word = word
    }
}

#if compiler(>=6)
extension GroupedWord: Sendable {}
#endif


extension GroupedWord: Equatable, Hashable {
    public static func ==(lhs: GroupedWord, rhs: GroupedWord) -> Bool {
        if lhs.number != rhs.number {
            return false
        }
        if lhs.word != rhs.word {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(number)
        hasher.combine(word)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGroupedWord: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupedWord {
        return
            try GroupedWord(
                number: FfiConverterUInt8.read(from: &buf), 
                word: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: GroupedWord, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.number, into: &buf)
        FfiConverterString.write(value.word, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupedWord_lift(_ buf: RustBuffer) throws -> GroupedWord {
    return try FfiConverterTypeGroupedWord.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupedWord_lower(_ value: GroupedWord) -> RustBuffer {
    return FfiConverterTypeGroupedWord.lower(value)
}


/**
 * A space-efficient version of HistoricalPrice where only USD is required
 * and other currencies are optional to save space when they aren't available
 */
public struct HistoricalPriceRecord {
    public var time: UInt64
    public var usd: Float
    public var eur: Float?
    public var gbp: Float?
    public var cad: Float?
    public var chf: Float?
    public var aud: Float?
    public var jpy: Float?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(time: UInt64, usd: Float, eur: Float?, gbp: Float?, cad: Float?, chf: Float?, aud: Float?, jpy: Float?) {
        self.time = time
        self.usd = usd
        self.eur = eur
        self.gbp = gbp
        self.cad = cad
        self.chf = chf
        self.aud = aud
        self.jpy = jpy
    }
}

#if compiler(>=6)
extension HistoricalPriceRecord: Sendable {}
#endif


extension HistoricalPriceRecord: Equatable, Hashable {
    public static func ==(lhs: HistoricalPriceRecord, rhs: HistoricalPriceRecord) -> Bool {
        if lhs.time != rhs.time {
            return false
        }
        if lhs.usd != rhs.usd {
            return false
        }
        if lhs.eur != rhs.eur {
            return false
        }
        if lhs.gbp != rhs.gbp {
            return false
        }
        if lhs.cad != rhs.cad {
            return false
        }
        if lhs.chf != rhs.chf {
            return false
        }
        if lhs.aud != rhs.aud {
            return false
        }
        if lhs.jpy != rhs.jpy {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(time)
        hasher.combine(usd)
        hasher.combine(eur)
        hasher.combine(gbp)
        hasher.combine(cad)
        hasher.combine(chf)
        hasher.combine(aud)
        hasher.combine(jpy)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHistoricalPriceRecord: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HistoricalPriceRecord {
        return
            try HistoricalPriceRecord(
                time: FfiConverterUInt64.read(from: &buf), 
                usd: FfiConverterFloat.read(from: &buf), 
                eur: FfiConverterOptionFloat.read(from: &buf), 
                gbp: FfiConverterOptionFloat.read(from: &buf), 
                cad: FfiConverterOptionFloat.read(from: &buf), 
                chf: FfiConverterOptionFloat.read(from: &buf), 
                aud: FfiConverterOptionFloat.read(from: &buf), 
                jpy: FfiConverterOptionFloat.read(from: &buf)
        )
    }

    public static func write(_ value: HistoricalPriceRecord, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.time, into: &buf)
        FfiConverterFloat.write(value.usd, into: &buf)
        FfiConverterOptionFloat.write(value.eur, into: &buf)
        FfiConverterOptionFloat.write(value.gbp, into: &buf)
        FfiConverterOptionFloat.write(value.cad, into: &buf)
        FfiConverterOptionFloat.write(value.chf, into: &buf)
        FfiConverterOptionFloat.write(value.aud, into: &buf)
        FfiConverterOptionFloat.write(value.jpy, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceRecord_lift(_ buf: RustBuffer) throws -> HistoricalPriceRecord {
    return try FfiConverterTypeHistoricalPriceRecord.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceRecord_lower(_ value: HistoricalPriceRecord) -> RustBuffer {
    return FfiConverterTypeHistoricalPriceRecord.lower(value)
}


public struct ImportWalletManagerState {

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {
    }
}

#if compiler(>=6)
extension ImportWalletManagerState: Sendable {}
#endif


extension ImportWalletManagerState: Equatable, Hashable {
    public static func ==(lhs: ImportWalletManagerState, rhs: ImportWalletManagerState) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportWalletManagerState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportWalletManagerState {
        return
            ImportWalletManagerState()
    }

    public static func write(_ value: ImportWalletManagerState, into buf: inout [UInt8]) {
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerState_lift(_ buf: RustBuffer) throws -> ImportWalletManagerState {
    return try FfiConverterTypeImportWalletManagerState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerState_lower(_ value: ImportWalletManagerState) -> RustBuffer {
    return FfiConverterTypeImportWalletManagerState.lower(value)
}


public struct InternalOnlyMetadata {
    public var addressIndex: AddressIndex?
    /**
     * this is the last time the wallet was scanned, this includes the initial scna, expanded scan, and incremental scan
     */
    public var lastScanFinished: TimeInterval?
    public var lastHeightFetched: BlockSizeLast?
    /**
     * this is the time that a full expanded scan was completed, this should only happen once
     */
    public var performedFullScanAt: UInt64?
    public var storeType: StoreType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(addressIndex: AddressIndex?, 
        /**
         * this is the last time the wallet was scanned, this includes the initial scna, expanded scan, and incremental scan
         */lastScanFinished: TimeInterval?, lastHeightFetched: BlockSizeLast?, 
        /**
         * this is the time that a full expanded scan was completed, this should only happen once
         */performedFullScanAt: UInt64?, storeType: StoreType) {
        self.addressIndex = addressIndex
        self.lastScanFinished = lastScanFinished
        self.lastHeightFetched = lastHeightFetched
        self.performedFullScanAt = performedFullScanAt
        self.storeType = storeType
    }
}

#if compiler(>=6)
extension InternalOnlyMetadata: Sendable {}
#endif


extension InternalOnlyMetadata: Equatable, Hashable {
    public static func ==(lhs: InternalOnlyMetadata, rhs: InternalOnlyMetadata) -> Bool {
        if lhs.addressIndex != rhs.addressIndex {
            return false
        }
        if lhs.lastScanFinished != rhs.lastScanFinished {
            return false
        }
        if lhs.lastHeightFetched != rhs.lastHeightFetched {
            return false
        }
        if lhs.performedFullScanAt != rhs.performedFullScanAt {
            return false
        }
        if lhs.storeType != rhs.storeType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressIndex)
        hasher.combine(lastScanFinished)
        hasher.combine(lastHeightFetched)
        hasher.combine(performedFullScanAt)
        hasher.combine(storeType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInternalOnlyMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalOnlyMetadata {
        return
            try InternalOnlyMetadata(
                addressIndex: FfiConverterOptionTypeAddressIndex.read(from: &buf), 
                lastScanFinished: FfiConverterOptionDuration.read(from: &buf), 
                lastHeightFetched: FfiConverterOptionTypeBlockSizeLast.read(from: &buf), 
                performedFullScanAt: FfiConverterOptionUInt64.read(from: &buf), 
                storeType: FfiConverterTypeStoreType.read(from: &buf)
        )
    }

    public static func write(_ value: InternalOnlyMetadata, into buf: inout [UInt8]) {
        FfiConverterOptionTypeAddressIndex.write(value.addressIndex, into: &buf)
        FfiConverterOptionDuration.write(value.lastScanFinished, into: &buf)
        FfiConverterOptionTypeBlockSizeLast.write(value.lastHeightFetched, into: &buf)
        FfiConverterOptionUInt64.write(value.performedFullScanAt, into: &buf)
        FfiConverterTypeStoreType.write(value.storeType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalOnlyMetadata_lift(_ buf: RustBuffer) throws -> InternalOnlyMetadata {
    return try FfiConverterTypeInternalOnlyMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalOnlyMetadata_lower(_ value: InternalOnlyMetadata) -> RustBuffer {
    return FfiConverterTypeInternalOnlyMetadata.lower(value)
}


public struct Node {
    public var name: String
    public var network: Network
    public var apiType: ApiType
    public var url: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, network: Network, apiType: ApiType, url: String) {
        self.name = name
        self.network = network
        self.apiType = apiType
        self.url = url
    }
}

#if compiler(>=6)
extension Node: Sendable {}
#endif


extension Node: Equatable, Hashable {
    public static func ==(lhs: Node, rhs: Node) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.apiType != rhs.apiType {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(network)
        hasher.combine(apiType)
        hasher.combine(url)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNode: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Node {
        return
            try Node(
                name: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                apiType: FfiConverterTypeApiType.read(from: &buf), 
                url: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Node, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterTypeApiType.write(value.apiType, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNode_lift(_ buf: RustBuffer) throws -> Node {
    return try FfiConverterTypeNode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNode_lower(_ value: Node) -> RustBuffer {
    return FfiConverterTypeNode.lower(value)
}


public struct PendingDetails {
    public var lastSeen: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(lastSeen: UInt64) {
        self.lastSeen = lastSeen
    }
}

#if compiler(>=6)
extension PendingDetails: Sendable {}
#endif


extension PendingDetails: Equatable, Hashable {
    public static func ==(lhs: PendingDetails, rhs: PendingDetails) -> Bool {
        if lhs.lastSeen != rhs.lastSeen {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(lastSeen)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingDetails {
        return
            try PendingDetails(
                lastSeen: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PendingDetails, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.lastSeen, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingDetails_lift(_ buf: RustBuffer) throws -> PendingDetails {
    return try FfiConverterTypePendingDetails.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingDetails_lower(_ value: PendingDetails) -> RustBuffer {
    return FfiConverterTypePendingDetails.lower(value)
}


public struct PendingWalletManagerState {
    public var numberOfWords: NumberOfBip39Words
    public var wallet: PendingWallet

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(numberOfWords: NumberOfBip39Words, wallet: PendingWallet) {
        self.numberOfWords = numberOfWords
        self.wallet = wallet
    }
}

#if compiler(>=6)
extension PendingWalletManagerState: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingWalletManagerState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingWalletManagerState {
        return
            try PendingWalletManagerState(
                numberOfWords: FfiConverterTypeNumberOfBip39Words.read(from: &buf), 
                wallet: FfiConverterTypePendingWallet.read(from: &buf)
        )
    }

    public static func write(_ value: PendingWalletManagerState, into buf: inout [UInt8]) {
        FfiConverterTypeNumberOfBip39Words.write(value.numberOfWords, into: &buf)
        FfiConverterTypePendingWallet.write(value.wallet, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerState_lift(_ buf: RustBuffer) throws -> PendingWalletManagerState {
    return try FfiConverterTypePendingWalletManagerState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerState_lower(_ value: PendingWalletManagerState) -> RustBuffer {
    return FfiConverterTypePendingWalletManagerState.lower(value)
}


public struct Router {
    public var app: FfiApp
    public var `default`: Route
    public var routes: [Route]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(app: FfiApp, `default`: Route, routes: [Route]) {
        self.app = app
        self.`default` = `default`
        self.routes = routes
    }
}

#if compiler(>=6)
extension Router: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouter: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Router {
        return
            try Router(
                app: FfiConverterTypeFfiApp.read(from: &buf), 
                default: FfiConverterTypeRoute.read(from: &buf), 
                routes: FfiConverterSequenceTypeRoute.read(from: &buf)
        )
    }

    public static func write(_ value: Router, into buf: inout [UInt8]) {
        FfiConverterTypeFfiApp.write(value.app, into: &buf)
        FfiConverterTypeRoute.write(value.`default`, into: &buf)
        FfiConverterSequenceTypeRoute.write(value.routes, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouter_lift(_ buf: RustBuffer) throws -> Router {
    return try FfiConverterTypeRouter.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouter_lower(_ value: Router) -> RustBuffer {
    return FfiConverterTypeRouter.lower(value)
}


public struct ScanningInfo {
    public var addressType: WalletAddressType
    public var count: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(addressType: WalletAddressType, count: UInt32) {
        self.addressType = addressType
        self.count = count
    }
}

#if compiler(>=6)
extension ScanningInfo: Sendable {}
#endif


extension ScanningInfo: Equatable, Hashable {
    public static func ==(lhs: ScanningInfo, rhs: ScanningInfo) -> Bool {
        if lhs.addressType != rhs.addressType {
            return false
        }
        if lhs.count != rhs.count {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressType)
        hasher.combine(count)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeScanningInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScanningInfo {
        return
            try ScanningInfo(
                addressType: FfiConverterTypeWalletAddressType.read(from: &buf), 
                count: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ScanningInfo, into buf: inout [UInt8]) {
        FfiConverterTypeWalletAddressType.write(value.addressType, into: &buf)
        FfiConverterUInt32.write(value.count, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScanningInfo_lift(_ buf: RustBuffer) throws -> ScanningInfo {
    return try FfiConverterTypeScanningInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScanningInfo_lower(_ value: ScanningInfo) -> RustBuffer {
    return FfiConverterTypeScanningInfo.lower(value)
}


public struct SendFlowFiatOnChangeResult {
    public var fiatText: String?
    public var fiatValue: Double?
    public var btcAmount: Amount?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fiatText: String?, fiatValue: Double?, btcAmount: Amount?) {
        self.fiatText = fiatText
        self.fiatValue = fiatValue
        self.btcAmount = btcAmount
    }
}

#if compiler(>=6)
extension SendFlowFiatOnChangeResult: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendFlowFiatOnChangeResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendFlowFiatOnChangeResult {
        return
            try SendFlowFiatOnChangeResult(
                fiatText: FfiConverterOptionString.read(from: &buf), 
                fiatValue: FfiConverterOptionDouble.read(from: &buf), 
                btcAmount: FfiConverterOptionTypeAmount.read(from: &buf)
        )
    }

    public static func write(_ value: SendFlowFiatOnChangeResult, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.fiatText, into: &buf)
        FfiConverterOptionDouble.write(value.fiatValue, into: &buf)
        FfiConverterOptionTypeAmount.write(value.btcAmount, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeResult_lift(_ buf: RustBuffer) throws -> SendFlowFiatOnChangeResult {
    return try FfiConverterTypeSendFlowFiatOnChangeResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeResult_lower(_ value: SendFlowFiatOnChangeResult) -> RustBuffer {
    return FfiConverterTypeSendFlowFiatOnChangeResult.lower(value)
}


public struct SendRouteConfirmArgs {
    public var id: WalletId
    public var details: ConfirmDetails
    public var signedTransaction: BitcoinTransaction?
    public var signedPsbt: Psbt?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: WalletId, details: ConfirmDetails, signedTransaction: BitcoinTransaction?, signedPsbt: Psbt?) {
        self.id = id
        self.details = details
        self.signedTransaction = signedTransaction
        self.signedPsbt = signedPsbt
    }
}

#if compiler(>=6)
extension SendRouteConfirmArgs: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendRouteConfirmArgs: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendRouteConfirmArgs {
        return
            try SendRouteConfirmArgs(
                id: FfiConverterTypeWalletId.read(from: &buf), 
                details: FfiConverterTypeConfirmDetails.read(from: &buf), 
                signedTransaction: FfiConverterOptionTypeBitcoinTransaction.read(from: &buf), 
                signedPsbt: FfiConverterOptionTypePsbt.read(from: &buf)
        )
    }

    public static func write(_ value: SendRouteConfirmArgs, into buf: inout [UInt8]) {
        FfiConverterTypeWalletId.write(value.id, into: &buf)
        FfiConverterTypeConfirmDetails.write(value.details, into: &buf)
        FfiConverterOptionTypeBitcoinTransaction.write(value.signedTransaction, into: &buf)
        FfiConverterOptionTypePsbt.write(value.signedPsbt, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendRouteConfirmArgs_lift(_ buf: RustBuffer) throws -> SendRouteConfirmArgs {
    return try FfiConverterTypeSendRouteConfirmArgs.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendRouteConfirmArgs_lower(_ value: SendRouteConfirmArgs) -> RustBuffer {
    return FfiConverterTypeSendRouteConfirmArgs.lower(value)
}


public struct TapSignerConfirmPinArgs {
    public var tapSigner: TapSigner
    public var startingPin: String
    public var newPin: String
    public var chainCode: String?
    public var action: TapSignerPinAction

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tapSigner: TapSigner, startingPin: String, newPin: String, chainCode: String?, action: TapSignerPinAction) {
        self.tapSigner = tapSigner
        self.startingPin = startingPin
        self.newPin = newPin
        self.chainCode = chainCode
        self.action = action
    }
}

#if compiler(>=6)
extension TapSignerConfirmPinArgs: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerConfirmPinArgs: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerConfirmPinArgs {
        return
            try TapSignerConfirmPinArgs(
                tapSigner: FfiConverterTypeTapSigner.read(from: &buf), 
                startingPin: FfiConverterString.read(from: &buf), 
                newPin: FfiConverterString.read(from: &buf), 
                chainCode: FfiConverterOptionString.read(from: &buf), 
                action: FfiConverterTypeTapSignerPinAction.read(from: &buf)
        )
    }

    public static func write(_ value: TapSignerConfirmPinArgs, into buf: inout [UInt8]) {
        FfiConverterTypeTapSigner.write(value.tapSigner, into: &buf)
        FfiConverterString.write(value.startingPin, into: &buf)
        FfiConverterString.write(value.newPin, into: &buf)
        FfiConverterOptionString.write(value.chainCode, into: &buf)
        FfiConverterTypeTapSignerPinAction.write(value.action, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerConfirmPinArgs_lift(_ buf: RustBuffer) throws -> TapSignerConfirmPinArgs {
    return try FfiConverterTypeTapSignerConfirmPinArgs.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerConfirmPinArgs_lower(_ value: TapSignerConfirmPinArgs) -> RustBuffer {
    return FfiConverterTypeTapSignerConfirmPinArgs.lower(value)
}


public struct TapSignerNewPinArgs {
    public var tapSigner: TapSigner
    public var startingPin: String
    public var chainCode: String?
    public var action: TapSignerPinAction

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tapSigner: TapSigner, startingPin: String, chainCode: String?, action: TapSignerPinAction) {
        self.tapSigner = tapSigner
        self.startingPin = startingPin
        self.chainCode = chainCode
        self.action = action
    }
}

#if compiler(>=6)
extension TapSignerNewPinArgs: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerNewPinArgs: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerNewPinArgs {
        return
            try TapSignerNewPinArgs(
                tapSigner: FfiConverterTypeTapSigner.read(from: &buf), 
                startingPin: FfiConverterString.read(from: &buf), 
                chainCode: FfiConverterOptionString.read(from: &buf), 
                action: FfiConverterTypeTapSignerPinAction.read(from: &buf)
        )
    }

    public static func write(_ value: TapSignerNewPinArgs, into buf: inout [UInt8]) {
        FfiConverterTypeTapSigner.write(value.tapSigner, into: &buf)
        FfiConverterString.write(value.startingPin, into: &buf)
        FfiConverterOptionString.write(value.chainCode, into: &buf)
        FfiConverterTypeTapSignerPinAction.write(value.action, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerNewPinArgs_lift(_ buf: RustBuffer) throws -> TapSignerNewPinArgs {
    return try FfiConverterTypeTapSignerNewPinArgs.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerNewPinArgs_lower(_ value: TapSignerNewPinArgs) -> RustBuffer {
    return FfiConverterTypeTapSignerNewPinArgs.lower(value)
}


public struct TapSignerSetupComplete {
    public var backup: Data
    public var deriveInfo: DeriveInfo

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(backup: Data, deriveInfo: DeriveInfo) {
        self.backup = backup
        self.deriveInfo = deriveInfo
    }
}

#if compiler(>=6)
extension TapSignerSetupComplete: Sendable {}
#endif


extension TapSignerSetupComplete: Equatable, Hashable {
    public static func ==(lhs: TapSignerSetupComplete, rhs: TapSignerSetupComplete) -> Bool {
        if lhs.backup != rhs.backup {
            return false
        }
        if lhs.deriveInfo != rhs.deriveInfo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(backup)
        hasher.combine(deriveInfo)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerSetupComplete: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerSetupComplete {
        return
            try TapSignerSetupComplete(
                backup: FfiConverterData.read(from: &buf), 
                deriveInfo: FfiConverterTypeDeriveInfo.read(from: &buf)
        )
    }

    public static func write(_ value: TapSignerSetupComplete, into buf: inout [UInt8]) {
        FfiConverterData.write(value.backup, into: &buf)
        FfiConverterTypeDeriveInfo.write(value.deriveInfo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerSetupComplete_lift(_ buf: RustBuffer) throws -> TapSignerSetupComplete {
    return try FfiConverterTypeTapSignerSetupComplete.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerSetupComplete_lower(_ value: TapSignerSetupComplete) -> RustBuffer {
    return FfiConverterTypeTapSignerSetupComplete.lower(value)
}


public struct WalletMetadata {
    public var id: WalletId
    public var name: String
    public var color: WalletColor
    public var verified: Bool
    public var network: Network
    public var masterFingerprint: Fingerprint?
    public var selectedUnit: Unit
    public var sensitiveVisible: Bool
    public var detailsExpanded: Bool
    public var walletType: WalletType
    public var walletMode: WalletMode
    public var discoveryState: DiscoveryState
    public var addressType: WalletAddressType
    public var fiatOrBtc: FiatOrBtc
    public var origin: String?
    /**
     * Metadata data specific to different hardware wallets
     */
    public var hardwareMetadata: HardwareWalletMetadata?
    /**
     * Show labels for transactions i the transaction list
     * If false, we only show either `Sent` or `Received` labels
     */
    public var showLabels: Bool
    public var `internal`: InternalOnlyMetadata

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: WalletId, name: String, color: WalletColor, verified: Bool, network: Network, masterFingerprint: Fingerprint?, selectedUnit: Unit, sensitiveVisible: Bool, detailsExpanded: Bool, walletType: WalletType, walletMode: WalletMode, discoveryState: DiscoveryState, addressType: WalletAddressType, fiatOrBtc: FiatOrBtc, origin: String?, 
        /**
         * Metadata data specific to different hardware wallets
         */hardwareMetadata: HardwareWalletMetadata?, 
        /**
         * Show labels for transactions i the transaction list
         * If false, we only show either `Sent` or `Received` labels
         */showLabels: Bool, `internal`: InternalOnlyMetadata) {
        self.id = id
        self.name = name
        self.color = color
        self.verified = verified
        self.network = network
        self.masterFingerprint = masterFingerprint
        self.selectedUnit = selectedUnit
        self.sensitiveVisible = sensitiveVisible
        self.detailsExpanded = detailsExpanded
        self.walletType = walletType
        self.walletMode = walletMode
        self.discoveryState = discoveryState
        self.addressType = addressType
        self.fiatOrBtc = fiatOrBtc
        self.origin = origin
        self.hardwareMetadata = hardwareMetadata
        self.showLabels = showLabels
        self.`internal` = `internal`
    }
}

#if compiler(>=6)
extension WalletMetadata: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletMetadata {
        return
            try WalletMetadata(
                id: FfiConverterTypeWalletId.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                color: FfiConverterTypeWalletColor.read(from: &buf), 
                verified: FfiConverterBool.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                masterFingerprint: FfiConverterOptionTypeFingerprint.read(from: &buf), 
                selectedUnit: FfiConverterTypeUnit.read(from: &buf), 
                sensitiveVisible: FfiConverterBool.read(from: &buf), 
                detailsExpanded: FfiConverterBool.read(from: &buf), 
                walletType: FfiConverterTypeWalletType.read(from: &buf), 
                walletMode: FfiConverterTypeWalletMode.read(from: &buf), 
                discoveryState: FfiConverterTypeDiscoveryState.read(from: &buf), 
                addressType: FfiConverterTypeWalletAddressType.read(from: &buf), 
                fiatOrBtc: FfiConverterTypeFiatOrBtc.read(from: &buf), 
                origin: FfiConverterOptionString.read(from: &buf), 
                hardwareMetadata: FfiConverterOptionTypeHardwareWalletMetadata.read(from: &buf), 
                showLabels: FfiConverterBool.read(from: &buf), 
                internal: FfiConverterTypeInternalOnlyMetadata.read(from: &buf)
        )
    }

    public static func write(_ value: WalletMetadata, into buf: inout [UInt8]) {
        FfiConverterTypeWalletId.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterTypeWalletColor.write(value.color, into: &buf)
        FfiConverterBool.write(value.verified, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterOptionTypeFingerprint.write(value.masterFingerprint, into: &buf)
        FfiConverterTypeUnit.write(value.selectedUnit, into: &buf)
        FfiConverterBool.write(value.sensitiveVisible, into: &buf)
        FfiConverterBool.write(value.detailsExpanded, into: &buf)
        FfiConverterTypeWalletType.write(value.walletType, into: &buf)
        FfiConverterTypeWalletMode.write(value.walletMode, into: &buf)
        FfiConverterTypeDiscoveryState.write(value.discoveryState, into: &buf)
        FfiConverterTypeWalletAddressType.write(value.addressType, into: &buf)
        FfiConverterTypeFiatOrBtc.write(value.fiatOrBtc, into: &buf)
        FfiConverterOptionString.write(value.origin, into: &buf)
        FfiConverterOptionTypeHardwareWalletMetadata.write(value.hardwareMetadata, into: &buf)
        FfiConverterBool.write(value.showLabels, into: &buf)
        FfiConverterTypeInternalOnlyMetadata.write(value.`internal`, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletMetadata_lift(_ buf: RustBuffer) throws -> WalletMetadata {
    return try FfiConverterTypeWalletMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletMetadata_lower(_ value: WalletMetadata) -> RustBuffer {
    return FfiConverterTypeWalletMetadata.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AfterPinAction {
    
    case derive
    case change
    case backup
    case sign(Psbt
    )
}


#if compiler(>=6)
extension AfterPinAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAfterPinAction: FfiConverterRustBuffer {
    typealias SwiftType = AfterPinAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AfterPinAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .derive
        
        case 2: return .change
        
        case 3: return .backup
        
        case 4: return .sign(try FfiConverterTypePsbt.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AfterPinAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case .derive:
            writeInt(&buf, Int32(1))
        
        
        case .change:
            writeInt(&buf, Int32(2))
        
        
        case .backup:
            writeInt(&buf, Int32(3))
        
        
        case let .sign(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypePsbt.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAfterPinAction_lift(_ buf: RustBuffer) throws -> AfterPinAction {
    return try FfiConverterTypeAfterPinAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAfterPinAction_lower(_ value: AfterPinAction) -> RustBuffer {
    return FfiConverterTypeAfterPinAction.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ApiType {
    
    case esplora
    case electrum
    case rpc
}


#if compiler(>=6)
extension ApiType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeApiType: FfiConverterRustBuffer {
    typealias SwiftType = ApiType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ApiType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .esplora
        
        case 2: return .electrum
        
        case 3: return .rpc
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ApiType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .esplora:
            writeInt(&buf, Int32(1))
        
        
        case .electrum:
            writeInt(&buf, Int32(2))
        
        
        case .rpc:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApiType_lift(_ buf: RustBuffer) throws -> ApiType {
    return try FfiConverterTypeApiType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeApiType_lower(_ value: ApiType) -> RustBuffer {
    return FfiConverterTypeApiType.lower(value)
}


extension ApiType: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AppAction {
    
    case updateRoute(routes: [Route]
    )
    case changeNetwork(network: Network
    )
    case changeColorScheme(ColorSchemeSelection
    )
    case changeFiatCurrency(FiatCurrency
    )
    case setSelectedNode(Node
    )
    case updateFiatPrices
    case updateFees
}


#if compiler(>=6)
extension AppAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAppAction: FfiConverterRustBuffer {
    typealias SwiftType = AppAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .updateRoute(routes: try FfiConverterSequenceTypeRoute.read(from: &buf)
        )
        
        case 2: return .changeNetwork(network: try FfiConverterTypeNetwork.read(from: &buf)
        )
        
        case 3: return .changeColorScheme(try FfiConverterTypeColorSchemeSelection.read(from: &buf)
        )
        
        case 4: return .changeFiatCurrency(try FfiConverterTypeFiatCurrency.read(from: &buf)
        )
        
        case 5: return .setSelectedNode(try FfiConverterTypeNode.read(from: &buf)
        )
        
        case 6: return .updateFiatPrices
        
        case 7: return .updateFees
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AppAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .updateRoute(routes):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeRoute.write(routes, into: &buf)
            
        
        case let .changeNetwork(network):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNetwork.write(network, into: &buf)
            
        
        case let .changeColorScheme(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeColorSchemeSelection.write(v1, into: &buf)
            
        
        case let .changeFiatCurrency(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeFiatCurrency.write(v1, into: &buf)
            
        
        case let .setSelectedNode(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeNode.write(v1, into: &buf)
            
        
        case .updateFiatPrices:
            writeInt(&buf, Int32(6))
        
        
        case .updateFees:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppAction_lift(_ buf: RustBuffer) throws -> AppAction {
    return try FfiConverterTypeAppAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppAction_lower(_ value: AppAction) -> RustBuffer {
    return FfiConverterTypeAppAction.lower(value)
}







public enum AppError: Swift.Error {

    
    
    case PricesError(String
    )
    case FeesError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAppError: FfiConverterRustBuffer {
    typealias SwiftType = AppError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PricesError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .FeesError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AppError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .PricesError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .FeesError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppError_lift(_ buf: RustBuffer) throws -> AppError {
    return try FfiConverterTypeAppError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppError_lower(_ value: AppError) -> RustBuffer {
    return FfiConverterTypeAppError.lower(value)
}


extension AppError: Equatable, Hashable {}




extension AppError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AppStateReconcileMessage {
    
    case defaultRouteChanged(Route,[Route]
    )
    case routeUpdated([Route]
    )
    case databaseUpdated
    case colorSchemeChanged(ColorSchemeSelection
    )
    case selectedNodeChanged(Node
    )
    case selectedNetworkChanged(Network
    )
    case fiatPricesChanged(PriceResponse
    )
    case feesChanged(FeeResponse
    )
    case fiatCurrencyChanged(FiatCurrency
    )
    case walletModeChanged(WalletMode
    )
}


#if compiler(>=6)
extension AppStateReconcileMessage: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAppStateReconcileMessage: FfiConverterRustBuffer {
    typealias SwiftType = AppStateReconcileMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppStateReconcileMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .defaultRouteChanged(try FfiConverterTypeRoute.read(from: &buf), try FfiConverterSequenceTypeRoute.read(from: &buf)
        )
        
        case 2: return .routeUpdated(try FfiConverterSequenceTypeRoute.read(from: &buf)
        )
        
        case 3: return .databaseUpdated
        
        case 4: return .colorSchemeChanged(try FfiConverterTypeColorSchemeSelection.read(from: &buf)
        )
        
        case 5: return .selectedNodeChanged(try FfiConverterTypeNode.read(from: &buf)
        )
        
        case 6: return .selectedNetworkChanged(try FfiConverterTypeNetwork.read(from: &buf)
        )
        
        case 7: return .fiatPricesChanged(try FfiConverterTypePriceResponse.read(from: &buf)
        )
        
        case 8: return .feesChanged(try FfiConverterTypeFeeResponse.read(from: &buf)
        )
        
        case 9: return .fiatCurrencyChanged(try FfiConverterTypeFiatCurrency.read(from: &buf)
        )
        
        case 10: return .walletModeChanged(try FfiConverterTypeWalletMode.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AppStateReconcileMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .defaultRouteChanged(v1,v2):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRoute.write(v1, into: &buf)
            FfiConverterSequenceTypeRoute.write(v2, into: &buf)
            
        
        case let .routeUpdated(v1):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeRoute.write(v1, into: &buf)
            
        
        case .databaseUpdated:
            writeInt(&buf, Int32(3))
        
        
        case let .colorSchemeChanged(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeColorSchemeSelection.write(v1, into: &buf)
            
        
        case let .selectedNodeChanged(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeNode.write(v1, into: &buf)
            
        
        case let .selectedNetworkChanged(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeNetwork.write(v1, into: &buf)
            
        
        case let .fiatPricesChanged(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypePriceResponse.write(v1, into: &buf)
            
        
        case let .feesChanged(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeFeeResponse.write(v1, into: &buf)
            
        
        case let .fiatCurrencyChanged(v1):
            writeInt(&buf, Int32(9))
            FfiConverterTypeFiatCurrency.write(v1, into: &buf)
            
        
        case let .walletModeChanged(v1):
            writeInt(&buf, Int32(10))
            FfiConverterTypeWalletMode.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppStateReconcileMessage_lift(_ buf: RustBuffer) throws -> AppStateReconcileMessage {
    return try FfiConverterTypeAppStateReconcileMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAppStateReconcileMessage_lower(_ value: AppStateReconcileMessage) -> RustBuffer {
    return FfiConverterTypeAppStateReconcileMessage.lower(value)
}







public enum AuthError: Swift.Error {

    
    
    case DatabaseSaveError(DatabaseError
    )
    case DatabaseGetError(DatabaseError
    )
    case HashError(String
    )
    case ParseHashedPinError(String
    )
    case VerificationFailed(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthError: FfiConverterRustBuffer {
    typealias SwiftType = AuthError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DatabaseSaveError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 2: return .DatabaseGetError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 3: return .HashError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .ParseHashedPinError(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .VerificationFailed(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DatabaseSaveError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .DatabaseGetError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .HashError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ParseHashedPinError(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .VerificationFailed(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthError_lift(_ buf: RustBuffer) throws -> AuthError {
    return try FfiConverterTypeAuthError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthError_lower(_ value: AuthError) -> RustBuffer {
    return FfiConverterTypeAuthError.lower(value)
}


extension AuthError: Equatable, Hashable {}




extension AuthError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthManagerAction {
    
    case updateAuthType(AuthType
    )
    case enableBiometric
    case disableBiometric
    case disablePin
    case setPin(String
    )
    case disableWipeDataPin
    case disableDecoyPin
}


#if compiler(>=6)
extension AuthManagerAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthManagerAction: FfiConverterRustBuffer {
    typealias SwiftType = AuthManagerAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthManagerAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .updateAuthType(try FfiConverterTypeAuthType.read(from: &buf)
        )
        
        case 2: return .enableBiometric
        
        case 3: return .disableBiometric
        
        case 4: return .disablePin
        
        case 5: return .setPin(try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .disableWipeDataPin
        
        case 7: return .disableDecoyPin
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthManagerAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .updateAuthType(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAuthType.write(v1, into: &buf)
            
        
        case .enableBiometric:
            writeInt(&buf, Int32(2))
        
        
        case .disableBiometric:
            writeInt(&buf, Int32(3))
        
        
        case .disablePin:
            writeInt(&buf, Int32(4))
        
        
        case let .setPin(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .disableWipeDataPin:
            writeInt(&buf, Int32(6))
        
        
        case .disableDecoyPin:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerAction_lift(_ buf: RustBuffer) throws -> AuthManagerAction {
    return try FfiConverterTypeAuthManagerAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerAction_lower(_ value: AuthManagerAction) -> RustBuffer {
    return FfiConverterTypeAuthManagerAction.lower(value)
}


extension AuthManagerAction: Equatable, Hashable {}







public enum AuthManagerError: Swift.Error {

    
    
    case WipeDataSet(TrickPinError
    )
    case DecoySet(TrickPinError
    )
    case DatabaseError(DatabaseError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthManagerError: FfiConverterRustBuffer {
    typealias SwiftType = AuthManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .WipeDataSet(
            try FfiConverterTypeTrickPinError.read(from: &buf)
            )
        case 2: return .DecoySet(
            try FfiConverterTypeTrickPinError.read(from: &buf)
            )
        case 3: return .DatabaseError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .WipeDataSet(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTrickPinError.write(v1, into: &buf)
            
        
        case let .DecoySet(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeTrickPinError.write(v1, into: &buf)
            
        
        case let .DatabaseError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerError_lift(_ buf: RustBuffer) throws -> AuthManagerError {
    return try FfiConverterTypeAuthManagerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerError_lower(_ value: AuthManagerError) -> RustBuffer {
    return FfiConverterTypeAuthManagerError.lower(value)
}


extension AuthManagerError: Equatable, Hashable {}




extension AuthManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthManagerReconcileMessage {
    
    case authTypeChanged(AuthType
    )
    case wipeDataPinChanged
    case decoyPinChanged
}


#if compiler(>=6)
extension AuthManagerReconcileMessage: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthManagerReconcileMessage: FfiConverterRustBuffer {
    typealias SwiftType = AuthManagerReconcileMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthManagerReconcileMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .authTypeChanged(try FfiConverterTypeAuthType.read(from: &buf)
        )
        
        case 2: return .wipeDataPinChanged
        
        case 3: return .decoyPinChanged
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthManagerReconcileMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .authTypeChanged(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAuthType.write(v1, into: &buf)
            
        
        case .wipeDataPinChanged:
            writeInt(&buf, Int32(2))
        
        
        case .decoyPinChanged:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerReconcileMessage_lift(_ buf: RustBuffer) throws -> AuthManagerReconcileMessage {
    return try FfiConverterTypeAuthManagerReconcileMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthManagerReconcileMessage_lower(_ value: AuthManagerReconcileMessage) -> RustBuffer {
    return FfiConverterTypeAuthManagerReconcileMessage.lower(value)
}


extension AuthManagerReconcileMessage: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthType {
    
    case pin
    case biometric
    case both
    case none
}


#if compiler(>=6)
extension AuthType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthType: FfiConverterRustBuffer {
    typealias SwiftType = AuthType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pin
        
        case 2: return .biometric
        
        case 3: return .both
        
        case 4: return .none
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .pin:
            writeInt(&buf, Int32(1))
        
        
        case .biometric:
            writeInt(&buf, Int32(2))
        
        
        case .both:
            writeInt(&buf, Int32(3))
        
        
        case .none:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthType_lift(_ buf: RustBuffer) throws -> AuthType {
    return try FfiConverterTypeAuthType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthType_lower(_ value: AuthType) -> RustBuffer {
    return FfiConverterTypeAuthType.lower(value)
}


extension AuthType: Equatable, Hashable {}







public enum Bip39Error: Swift.Error {

    
    
    case BadWordCount(UInt32
    )
    case UnknownWord(UInt32
    )
    case BadEntropyBitCount(UInt32
    )
    case InvalidChecksum
    case AmbiguousLanguages
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBip39Error: FfiConverterRustBuffer {
    typealias SwiftType = Bip39Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bip39Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BadWordCount(
            try FfiConverterUInt32.read(from: &buf)
            )
        case 2: return .UnknownWord(
            try FfiConverterUInt32.read(from: &buf)
            )
        case 3: return .BadEntropyBitCount(
            try FfiConverterUInt32.read(from: &buf)
            )
        case 4: return .InvalidChecksum
        case 5: return .AmbiguousLanguages

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Bip39Error, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .BadWordCount(v1):
            writeInt(&buf, Int32(1))
            FfiConverterUInt32.write(v1, into: &buf)
            
        
        case let .UnknownWord(v1):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(v1, into: &buf)
            
        
        case let .BadEntropyBitCount(v1):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(v1, into: &buf)
            
        
        case .InvalidChecksum:
            writeInt(&buf, Int32(4))
        
        
        case .AmbiguousLanguages:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39Error_lift(_ buf: RustBuffer) throws -> Bip39Error {
    return try FfiConverterTypeBip39Error.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBip39Error_lower(_ value: Bip39Error) -> RustBuffer {
    return FfiConverterTypeBip39Error.lower(value)
}


extension Bip39Error: Equatable, Hashable {}




extension Bip39Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum BitcoinTransactionError: Swift.Error {

    
    
    case HexDecodeError(String
    )
    case ParseTransactionError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBitcoinTransactionError: FfiConverterRustBuffer {
    typealias SwiftType = BitcoinTransactionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BitcoinTransactionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .HexDecodeError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .ParseTransactionError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BitcoinTransactionError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .HexDecodeError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ParseTransactionError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinTransactionError_lift(_ buf: RustBuffer) throws -> BitcoinTransactionError {
    return try FfiConverterTypeBitcoinTransactionError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBitcoinTransactionError_lower(_ value: BitcoinTransactionError) -> RustBuffer {
    return FfiConverterTypeBitcoinTransactionError.lower(value)
}


extension BitcoinTransactionError: Equatable, Hashable {}




extension BitcoinTransactionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum ByteReaderError: Swift.Error {

    
    
    case BufferTooSmall
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeByteReaderError: FfiConverterRustBuffer {
    typealias SwiftType = ByteReaderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ByteReaderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BufferTooSmall

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ByteReaderError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .BufferTooSmall:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeByteReaderError_lift(_ buf: RustBuffer) throws -> ByteReaderError {
    return try FfiConverterTypeByteReaderError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeByteReaderError_lower(_ value: ByteReaderError) -> RustBuffer {
    return FfiConverterTypeByteReaderError.lower(value)
}


extension ByteReaderError: Equatable, Hashable {}




extension ByteReaderError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum CkTapError: Swift.Error {

    
    
    case UnluckyNumber
    case BadArguments
    case BadAuth
    case NeedsAuth
    case UnknownCommand
    case InvalidCommand
    case InvalidState
    case WeakNonce
    case BadCbor
    case BackupFirst
    case RateLimited
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCkTapError: FfiConverterRustBuffer {
    typealias SwiftType = CkTapError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CkTapError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnluckyNumber
        case 2: return .BadArguments
        case 3: return .BadAuth
        case 4: return .NeedsAuth
        case 5: return .UnknownCommand
        case 6: return .InvalidCommand
        case 7: return .InvalidState
        case 8: return .WeakNonce
        case 9: return .BadCbor
        case 10: return .BackupFirst
        case 11: return .RateLimited

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CkTapError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .UnluckyNumber:
            writeInt(&buf, Int32(1))
        
        
        case .BadArguments:
            writeInt(&buf, Int32(2))
        
        
        case .BadAuth:
            writeInt(&buf, Int32(3))
        
        
        case .NeedsAuth:
            writeInt(&buf, Int32(4))
        
        
        case .UnknownCommand:
            writeInt(&buf, Int32(5))
        
        
        case .InvalidCommand:
            writeInt(&buf, Int32(6))
        
        
        case .InvalidState:
            writeInt(&buf, Int32(7))
        
        
        case .WeakNonce:
            writeInt(&buf, Int32(8))
        
        
        case .BadCbor:
            writeInt(&buf, Int32(9))
        
        
        case .BackupFirst:
            writeInt(&buf, Int32(10))
        
        
        case .RateLimited:
            writeInt(&buf, Int32(11))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCkTapError_lift(_ buf: RustBuffer) throws -> CkTapError {
    return try FfiConverterTypeCkTapError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCkTapError_lower(_ value: CkTapError) -> RustBuffer {
    return FfiConverterTypeCkTapError.lower(value)
}


extension CkTapError: Equatable, Hashable {}




extension CkTapError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ColdWalletRoute {
    
    case qrCode
}


#if compiler(>=6)
extension ColdWalletRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeColdWalletRoute: FfiConverterRustBuffer {
    typealias SwiftType = ColdWalletRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ColdWalletRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .qrCode
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ColdWalletRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case .qrCode:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColdWalletRoute_lift(_ buf: RustBuffer) throws -> ColdWalletRoute {
    return try FfiConverterTypeColdWalletRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeColdWalletRoute_lower(_ value: ColdWalletRoute) -> RustBuffer {
    return FfiConverterTypeColdWalletRoute.lower(value)
}


extension ColdWalletRoute: Equatable, Hashable {}







public enum ConverterError: Swift.Error {

    
    
    case FiatAmountFromStringError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConverterError: FfiConverterRustBuffer {
    typealias SwiftType = ConverterError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConverterError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FiatAmountFromStringError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConverterError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .FiatAmountFromStringError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConverterError_lift(_ buf: RustBuffer) throws -> ConverterError {
    return try FfiConverterTypeConverterError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConverterError_lower(_ value: ConverterError) -> RustBuffer {
    return FfiConverterTypeConverterError.lower(value)
}


extension ConverterError: Equatable, Hashable {}




extension ConverterError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum DatabaseError: Swift.Error {

    
    
    case DatabaseAccess(String
    )
    case TableAccess(String
    )
    case Wallets(WalletTableError
    )
    case GlobalFlag(GlobalFlagTableError
    )
    case GlobalConfig(GlobalConfigTableError
    )
    case GlobalCache(GlobalCacheTableError
    )
    case UnsignedTransactions(UnsignedTransactionsTableError
    )
    case HistoricalPrice(HistoricalPriceTableError
    )
    case Serialization(SerdeError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDatabaseError: FfiConverterRustBuffer {
    typealias SwiftType = DatabaseError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DatabaseError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DatabaseAccess(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .TableAccess(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Wallets(
            try FfiConverterTypeWalletTableError.read(from: &buf)
            )
        case 4: return .GlobalFlag(
            try FfiConverterTypeGlobalFlagTableError.read(from: &buf)
            )
        case 5: return .GlobalConfig(
            try FfiConverterTypeGlobalConfigTableError.read(from: &buf)
            )
        case 6: return .GlobalCache(
            try FfiConverterTypeGlobalCacheTableError.read(from: &buf)
            )
        case 7: return .UnsignedTransactions(
            try FfiConverterTypeUnsignedTransactionsTableError.read(from: &buf)
            )
        case 8: return .HistoricalPrice(
            try FfiConverterTypeHistoricalPriceTableError.read(from: &buf)
            )
        case 9: return .Serialization(
            try FfiConverterTypeSerdeError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DatabaseError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DatabaseAccess(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .TableAccess(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Wallets(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeWalletTableError.write(v1, into: &buf)
            
        
        case let .GlobalFlag(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeGlobalFlagTableError.write(v1, into: &buf)
            
        
        case let .GlobalConfig(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeGlobalConfigTableError.write(v1, into: &buf)
            
        
        case let .GlobalCache(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeGlobalCacheTableError.write(v1, into: &buf)
            
        
        case let .UnsignedTransactions(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypeUnsignedTransactionsTableError.write(v1, into: &buf)
            
        
        case let .HistoricalPrice(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeHistoricalPriceTableError.write(v1, into: &buf)
            
        
        case let .Serialization(v1):
            writeInt(&buf, Int32(9))
            FfiConverterTypeSerdeError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabaseError_lift(_ buf: RustBuffer) throws -> DatabaseError {
    return try FfiConverterTypeDatabaseError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDatabaseError_lower(_ value: DatabaseError) -> RustBuffer {
    return FfiConverterTypeDatabaseError.lower(value)
}


extension DatabaseError: Equatable, Hashable {}




extension DatabaseError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum DescriptorError: Swift.Error {

    
    
    case InvalidDescriptor(String
    )
    case MissingKeys
    case TooManyKeys(UInt32
    )
    case InvalidDescriptorParse(String
    )
    case MissingDescriptor
    case MissingXpub
    case MissingDerivationPath
    case MissingScriptType
    case MissingFingerprint
    case InvalidXpub(String
    )
    case UnableToParseXpub(String
    )
    case NoXpubInDescriptor
    case SinglePubkeyNotSupported
    case MasterXpub
    case KeyExpressionError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDescriptorError: FfiConverterRustBuffer {
    typealias SwiftType = DescriptorError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DescriptorError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidDescriptor(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .MissingKeys
        case 3: return .TooManyKeys(
            try FfiConverterUInt32.read(from: &buf)
            )
        case 4: return .InvalidDescriptorParse(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .MissingDescriptor
        case 6: return .MissingXpub
        case 7: return .MissingDerivationPath
        case 8: return .MissingScriptType
        case 9: return .MissingFingerprint
        case 10: return .InvalidXpub(
            try FfiConverterString.read(from: &buf)
            )
        case 11: return .UnableToParseXpub(
            try FfiConverterString.read(from: &buf)
            )
        case 12: return .NoXpubInDescriptor
        case 13: return .SinglePubkeyNotSupported
        case 14: return .MasterXpub
        case 15: return .KeyExpressionError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DescriptorError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidDescriptor(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .MissingKeys:
            writeInt(&buf, Int32(2))
        
        
        case let .TooManyKeys(v1):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(v1, into: &buf)
            
        
        case let .InvalidDescriptorParse(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .MissingDescriptor:
            writeInt(&buf, Int32(5))
        
        
        case .MissingXpub:
            writeInt(&buf, Int32(6))
        
        
        case .MissingDerivationPath:
            writeInt(&buf, Int32(7))
        
        
        case .MissingScriptType:
            writeInt(&buf, Int32(8))
        
        
        case .MissingFingerprint:
            writeInt(&buf, Int32(9))
        
        
        case let .InvalidXpub(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .UnableToParseXpub(v1):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NoXpubInDescriptor:
            writeInt(&buf, Int32(12))
        
        
        case .SinglePubkeyNotSupported:
            writeInt(&buf, Int32(13))
        
        
        case .MasterXpub:
            writeInt(&buf, Int32(14))
        
        
        case let .KeyExpressionError(v1):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDescriptorError_lift(_ buf: RustBuffer) throws -> DescriptorError {
    return try FfiConverterTypeDescriptorError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDescriptorError_lower(_ value: DescriptorError) -> RustBuffer {
    return FfiConverterTypeDescriptorError.lower(value)
}


extension DescriptorError: Equatable, Hashable {}




extension DescriptorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum DiscoveryState {
    
    case single
    case startedJson(FoundJson
    )
    case startedMnemonic
    case foundAddressesFromJson([FoundAddress],FoundJson
    )
    case foundAddressesFromMnemonic([FoundAddress]
    )
    case noneFound
    case choseAdressType
}


#if compiler(>=6)
extension DiscoveryState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiscoveryState: FfiConverterRustBuffer {
    typealias SwiftType = DiscoveryState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoveryState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .single
        
        case 2: return .startedJson(try FfiConverterTypeFoundJson.read(from: &buf)
        )
        
        case 3: return .startedMnemonic
        
        case 4: return .foundAddressesFromJson(try FfiConverterSequenceTypeFoundAddress.read(from: &buf), try FfiConverterTypeFoundJson.read(from: &buf)
        )
        
        case 5: return .foundAddressesFromMnemonic(try FfiConverterSequenceTypeFoundAddress.read(from: &buf)
        )
        
        case 6: return .noneFound
        
        case 7: return .choseAdressType
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoveryState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .single:
            writeInt(&buf, Int32(1))
        
        
        case let .startedJson(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeFoundJson.write(v1, into: &buf)
            
        
        case .startedMnemonic:
            writeInt(&buf, Int32(3))
        
        
        case let .foundAddressesFromJson(v1,v2):
            writeInt(&buf, Int32(4))
            FfiConverterSequenceTypeFoundAddress.write(v1, into: &buf)
            FfiConverterTypeFoundJson.write(v2, into: &buf)
            
        
        case let .foundAddressesFromMnemonic(v1):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceTypeFoundAddress.write(v1, into: &buf)
            
        
        case .noneFound:
            writeInt(&buf, Int32(6))
        
        
        case .choseAdressType:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiscoveryState_lift(_ buf: RustBuffer) throws -> DiscoveryState {
    return try FfiConverterTypeDiscoveryState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiscoveryState_lower(_ value: DiscoveryState) -> RustBuffer {
    return FfiConverterTypeDiscoveryState.lower(value)
}







public enum FiatAmountError: Swift.Error {

    
    
    /**
     * Unable to convert to fiat amount, prices client unavailable {0}
     */
    case PricesUnavailable(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatAmountError: FfiConverterRustBuffer {
    typealias SwiftType = FiatAmountError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatAmountError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PricesUnavailable(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FiatAmountError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .PricesUnavailable(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatAmountError_lift(_ buf: RustBuffer) throws -> FiatAmountError {
    return try FfiConverterTypeFiatAmountError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatAmountError_lower(_ value: FiatAmountError) -> RustBuffer {
    return FfiConverterTypeFiatAmountError.lower(value)
}


extension FiatAmountError: Equatable, Hashable {}




extension FiatAmountError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FiatCurrency {
    
    case usd
    case cad
    case aud
    case eur
    case gbp
    case chf
    case jpy
}


#if compiler(>=6)
extension FiatCurrency: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatCurrency: FfiConverterRustBuffer {
    typealias SwiftType = FiatCurrency

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatCurrency {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .usd
        
        case 2: return .cad
        
        case 3: return .aud
        
        case 4: return .eur
        
        case 5: return .gbp
        
        case 6: return .chf
        
        case 7: return .jpy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FiatCurrency, into buf: inout [UInt8]) {
        switch value {
        
        
        case .usd:
            writeInt(&buf, Int32(1))
        
        
        case .cad:
            writeInt(&buf, Int32(2))
        
        
        case .aud:
            writeInt(&buf, Int32(3))
        
        
        case .eur:
            writeInt(&buf, Int32(4))
        
        
        case .gbp:
            writeInt(&buf, Int32(5))
        
        
        case .chf:
            writeInt(&buf, Int32(6))
        
        
        case .jpy:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatCurrency_lift(_ buf: RustBuffer) throws -> FiatCurrency {
    return try FfiConverterTypeFiatCurrency.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatCurrency_lower(_ value: FiatCurrency) -> RustBuffer {
    return FfiConverterTypeFiatCurrency.lower(value)
}


extension FiatCurrency: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FiatOrBtc {
    
    case btc
    case fiat
}


#if compiler(>=6)
extension FiatOrBtc: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFiatOrBtc: FfiConverterRustBuffer {
    typealias SwiftType = FiatOrBtc

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FiatOrBtc {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .btc
        
        case 2: return .fiat
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FiatOrBtc, into buf: inout [UInt8]) {
        switch value {
        
        
        case .btc:
            writeInt(&buf, Int32(1))
        
        
        case .fiat:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatOrBtc_lift(_ buf: RustBuffer) throws -> FiatOrBtc {
    return try FfiConverterTypeFiatOrBtc.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFiatOrBtc_lower(_ value: FiatOrBtc) -> RustBuffer {
    return FfiConverterTypeFiatOrBtc.lower(value)
}


extension FiatOrBtc: Equatable, Hashable {}







public enum FileHandlerError: Swift.Error {

    
    
    case FileNotFound
    case OpenFile(String
    )
    case ReadFile(String
    )
    case NotRecognizedFormat(MultiFormatError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFileHandlerError: FfiConverterRustBuffer {
    typealias SwiftType = FileHandlerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileHandlerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FileNotFound
        case 2: return .OpenFile(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ReadFile(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .NotRecognizedFormat(
            try FfiConverterTypeMultiFormatError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FileHandlerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .FileNotFound:
            writeInt(&buf, Int32(1))
        
        
        case let .OpenFile(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ReadFile(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .NotRecognizedFormat(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeMultiFormatError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFileHandlerError_lift(_ buf: RustBuffer) throws -> FileHandlerError {
    return try FfiConverterTypeFileHandlerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFileHandlerError_lower(_ value: FileHandlerError) -> RustBuffer {
    return FfiConverterTypeFileHandlerError.lower(value)
}


extension FileHandlerError: Equatable, Hashable {}




extension FileHandlerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum FingerprintError: Swift.Error {

    
    
    case WalletNotFound
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFingerprintError: FfiConverterRustBuffer {
    typealias SwiftType = FingerprintError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FingerprintError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .WalletNotFound

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FingerprintError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .WalletNotFound:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFingerprintError_lift(_ buf: RustBuffer) throws -> FingerprintError {
    return try FfiConverterTypeFingerprintError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFingerprintError_lower(_ value: FingerprintError) -> RustBuffer {
    return FfiConverterTypeFingerprintError.lower(value)
}


extension FingerprintError: Equatable, Hashable {}




extension FingerprintError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum GlobalCacheTableError: Swift.Error {

    
    
    case Save(String
    )
    case Read(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalCacheTableError: FfiConverterRustBuffer {
    typealias SwiftType = GlobalCacheTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalCacheTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Read(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalCacheTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Save(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalCacheTableError_lift(_ buf: RustBuffer) throws -> GlobalCacheTableError {
    return try FfiConverterTypeGlobalCacheTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalCacheTableError_lower(_ value: GlobalCacheTableError) -> RustBuffer {
    return FfiConverterTypeGlobalCacheTableError.lower(value)
}


extension GlobalCacheTableError: Equatable, Hashable {}




extension GlobalCacheTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum GlobalConfigKey {
    
    case selectedWalletId
    case selectedNetwork
    case selectedFiatCurrency
    case selectedNode(Network
    )
    case colorScheme
    case authType
    case hashedPinCode
    case wipeDataPin
    case decoyPin
    case inDecoyMode
    case mainSelectedWalletId
    case decoySelectedWalletId
    case lockedAt
}


#if compiler(>=6)
extension GlobalConfigKey: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalConfigKey: FfiConverterRustBuffer {
    typealias SwiftType = GlobalConfigKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalConfigKey {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .selectedWalletId
        
        case 2: return .selectedNetwork
        
        case 3: return .selectedFiatCurrency
        
        case 4: return .selectedNode(try FfiConverterTypeNetwork.read(from: &buf)
        )
        
        case 5: return .colorScheme
        
        case 6: return .authType
        
        case 7: return .hashedPinCode
        
        case 8: return .wipeDataPin
        
        case 9: return .decoyPin
        
        case 10: return .inDecoyMode
        
        case 11: return .mainSelectedWalletId
        
        case 12: return .decoySelectedWalletId
        
        case 13: return .lockedAt
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalConfigKey, into buf: inout [UInt8]) {
        switch value {
        
        
        case .selectedWalletId:
            writeInt(&buf, Int32(1))
        
        
        case .selectedNetwork:
            writeInt(&buf, Int32(2))
        
        
        case .selectedFiatCurrency:
            writeInt(&buf, Int32(3))
        
        
        case let .selectedNode(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeNetwork.write(v1, into: &buf)
            
        
        case .colorScheme:
            writeInt(&buf, Int32(5))
        
        
        case .authType:
            writeInt(&buf, Int32(6))
        
        
        case .hashedPinCode:
            writeInt(&buf, Int32(7))
        
        
        case .wipeDataPin:
            writeInt(&buf, Int32(8))
        
        
        case .decoyPin:
            writeInt(&buf, Int32(9))
        
        
        case .inDecoyMode:
            writeInt(&buf, Int32(10))
        
        
        case .mainSelectedWalletId:
            writeInt(&buf, Int32(11))
        
        
        case .decoySelectedWalletId:
            writeInt(&buf, Int32(12))
        
        
        case .lockedAt:
            writeInt(&buf, Int32(13))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigKey_lift(_ buf: RustBuffer) throws -> GlobalConfigKey {
    return try FfiConverterTypeGlobalConfigKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigKey_lower(_ value: GlobalConfigKey) -> RustBuffer {
    return FfiConverterTypeGlobalConfigKey.lower(value)
}


extension GlobalConfigKey: Equatable, Hashable {}







public enum GlobalConfigTableError: Swift.Error {

    
    
    case Save(String
    )
    case Read(String
    )
    case PinCodeMustBeHashed
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalConfigTableError: FfiConverterRustBuffer {
    typealias SwiftType = GlobalConfigTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalConfigTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Read(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .PinCodeMustBeHashed

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalConfigTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Save(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .PinCodeMustBeHashed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigTableError_lift(_ buf: RustBuffer) throws -> GlobalConfigTableError {
    return try FfiConverterTypeGlobalConfigTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalConfigTableError_lower(_ value: GlobalConfigTableError) -> RustBuffer {
    return FfiConverterTypeGlobalConfigTableError.lower(value)
}


extension GlobalConfigTableError: Equatable, Hashable {}




extension GlobalConfigTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum GlobalFlagKey {
    
    case completedOnboarding
}


#if compiler(>=6)
extension GlobalFlagKey: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalFlagKey: FfiConverterRustBuffer {
    typealias SwiftType = GlobalFlagKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalFlagKey {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .completedOnboarding
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalFlagKey, into buf: inout [UInt8]) {
        switch value {
        
        
        case .completedOnboarding:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagKey_lift(_ buf: RustBuffer) throws -> GlobalFlagKey {
    return try FfiConverterTypeGlobalFlagKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagKey_lower(_ value: GlobalFlagKey) -> RustBuffer {
    return FfiConverterTypeGlobalFlagKey.lower(value)
}


extension GlobalFlagKey: Equatable, Hashable {}







public enum GlobalFlagTableError: Swift.Error {

    
    
    case Save(String
    )
    case Read(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGlobalFlagTableError: FfiConverterRustBuffer {
    typealias SwiftType = GlobalFlagTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalFlagTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Read(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalFlagTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Save(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagTableError_lift(_ buf: RustBuffer) throws -> GlobalFlagTableError {
    return try FfiConverterTypeGlobalFlagTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGlobalFlagTableError_lower(_ value: GlobalFlagTableError) -> RustBuffer {
    return FfiConverterTypeGlobalFlagTableError.lower(value)
}


extension GlobalFlagTableError: Equatable, Hashable {}




extension GlobalFlagTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum HardwareWalletMetadata {
    
    case tapSigner(TapSigner
    )
}


#if compiler(>=6)
extension HardwareWalletMetadata: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHardwareWalletMetadata: FfiConverterRustBuffer {
    typealias SwiftType = HardwareWalletMetadata

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HardwareWalletMetadata {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .tapSigner(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HardwareWalletMetadata, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .tapSigner(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHardwareWalletMetadata_lift(_ buf: RustBuffer) throws -> HardwareWalletMetadata {
    return try FfiConverterTypeHardwareWalletMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHardwareWalletMetadata_lower(_ value: HardwareWalletMetadata) -> RustBuffer {
    return FfiConverterTypeHardwareWalletMetadata.lower(value)
}







/**
 * Error type for HistoricalPriceRecord
 */
public enum HistoricalPriceRecordError: Swift.Error {

    
    
    case ConversionError(ByteReaderError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHistoricalPriceRecordError: FfiConverterRustBuffer {
    typealias SwiftType = HistoricalPriceRecordError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HistoricalPriceRecordError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ConversionError(
            try FfiConverterTypeByteReaderError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HistoricalPriceRecordError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ConversionError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeByteReaderError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceRecordError_lift(_ buf: RustBuffer) throws -> HistoricalPriceRecordError {
    return try FfiConverterTypeHistoricalPriceRecordError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceRecordError_lower(_ value: HistoricalPriceRecordError) -> RustBuffer {
    return FfiConverterTypeHistoricalPriceRecordError.lower(value)
}


extension HistoricalPriceRecordError: Equatable, Hashable {}




extension HistoricalPriceRecordError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum HistoricalPriceTableError: Swift.Error {

    
    
    case Save(String
    )
    case Read(String
    )
    case NoRecordFound
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHistoricalPriceTableError: FfiConverterRustBuffer {
    typealias SwiftType = HistoricalPriceTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HistoricalPriceTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Read(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .NoRecordFound

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HistoricalPriceTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Save(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NoRecordFound:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceTableError_lift(_ buf: RustBuffer) throws -> HistoricalPriceTableError {
    return try FfiConverterTypeHistoricalPriceTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHistoricalPriceTableError_lower(_ value: HistoricalPriceTableError) -> RustBuffer {
    return FfiConverterTypeHistoricalPriceTableError.lower(value)
}


extension HistoricalPriceTableError: Equatable, Hashable {}




extension HistoricalPriceTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum HotWalletRoute {
    
    case select
    case create(NumberOfBip39Words
    )
    case `import`(NumberOfBip39Words,ImportType
    )
    case verifyWords(WalletId
    )
}


#if compiler(>=6)
extension HotWalletRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHotWalletRoute: FfiConverterRustBuffer {
    typealias SwiftType = HotWalletRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HotWalletRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .select
        
        case 2: return .create(try FfiConverterTypeNumberOfBip39Words.read(from: &buf)
        )
        
        case 3: return .`import`(try FfiConverterTypeNumberOfBip39Words.read(from: &buf), try FfiConverterTypeImportType.read(from: &buf)
        )
        
        case 4: return .verifyWords(try FfiConverterTypeWalletId.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HotWalletRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case .select:
            writeInt(&buf, Int32(1))
        
        
        case let .create(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNumberOfBip39Words.write(v1, into: &buf)
            
        
        case let .`import`(v1,v2):
            writeInt(&buf, Int32(3))
            FfiConverterTypeNumberOfBip39Words.write(v1, into: &buf)
            FfiConverterTypeImportType.write(v2, into: &buf)
            
        
        case let .verifyWords(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHotWalletRoute_lift(_ buf: RustBuffer) throws -> HotWalletRoute {
    return try FfiConverterTypeHotWalletRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHotWalletRoute_lower(_ value: HotWalletRoute) -> RustBuffer {
    return FfiConverterTypeHotWalletRoute.lower(value)
}


extension HotWalletRoute: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ImportType {
    
    case manual
    case nfc
    case qr
}


#if compiler(>=6)
extension ImportType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportType: FfiConverterRustBuffer {
    typealias SwiftType = ImportType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .manual
        
        case 2: return .nfc
        
        case 3: return .qr
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ImportType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .manual:
            writeInt(&buf, Int32(1))
        
        
        case .nfc:
            writeInt(&buf, Int32(2))
        
        
        case .qr:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportType_lift(_ buf: RustBuffer) throws -> ImportType {
    return try FfiConverterTypeImportType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportType_lower(_ value: ImportType) -> RustBuffer {
    return FfiConverterTypeImportType.lower(value)
}


extension ImportType: Equatable, Hashable {}







public enum ImportWalletError: Swift.Error {

    
    
    case WalletImportError(String
    )
    case InvalidWordGroup(String
    )
    case KeychainError(KeychainError
    )
    case WalletAlreadyExists(WalletId
    )
    case DatabaseError(DatabaseError
    )
    case BdkError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportWalletError: FfiConverterRustBuffer {
    typealias SwiftType = ImportWalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportWalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .WalletImportError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidWordGroup(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .KeychainError(
            try FfiConverterTypeKeychainError.read(from: &buf)
            )
        case 4: return .WalletAlreadyExists(
            try FfiConverterTypeWalletId.read(from: &buf)
            )
        case 5: return .DatabaseError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 6: return .BdkError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ImportWalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .WalletImportError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .InvalidWordGroup(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .KeychainError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeKeychainError.write(v1, into: &buf)
            
        
        case let .WalletAlreadyExists(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        
        case let .DatabaseError(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .BdkError(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletError_lift(_ buf: RustBuffer) throws -> ImportWalletError {
    return try FfiConverterTypeImportWalletError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletError_lower(_ value: ImportWalletError) -> RustBuffer {
    return FfiConverterTypeImportWalletError.lower(value)
}


extension ImportWalletError: Equatable, Hashable {}




extension ImportWalletError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ImportWalletManagerAction {
    
    case noOp
}


#if compiler(>=6)
extension ImportWalletManagerAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportWalletManagerAction: FfiConverterRustBuffer {
    typealias SwiftType = ImportWalletManagerAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportWalletManagerAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .noOp
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ImportWalletManagerAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case .noOp:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerAction_lift(_ buf: RustBuffer) throws -> ImportWalletManagerAction {
    return try FfiConverterTypeImportWalletManagerAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerAction_lower(_ value: ImportWalletManagerAction) -> RustBuffer {
    return FfiConverterTypeImportWalletManagerAction.lower(value)
}


extension ImportWalletManagerAction: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ImportWalletManagerReconcileMessage {
    
    case noOp
}


#if compiler(>=6)
extension ImportWalletManagerReconcileMessage: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportWalletManagerReconcileMessage: FfiConverterRustBuffer {
    typealias SwiftType = ImportWalletManagerReconcileMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportWalletManagerReconcileMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .noOp
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ImportWalletManagerReconcileMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case .noOp:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerReconcileMessage_lift(_ buf: RustBuffer) throws -> ImportWalletManagerReconcileMessage {
    return try FfiConverterTypeImportWalletManagerReconcileMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportWalletManagerReconcileMessage_lower(_ value: ImportWalletManagerReconcileMessage) -> RustBuffer {
    return FfiConverterTypeImportWalletManagerReconcileMessage.lower(value)
}


extension ImportWalletManagerReconcileMessage: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum InsertOrUpdate {
    
    case insert(Timestamp
    )
    case update(Timestamp
    )
}


#if compiler(>=6)
extension InsertOrUpdate: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInsertOrUpdate: FfiConverterRustBuffer {
    typealias SwiftType = InsertOrUpdate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InsertOrUpdate {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .insert(try FfiConverterTypeTimestamp.read(from: &buf)
        )
        
        case 2: return .update(try FfiConverterTypeTimestamp.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: InsertOrUpdate, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .insert(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTimestamp.write(v1, into: &buf)
            
        
        case let .update(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeTimestamp.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInsertOrUpdate_lift(_ buf: RustBuffer) throws -> InsertOrUpdate {
    return try FfiConverterTypeInsertOrUpdate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInsertOrUpdate_lower(_ value: InsertOrUpdate) -> RustBuffer {
    return FfiConverterTypeInsertOrUpdate.lower(value)
}


extension InsertOrUpdate: Equatable, Hashable {}







public enum LabelDbError: Swift.Error {

    
    
    case Database(DatabaseError
    )
    case UnsupportedLabelType(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLabelDbError: FfiConverterRustBuffer {
    typealias SwiftType = LabelDbError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LabelDbError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Database(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 2: return .UnsupportedLabelType(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LabelDbError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Database(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .UnsupportedLabelType(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelDbError_lift(_ buf: RustBuffer) throws -> LabelDbError {
    return try FfiConverterTypeLabelDbError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelDbError_lower(_ value: LabelDbError) -> RustBuffer {
    return FfiConverterTypeLabelDbError.lower(value)
}


extension LabelDbError: Equatable, Hashable {}




extension LabelDbError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum LabelManagerError: Swift.Error {

    
    
    case Parse(String
    )
    case Save(String
    )
    case Get(String
    )
    case Export(String
    )
    case GetInputRecords(String
    )
    case GetOutputRecords(String
    )
    case SaveInputLabels(String
    )
    case SaveOutputLabels(String
    )
    case DeleteLabels(String
    )
    case SaveAddressLabels(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLabelManagerError: FfiConverterRustBuffer {
    typealias SwiftType = LabelManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LabelManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Parse(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Get(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .Export(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .GetInputRecords(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .GetOutputRecords(
            try FfiConverterString.read(from: &buf)
            )
        case 7: return .SaveInputLabels(
            try FfiConverterString.read(from: &buf)
            )
        case 8: return .SaveOutputLabels(
            try FfiConverterString.read(from: &buf)
            )
        case 9: return .DeleteLabels(
            try FfiConverterString.read(from: &buf)
            )
        case 10: return .SaveAddressLabels(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LabelManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Parse(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Save(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Get(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Export(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .GetInputRecords(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .GetOutputRecords(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SaveInputLabels(v1):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SaveOutputLabels(v1):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .DeleteLabels(v1):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SaveAddressLabels(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelManagerError_lift(_ buf: RustBuffer) throws -> LabelManagerError {
    return try FfiConverterTypeLabelManagerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLabelManagerError_lower(_ value: LabelManagerError) -> RustBuffer {
    return FfiConverterTypeLabelManagerError.lower(value)
}


extension LabelManagerError: Equatable, Hashable {}




extension LabelManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum MnemonicError: Swift.Error {

    
    
    case GetWalletKeychain(KeychainError
    )
    case NotAvailable(WalletId
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMnemonicError: FfiConverterRustBuffer {
    typealias SwiftType = MnemonicError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MnemonicError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .GetWalletKeychain(
            try FfiConverterTypeKeychainError.read(from: &buf)
            )
        case 2: return .NotAvailable(
            try FfiConverterTypeWalletId.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MnemonicError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .GetWalletKeychain(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeKeychainError.write(v1, into: &buf)
            
        
        case let .NotAvailable(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonicError_lift(_ buf: RustBuffer) throws -> MnemonicError {
    return try FfiConverterTypeMnemonicError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonicError_lower(_ value: MnemonicError) -> RustBuffer {
    return FfiConverterTypeMnemonicError.lower(value)
}


extension MnemonicError: Equatable, Hashable {}




extension MnemonicError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum MnemonicParseError: Swift.Error {

    
    
    case InvalidMnemonic(String,String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMnemonicParseError: FfiConverterRustBuffer {
    typealias SwiftType = MnemonicParseError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MnemonicParseError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidMnemonic(
            try FfiConverterString.read(from: &buf), 
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MnemonicParseError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidMnemonic(v1,v2):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            FfiConverterString.write(v2, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonicParseError_lift(_ buf: RustBuffer) throws -> MnemonicParseError {
    return try FfiConverterTypeMnemonicParseError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMnemonicParseError_lower(_ value: MnemonicParseError) -> RustBuffer {
    return FfiConverterTypeMnemonicParseError.lower(value)
}


extension MnemonicParseError: Equatable, Hashable {}




extension MnemonicParseError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum MultiFormat {
    
    case address(AddressWithNetwork
    )
    case hardwareExport(HardwareExport
    )
    case mnemonic(Mnemonic
    )
    case transaction(BitcoinTransaction
    )
    case bip329Labels(Bip329Labels
    )
    /**
     * TAPSIGNER has not been initialized yet
     */
    case tapSigner(TapSigner
    )
    /**
     * TAPSIGNER has not been initialized yet
     */
    case tapSignerInit(TapSigner
    )
}


#if compiler(>=6)
extension MultiFormat: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiFormat: FfiConverterRustBuffer {
    typealias SwiftType = MultiFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .address(try FfiConverterTypeAddressWithNetwork.read(from: &buf)
        )
        
        case 2: return .hardwareExport(try FfiConverterTypeHardwareExport.read(from: &buf)
        )
        
        case 3: return .mnemonic(try FfiConverterTypeMnemonic.read(from: &buf)
        )
        
        case 4: return .transaction(try FfiConverterTypeBitcoinTransaction.read(from: &buf)
        )
        
        case 5: return .bip329Labels(try FfiConverterTypeBip329Labels.read(from: &buf)
        )
        
        case 6: return .tapSigner(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        case 7: return .tapSignerInit(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MultiFormat, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .address(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeAddressWithNetwork.write(v1, into: &buf)
            
        
        case let .hardwareExport(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeHardwareExport.write(v1, into: &buf)
            
        
        case let .mnemonic(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeMnemonic.write(v1, into: &buf)
            
        
        case let .transaction(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeBitcoinTransaction.write(v1, into: &buf)
            
        
        case let .bip329Labels(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeBip329Labels.write(v1, into: &buf)
            
        
        case let .tapSigner(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        
        case let .tapSignerInit(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiFormat_lift(_ buf: RustBuffer) throws -> MultiFormat {
    return try FfiConverterTypeMultiFormat.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiFormat_lower(_ value: MultiFormat) -> RustBuffer {
    return FfiConverterTypeMultiFormat.lower(value)
}







public enum MultiFormatError: Swift.Error {

    
    
    case InvalidSeedQr(SeedQrError
    )
    case UnsupportedNetworkAddress
    case UnrecognizedFormat
    case UrFormatNotSupported
    case InvalidTapSigner(TapCardParseError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiFormatError: FfiConverterRustBuffer {
    typealias SwiftType = MultiFormatError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiFormatError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidSeedQr(
            try FfiConverterTypeSeedQrError.read(from: &buf)
            )
        case 2: return .UnsupportedNetworkAddress
        case 3: return .UnrecognizedFormat
        case 4: return .UrFormatNotSupported
        case 5: return .InvalidTapSigner(
            try FfiConverterTypeTapCardParseError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MultiFormatError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidSeedQr(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSeedQrError.write(v1, into: &buf)
            
        
        case .UnsupportedNetworkAddress:
            writeInt(&buf, Int32(2))
        
        
        case .UnrecognizedFormat:
            writeInt(&buf, Int32(3))
        
        
        case .UrFormatNotSupported:
            writeInt(&buf, Int32(4))
        
        
        case let .InvalidTapSigner(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeTapCardParseError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiFormatError_lift(_ buf: RustBuffer) throws -> MultiFormatError {
    return try FfiConverterTypeMultiFormatError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiFormatError_lower(_ value: MultiFormatError) -> RustBuffer {
    return FfiConverterTypeMultiFormatError.lower(value)
}


extension MultiFormatError: Equatable, Hashable {}




extension MultiFormatError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum MultiQrError: Swift.Error {

    
    
    case CannotAddPartToSingleQr
    case CannotAddPartToSeedQr
    case ParseError(String
    )
    case InvalidUtf8
    case NotYetAvailable
    case CannotAddBinaryDataToBbqr
    case BbqrDidNotContainSeedWords(String
    )
    case InvalidSeedQr(SeedQrError
    )
    case InvalidPlainTextQr(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiQrError: FfiConverterRustBuffer {
    typealias SwiftType = MultiQrError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiQrError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .CannotAddPartToSingleQr
        case 2: return .CannotAddPartToSeedQr
        case 3: return .ParseError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidUtf8
        case 5: return .NotYetAvailable
        case 6: return .CannotAddBinaryDataToBbqr
        case 7: return .BbqrDidNotContainSeedWords(
            try FfiConverterString.read(from: &buf)
            )
        case 8: return .InvalidSeedQr(
            try FfiConverterTypeSeedQrError.read(from: &buf)
            )
        case 9: return .InvalidPlainTextQr(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MultiQrError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .CannotAddPartToSingleQr:
            writeInt(&buf, Int32(1))
        
        
        case .CannotAddPartToSeedQr:
            writeInt(&buf, Int32(2))
        
        
        case let .ParseError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .InvalidUtf8:
            writeInt(&buf, Int32(4))
        
        
        case .NotYetAvailable:
            writeInt(&buf, Int32(5))
        
        
        case .CannotAddBinaryDataToBbqr:
            writeInt(&buf, Int32(6))
        
        
        case let .BbqrDidNotContainSeedWords(v1):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .InvalidSeedQr(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeSeedQrError.write(v1, into: &buf)
            
        
        case let .InvalidPlainTextQr(v1):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQrError_lift(_ buf: RustBuffer) throws -> MultiQrError {
    return try FfiConverterTypeMultiQrError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQrError_lower(_ value: MultiQrError) -> RustBuffer {
    return FfiConverterTypeMultiQrError.lower(value)
}


extension MultiQrError: Equatable, Hashable {}




extension MultiQrError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum MultiQrScanResult {
    
    case seedQr(SeedQr
    )
    case single(String
    )
    case completedBBqr(BbqrJoined
    )
    case inProgressBBqr(UInt32
    )
}


#if compiler(>=6)
extension MultiQrScanResult: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMultiQrScanResult: FfiConverterRustBuffer {
    typealias SwiftType = MultiQrScanResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultiQrScanResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .seedQr(try FfiConverterTypeSeedQr.read(from: &buf)
        )
        
        case 2: return .single(try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .completedBBqr(try FfiConverterTypeBbqrJoined.read(from: &buf)
        )
        
        case 4: return .inProgressBBqr(try FfiConverterUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MultiQrScanResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .seedQr(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSeedQr.write(v1, into: &buf)
            
        
        case let .single(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .completedBBqr(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeBbqrJoined.write(v1, into: &buf)
            
        
        case let .inProgressBBqr(v1):
            writeInt(&buf, Int32(4))
            FfiConverterUInt32.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQrScanResult_lift(_ buf: RustBuffer) throws -> MultiQrScanResult {
    return try FfiConverterTypeMultiQrScanResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMultiQrScanResult_lower(_ value: MultiQrScanResult) -> RustBuffer {
    return FfiConverterTypeMultiQrScanResult.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NewWalletRoute {
    
    case select
    case hotWallet(HotWalletRoute
    )
    case coldWallet(ColdWalletRoute
    )
}


#if compiler(>=6)
extension NewWalletRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNewWalletRoute: FfiConverterRustBuffer {
    typealias SwiftType = NewWalletRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NewWalletRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .select
        
        case 2: return .hotWallet(try FfiConverterTypeHotWalletRoute.read(from: &buf)
        )
        
        case 3: return .coldWallet(try FfiConverterTypeColdWalletRoute.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NewWalletRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case .select:
            writeInt(&buf, Int32(1))
        
        
        case let .hotWallet(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeHotWalletRoute.write(v1, into: &buf)
            
        
        case let .coldWallet(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeColdWalletRoute.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNewWalletRoute_lift(_ buf: RustBuffer) throws -> NewWalletRoute {
    return try FfiConverterTypeNewWalletRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNewWalletRoute_lower(_ value: NewWalletRoute) -> RustBuffer {
    return FfiConverterTypeNewWalletRoute.lower(value)
}


extension NewWalletRoute: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NodeSelection {
    
    case preset(Node
    )
    case custom(Node
    )
}


#if compiler(>=6)
extension NodeSelection: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeSelection: FfiConverterRustBuffer {
    typealias SwiftType = NodeSelection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeSelection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .preset(try FfiConverterTypeNode.read(from: &buf)
        )
        
        case 2: return .custom(try FfiConverterTypeNode.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NodeSelection, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .preset(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNode.write(v1, into: &buf)
            
        
        case let .custom(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNode.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelection_lift(_ buf: RustBuffer) throws -> NodeSelection {
    return try FfiConverterTypeNodeSelection.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelection_lower(_ value: NodeSelection) -> RustBuffer {
    return FfiConverterTypeNodeSelection.lower(value)
}


extension NodeSelection: Equatable, Hashable {}







public enum NodeSelectorError: Swift.Error {

    
    
    case NodeNotFound(String
    )
    case SetSelectedNodeError(String
    )
    case NodeAccessError(String
    )
    case ParseNodeUrlError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeSelectorError: FfiConverterRustBuffer {
    typealias SwiftType = NodeSelectorError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeSelectorError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NodeNotFound(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .SetSelectedNodeError(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .NodeAccessError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .ParseNodeUrlError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NodeSelectorError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .NodeNotFound(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SetSelectedNodeError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .NodeAccessError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ParseNodeUrlError(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelectorError_lift(_ buf: RustBuffer) throws -> NodeSelectorError {
    return try FfiConverterTypeNodeSelectorError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeSelectorError_lower(_ value: NodeSelectorError) -> RustBuffer {
    return FfiConverterTypeNodeSelectorError.lower(value)
}


extension NodeSelectorError: Equatable, Hashable {}




extension NodeSelectorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NumberOfBip39Words {
    
    case twelve
    case twentyFour
}


#if compiler(>=6)
extension NumberOfBip39Words: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNumberOfBip39Words: FfiConverterRustBuffer {
    typealias SwiftType = NumberOfBip39Words

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NumberOfBip39Words {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .twelve
        
        case 2: return .twentyFour
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NumberOfBip39Words, into buf: inout [UInt8]) {
        switch value {
        
        
        case .twelve:
            writeInt(&buf, Int32(1))
        
        
        case .twentyFour:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNumberOfBip39Words_lift(_ buf: RustBuffer) throws -> NumberOfBip39Words {
    return try FfiConverterTypeNumberOfBip39Words.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNumberOfBip39Words_lower(_ value: NumberOfBip39Words) -> RustBuffer {
    return FfiConverterTypeNumberOfBip39Words.lower(value)
}


extension NumberOfBip39Words: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PendingOrConfirmed {
    
    case pending(PendingDetails
    )
    case confirmed(ConfirmedDetails
    )
}


#if compiler(>=6)
extension PendingOrConfirmed: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingOrConfirmed: FfiConverterRustBuffer {
    typealias SwiftType = PendingOrConfirmed

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingOrConfirmed {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending(try FfiConverterTypePendingDetails.read(from: &buf)
        )
        
        case 2: return .confirmed(try FfiConverterTypeConfirmedDetails.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PendingOrConfirmed, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .pending(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypePendingDetails.write(v1, into: &buf)
            
        
        case let .confirmed(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeConfirmedDetails.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingOrConfirmed_lift(_ buf: RustBuffer) throws -> PendingOrConfirmed {
    return try FfiConverterTypePendingOrConfirmed.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingOrConfirmed_lower(_ value: PendingOrConfirmed) -> RustBuffer {
    return FfiConverterTypePendingOrConfirmed.lower(value)
}


extension PendingOrConfirmed: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PendingWalletManagerAction {
    
    case updateWords(NumberOfBip39Words
    )
}


#if compiler(>=6)
extension PendingWalletManagerAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingWalletManagerAction: FfiConverterRustBuffer {
    typealias SwiftType = PendingWalletManagerAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingWalletManagerAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .updateWords(try FfiConverterTypeNumberOfBip39Words.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PendingWalletManagerAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .updateWords(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNumberOfBip39Words.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerAction_lift(_ buf: RustBuffer) throws -> PendingWalletManagerAction {
    return try FfiConverterTypePendingWalletManagerAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerAction_lower(_ value: PendingWalletManagerAction) -> RustBuffer {
    return FfiConverterTypePendingWalletManagerAction.lower(value)
}


extension PendingWalletManagerAction: Equatable, Hashable {}







public enum PendingWalletManagerError: Swift.Error {

    
    
    case BdkError(String
    )
    case WalletCreationError(WalletCreationError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingWalletManagerError: FfiConverterRustBuffer {
    typealias SwiftType = PendingWalletManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingWalletManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BdkError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .WalletCreationError(
            try FfiConverterTypeWalletCreationError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PendingWalletManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .BdkError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .WalletCreationError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletCreationError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerError_lift(_ buf: RustBuffer) throws -> PendingWalletManagerError {
    return try FfiConverterTypePendingWalletManagerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerError_lower(_ value: PendingWalletManagerError) -> RustBuffer {
    return FfiConverterTypePendingWalletManagerError.lower(value)
}


extension PendingWalletManagerError: Equatable, Hashable {}




extension PendingWalletManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PendingWalletManagerReconcileMessage {
    
    case words(NumberOfBip39Words
    )
}


#if compiler(>=6)
extension PendingWalletManagerReconcileMessage: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePendingWalletManagerReconcileMessage: FfiConverterRustBuffer {
    typealias SwiftType = PendingWalletManagerReconcileMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PendingWalletManagerReconcileMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .words(try FfiConverterTypeNumberOfBip39Words.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PendingWalletManagerReconcileMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .words(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNumberOfBip39Words.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerReconcileMessage_lift(_ buf: RustBuffer) throws -> PendingWalletManagerReconcileMessage {
    return try FfiConverterTypePendingWalletManagerReconcileMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePendingWalletManagerReconcileMessage_lower(_ value: PendingWalletManagerReconcileMessage) -> RustBuffer {
    return FfiConverterTypePendingWalletManagerReconcileMessage.lower(value)
}


extension PendingWalletManagerReconcileMessage: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Route {
    
    case loadAndReset(resetTo: [BoxedRoute], afterMillis: UInt32
    )
    case listWallets
    case selectedWallet(WalletId
    )
    case newWallet(NewWalletRoute
    )
    case settings(SettingsRoute
    )
    case secretWords(WalletId
    )
    case transactionDetails(id: WalletId, details: TransactionDetails
    )
    case send(SendRoute
    )
}


#if compiler(>=6)
extension Route: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = Route

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Route {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .loadAndReset(resetTo: try FfiConverterSequenceTypeBoxedRoute.read(from: &buf), afterMillis: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 2: return .listWallets
        
        case 3: return .selectedWallet(try FfiConverterTypeWalletId.read(from: &buf)
        )
        
        case 4: return .newWallet(try FfiConverterTypeNewWalletRoute.read(from: &buf)
        )
        
        case 5: return .settings(try FfiConverterTypeSettingsRoute.read(from: &buf)
        )
        
        case 6: return .secretWords(try FfiConverterTypeWalletId.read(from: &buf)
        )
        
        case 7: return .transactionDetails(id: try FfiConverterTypeWalletId.read(from: &buf), details: try FfiConverterTypeTransactionDetails.read(from: &buf)
        )
        
        case 8: return .send(try FfiConverterTypeSendRoute.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Route, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .loadAndReset(resetTo,afterMillis):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeBoxedRoute.write(resetTo, into: &buf)
            FfiConverterUInt32.write(afterMillis, into: &buf)
            
        
        case .listWallets:
            writeInt(&buf, Int32(2))
        
        
        case let .selectedWallet(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        
        case let .newWallet(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeNewWalletRoute.write(v1, into: &buf)
            
        
        case let .settings(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeSettingsRoute.write(v1, into: &buf)
            
        
        case let .secretWords(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        
        case let .transactionDetails(id,details):
            writeInt(&buf, Int32(7))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterTypeTransactionDetails.write(details, into: &buf)
            
        
        case let .send(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeSendRoute.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoute_lift(_ buf: RustBuffer) throws -> Route {
    return try FfiConverterTypeRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoute_lower(_ value: Route) -> RustBuffer {
    return FfiConverterTypeRoute.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ScanState {
    
    case notStarted
    case scanning(ScanningInfo
    )
    case completed
}


#if compiler(>=6)
extension ScanState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeScanState: FfiConverterRustBuffer {
    typealias SwiftType = ScanState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScanState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .notStarted
        
        case 2: return .scanning(try FfiConverterTypeScanningInfo.read(from: &buf)
        )
        
        case 3: return .completed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ScanState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .notStarted:
            writeInt(&buf, Int32(1))
        
        
        case let .scanning(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeScanningInfo.write(v1, into: &buf)
            
        
        case .completed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScanState_lift(_ buf: RustBuffer) throws -> ScanState {
    return try FfiConverterTypeScanState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScanState_lower(_ value: ScanState) -> RustBuffer {
    return FfiConverterTypeScanState.lower(value)
}


extension ScanState: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ScannerResponse {
    
    case foundAddresses([FoundAddress]
    )
    case noneFound
}


#if compiler(>=6)
extension ScannerResponse: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeScannerResponse: FfiConverterRustBuffer {
    typealias SwiftType = ScannerResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScannerResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .foundAddresses(try FfiConverterSequenceTypeFoundAddress.read(from: &buf)
        )
        
        case 2: return .noneFound
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ScannerResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .foundAddresses(v1):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeFoundAddress.write(v1, into: &buf)
            
        
        case .noneFound:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScannerResponse_lift(_ buf: RustBuffer) throws -> ScannerResponse {
    return try FfiConverterTypeScannerResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeScannerResponse_lower(_ value: ScannerResponse) -> RustBuffer {
    return FfiConverterTypeScannerResponse.lower(value)
}


extension ScannerResponse: Equatable, Hashable {}







public enum SeedQrError: Swift.Error {

    
    
    case ContainsNonNumericChars
    case IndexOutOfBounds(UInt16
    )
    case IncorrectWordLength(UInt16
    )
    case InvalidMnemonic(Bip39Error
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSeedQrError: FfiConverterRustBuffer {
    typealias SwiftType = SeedQrError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SeedQrError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ContainsNonNumericChars
        case 2: return .IndexOutOfBounds(
            try FfiConverterUInt16.read(from: &buf)
            )
        case 3: return .IncorrectWordLength(
            try FfiConverterUInt16.read(from: &buf)
            )
        case 4: return .InvalidMnemonic(
            try FfiConverterTypeBip39Error.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SeedQrError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .ContainsNonNumericChars:
            writeInt(&buf, Int32(1))
        
        
        case let .IndexOutOfBounds(v1):
            writeInt(&buf, Int32(2))
            FfiConverterUInt16.write(v1, into: &buf)
            
        
        case let .IncorrectWordLength(v1):
            writeInt(&buf, Int32(3))
            FfiConverterUInt16.write(v1, into: &buf)
            
        
        case let .InvalidMnemonic(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeBip39Error.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSeedQrError_lift(_ buf: RustBuffer) throws -> SeedQrError {
    return try FfiConverterTypeSeedQrError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSeedQrError_lower(_ value: SeedQrError) -> RustBuffer {
    return FfiConverterTypeSeedQrError.lower(value)
}


extension SeedQrError: Equatable, Hashable {}




extension SeedQrError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SendFlowErrorAlert {
    
    case signAndBroadcast(String
    )
    case confirmDetails(String
    )
}


#if compiler(>=6)
extension SendFlowErrorAlert: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendFlowErrorAlert: FfiConverterRustBuffer {
    typealias SwiftType = SendFlowErrorAlert

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendFlowErrorAlert {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .signAndBroadcast(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .confirmDetails(try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendFlowErrorAlert, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .signAndBroadcast(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .confirmDetails(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowErrorAlert_lift(_ buf: RustBuffer) throws -> SendFlowErrorAlert {
    return try FfiConverterTypeSendFlowErrorAlert.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowErrorAlert_lower(_ value: SendFlowErrorAlert) -> RustBuffer {
    return FfiConverterTypeSendFlowErrorAlert.lower(value)
}


extension SendFlowErrorAlert: Equatable, Hashable {}







public enum SendFlowFiatOnChangeError: Swift.Error {

    
    
    case InvalidFiatAmount(error: String, input: String
    )
    case ConverterError(ConverterError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendFlowFiatOnChangeError: FfiConverterRustBuffer {
    typealias SwiftType = SendFlowFiatOnChangeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendFlowFiatOnChangeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidFiatAmount(
            error: try FfiConverterString.read(from: &buf), 
            input: try FfiConverterString.read(from: &buf)
            )
        case 2: return .ConverterError(
            try FfiConverterTypeConverterError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendFlowFiatOnChangeError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidFiatAmount(error,input):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            FfiConverterString.write(input, into: &buf)
            
        
        case let .ConverterError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeConverterError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeError_lift(_ buf: RustBuffer) throws -> SendFlowFiatOnChangeError {
    return try FfiConverterTypeSendFlowFiatOnChangeError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendFlowFiatOnChangeError_lower(_ value: SendFlowFiatOnChangeError) -> RustBuffer {
    return FfiConverterTypeSendFlowFiatOnChangeError.lower(value)
}


extension SendFlowFiatOnChangeError: Equatable, Hashable {}




extension SendFlowFiatOnChangeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SendRoute {
    
    case setAmount(id: WalletId, address: Address?, amount: Amount?
    )
    case hardwareExport(id: WalletId, details: ConfirmDetails
    )
    case confirm(SendRouteConfirmArgs
    )
}


#if compiler(>=6)
extension SendRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendRoute: FfiConverterRustBuffer {
    typealias SwiftType = SendRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .setAmount(id: try FfiConverterTypeWalletId.read(from: &buf), address: try FfiConverterOptionTypeAddress.read(from: &buf), amount: try FfiConverterOptionTypeAmount.read(from: &buf)
        )
        
        case 2: return .hardwareExport(id: try FfiConverterTypeWalletId.read(from: &buf), details: try FfiConverterTypeConfirmDetails.read(from: &buf)
        )
        
        case 3: return .confirm(try FfiConverterTypeSendRouteConfirmArgs.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .setAmount(id,address,amount):
            writeInt(&buf, Int32(1))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterOptionTypeAddress.write(address, into: &buf)
            FfiConverterOptionTypeAmount.write(amount, into: &buf)
            
        
        case let .hardwareExport(id,details):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterTypeConfirmDetails.write(details, into: &buf)
            
        
        case let .confirm(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeSendRouteConfirmArgs.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendRoute_lift(_ buf: RustBuffer) throws -> SendRoute {
    return try FfiConverterTypeSendRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSendRoute_lower(_ value: SendRoute) -> RustBuffer {
    return FfiConverterTypeSendRoute.lower(value)
}







public enum SerdeError: Swift.Error {

    
    
    case SerializationError(String
    )
    case DeserializationError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSerdeError: FfiConverterRustBuffer {
    typealias SwiftType = SerdeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SerdeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .SerializationError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .DeserializationError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SerdeError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .SerializationError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .DeserializationError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeError_lift(_ buf: RustBuffer) throws -> SerdeError {
    return try FfiConverterTypeSerdeError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSerdeError_lower(_ value: SerdeError) -> RustBuffer {
    return FfiConverterTypeSerdeError.lower(value)
}


extension SerdeError: Equatable, Hashable {}




extension SerdeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SettingsRoute {
    
    case main
    case network
    case appearance
    case node
    case fiatCurrency
    case wallet(id: WalletId, route: WalletSettingsRoute
    )
    case allWallets
}


#if compiler(>=6)
extension SettingsRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSettingsRoute: FfiConverterRustBuffer {
    typealias SwiftType = SettingsRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SettingsRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .main
        
        case 2: return .network
        
        case 3: return .appearance
        
        case 4: return .node
        
        case 5: return .fiatCurrency
        
        case 6: return .wallet(id: try FfiConverterTypeWalletId.read(from: &buf), route: try FfiConverterTypeWalletSettingsRoute.read(from: &buf)
        )
        
        case 7: return .allWallets
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SettingsRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case .main:
            writeInt(&buf, Int32(1))
        
        
        case .network:
            writeInt(&buf, Int32(2))
        
        
        case .appearance:
            writeInt(&buf, Int32(3))
        
        
        case .node:
            writeInt(&buf, Int32(4))
        
        
        case .fiatCurrency:
            writeInt(&buf, Int32(5))
        
        
        case let .wallet(id,route):
            writeInt(&buf, Int32(6))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterTypeWalletSettingsRoute.write(route, into: &buf)
            
        
        case .allWallets:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSettingsRoute_lift(_ buf: RustBuffer) throws -> SettingsRoute {
    return try FfiConverterTypeSettingsRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSettingsRoute_lower(_ value: SettingsRoute) -> RustBuffer {
    return FfiConverterTypeSettingsRoute.lower(value)
}


extension SettingsRoute: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SetupCmdResponse {
    
    case continueFromInit(ContinueFromInit
    )
    case continueFromBackup(ContinueFromBackup
    )
    case continueFromDerive(ContinueFromDerive
    )
    case complete(TapSignerSetupComplete
    )
}


#if compiler(>=6)
extension SetupCmdResponse: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSetupCmdResponse: FfiConverterRustBuffer {
    typealias SwiftType = SetupCmdResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SetupCmdResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .continueFromInit(try FfiConverterTypeContinueFromInit.read(from: &buf)
        )
        
        case 2: return .continueFromBackup(try FfiConverterTypeContinueFromBackup.read(from: &buf)
        )
        
        case 3: return .continueFromDerive(try FfiConverterTypeContinueFromDerive.read(from: &buf)
        )
        
        case 4: return .complete(try FfiConverterTypeTapSignerSetupComplete.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SetupCmdResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .continueFromInit(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeContinueFromInit.write(v1, into: &buf)
            
        
        case let .continueFromBackup(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeContinueFromBackup.write(v1, into: &buf)
            
        
        case let .continueFromDerive(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeContinueFromDerive.write(v1, into: &buf)
            
        
        case let .complete(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeTapSignerSetupComplete.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSetupCmdResponse_lift(_ buf: RustBuffer) throws -> SetupCmdResponse {
    return try FfiConverterTypeSetupCmdResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSetupCmdResponse_lower(_ value: SetupCmdResponse) -> RustBuffer {
    return FfiConverterTypeSetupCmdResponse.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum StoreType {
    
    case sqlite
    case fileStore
}


#if compiler(>=6)
extension StoreType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStoreType: FfiConverterRustBuffer {
    typealias SwiftType = StoreType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StoreType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sqlite
        
        case 2: return .fileStore
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StoreType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .sqlite:
            writeInt(&buf, Int32(1))
        
        
        case .fileStore:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStoreType_lift(_ buf: RustBuffer) throws -> StoreType {
    return try FfiConverterTypeStoreType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStoreType_lower(_ value: StoreType) -> RustBuffer {
    return FfiConverterTypeStoreType.lower(value)
}


extension StoreType: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * A string or data, could be a string or data (bytes)
 */

public enum StringOrData {
    
    case string(String
    )
    case data(Data
    )
}


#if compiler(>=6)
extension StringOrData: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStringOrData: FfiConverterRustBuffer {
    typealias SwiftType = StringOrData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StringOrData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .string(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .data(try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StringOrData, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .string(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .data(v1):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStringOrData_lift(_ buf: RustBuffer) throws -> StringOrData {
    return try FfiConverterTypeStringOrData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStringOrData_lower(_ value: StringOrData) -> RustBuffer {
    return FfiConverterTypeStringOrData.lower(value)
}


extension StringOrData: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TapSignerCmd {
    
    case setup(SetupCmd
    )
    case backup(pin: String
    )
    case derive(pin: String
    )
    case change(currentPin: String, newPin: String
    )
    case sign(psbt: Psbt, pin: String
    )
}


#if compiler(>=6)
extension TapSignerCmd: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerCmd: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerCmd

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerCmd {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .setup(try FfiConverterTypeSetupCmd.read(from: &buf)
        )
        
        case 2: return .backup(pin: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .derive(pin: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .change(currentPin: try FfiConverterString.read(from: &buf), newPin: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .sign(psbt: try FfiConverterTypePsbt.read(from: &buf), pin: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TapSignerCmd, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .setup(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSetupCmd.write(v1, into: &buf)
            
        
        case let .backup(pin):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(pin, into: &buf)
            
        
        case let .derive(pin):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(pin, into: &buf)
            
        
        case let .change(currentPin,newPin):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(currentPin, into: &buf)
            FfiConverterString.write(newPin, into: &buf)
            
        
        case let .sign(psbt,pin):
            writeInt(&buf, Int32(5))
            FfiConverterTypePsbt.write(psbt, into: &buf)
            FfiConverterString.write(pin, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerCmd_lift(_ buf: RustBuffer) throws -> TapSignerCmd {
    return try FfiConverterTypeTapSignerCmd.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerCmd_lower(_ value: TapSignerCmd) -> RustBuffer {
    return FfiConverterTypeTapSignerCmd.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * When the user goes through entering the PIN and setting a new one, they are either setting up a new tapsigner
 * or changing the PIN on an existing one
 */

public enum TapSignerPinAction {
    
    case setup
    case change
}


#if compiler(>=6)
extension TapSignerPinAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerPinAction: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerPinAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerPinAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .setup
        
        case 2: return .change
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TapSignerPinAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case .setup:
            writeInt(&buf, Int32(1))
        
        
        case .change:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerPinAction_lift(_ buf: RustBuffer) throws -> TapSignerPinAction {
    return try FfiConverterTypeTapSignerPinAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerPinAction_lower(_ value: TapSignerPinAction) -> RustBuffer {
    return FfiConverterTypeTapSignerPinAction.lower(value)
}


extension TapSignerPinAction: Equatable, Hashable {}







public enum TapSignerReaderError: Swift.Error {

    
    
    case TapSignerError(TransportError
    )
    case PsbtSignError(String
    )
    case ExtractTxError(String
    )
    case UnknownCardType(String
    )
    case NoCommand
    case InvalidPinLength(UInt8
    )
    case NonNumericPin(String
    )
    case SetupAlreadyComplete
    case InvalidChainCodeLength(UInt32
    )
    case Unknown(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerReaderError: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerReaderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerReaderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .TapSignerError(
            try FfiConverterTypeTransportError.read(from: &buf)
            )
        case 2: return .PsbtSignError(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .ExtractTxError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .UnknownCardType(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .NoCommand
        case 6: return .InvalidPinLength(
            try FfiConverterUInt8.read(from: &buf)
            )
        case 7: return .NonNumericPin(
            try FfiConverterString.read(from: &buf)
            )
        case 8: return .SetupAlreadyComplete
        case 9: return .InvalidChainCodeLength(
            try FfiConverterUInt32.read(from: &buf)
            )
        case 10: return .Unknown(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TapSignerReaderError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .TapSignerError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTransportError.write(v1, into: &buf)
            
        
        case let .PsbtSignError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ExtractTxError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .UnknownCardType(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NoCommand:
            writeInt(&buf, Int32(5))
        
        
        case let .InvalidPinLength(v1):
            writeInt(&buf, Int32(6))
            FfiConverterUInt8.write(v1, into: &buf)
            
        
        case let .NonNumericPin(v1):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .SetupAlreadyComplete:
            writeInt(&buf, Int32(8))
        
        
        case let .InvalidChainCodeLength(v1):
            writeInt(&buf, Int32(9))
            FfiConverterUInt32.write(v1, into: &buf)
            
        
        case let .Unknown(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerReaderError_lift(_ buf: RustBuffer) throws -> TapSignerReaderError {
    return try FfiConverterTypeTapSignerReaderError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerReaderError_lower(_ value: TapSignerReaderError) -> RustBuffer {
    return FfiConverterTypeTapSignerReaderError.lower(value)
}


extension TapSignerReaderError: Equatable, Hashable {}




extension TapSignerReaderError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TapSignerResponse {
    
    case setup(SetupCmdResponse
    )
    case backup(Data
    )
    case `import`(DeriveInfo
    )
    case change
    case sign(Psbt
    )
}


#if compiler(>=6)
extension TapSignerResponse: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerResponse: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .setup(try FfiConverterTypeSetupCmdResponse.read(from: &buf)
        )
        
        case 2: return .backup(try FfiConverterData.read(from: &buf)
        )
        
        case 3: return .`import`(try FfiConverterTypeDeriveInfo.read(from: &buf)
        )
        
        case 4: return .change
        
        case 5: return .sign(try FfiConverterTypePsbt.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TapSignerResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .setup(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSetupCmdResponse.write(v1, into: &buf)
            
        
        case let .backup(v1):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(v1, into: &buf)
            
        
        case let .`import`(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeDeriveInfo.write(v1, into: &buf)
            
        
        case .change:
            writeInt(&buf, Int32(4))
        
        
        case let .sign(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypePsbt.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerResponse_lift(_ buf: RustBuffer) throws -> TapSignerResponse {
    return try FfiConverterTypeTapSignerResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerResponse_lower(_ value: TapSignerResponse) -> RustBuffer {
    return FfiConverterTypeTapSignerResponse.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TapSignerRoute {
    
    case initSelect(TapSigner
    )
    case initAdvanced(TapSigner
    )
    case startingPin(tapSigner: TapSigner, chainCode: String?
    )
    case newPin(TapSignerNewPinArgs
    )
    case confirmPin(TapSignerConfirmPinArgs
    )
    case setupSuccess(TapSigner,TapSignerSetupComplete
    )
    case setupRetry(TapSigner,SetupCmdResponse
    )
    case importSuccess(TapSigner,DeriveInfo
    )
    case importRetry(TapSigner
    )
    case enterPin(tapSigner: TapSigner, action: AfterPinAction
    )
}


#if compiler(>=6)
extension TapSignerRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTapSignerRoute: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TapSignerRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .initSelect(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        case 2: return .initAdvanced(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        case 3: return .startingPin(tapSigner: try FfiConverterTypeTapSigner.read(from: &buf), chainCode: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 4: return .newPin(try FfiConverterTypeTapSignerNewPinArgs.read(from: &buf)
        )
        
        case 5: return .confirmPin(try FfiConverterTypeTapSignerConfirmPinArgs.read(from: &buf)
        )
        
        case 6: return .setupSuccess(try FfiConverterTypeTapSigner.read(from: &buf), try FfiConverterTypeTapSignerSetupComplete.read(from: &buf)
        )
        
        case 7: return .setupRetry(try FfiConverterTypeTapSigner.read(from: &buf), try FfiConverterTypeSetupCmdResponse.read(from: &buf)
        )
        
        case 8: return .importSuccess(try FfiConverterTypeTapSigner.read(from: &buf), try FfiConverterTypeDeriveInfo.read(from: &buf)
        )
        
        case 9: return .importRetry(try FfiConverterTypeTapSigner.read(from: &buf)
        )
        
        case 10: return .enterPin(tapSigner: try FfiConverterTypeTapSigner.read(from: &buf), action: try FfiConverterTypeAfterPinAction.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TapSignerRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .initSelect(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        
        case let .initAdvanced(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        
        case let .startingPin(tapSigner,chainCode):
            writeInt(&buf, Int32(3))
            FfiConverterTypeTapSigner.write(tapSigner, into: &buf)
            FfiConverterOptionString.write(chainCode, into: &buf)
            
        
        case let .newPin(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeTapSignerNewPinArgs.write(v1, into: &buf)
            
        
        case let .confirmPin(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeTapSignerConfirmPinArgs.write(v1, into: &buf)
            
        
        case let .setupSuccess(v1,v2):
            writeInt(&buf, Int32(6))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            FfiConverterTypeTapSignerSetupComplete.write(v2, into: &buf)
            
        
        case let .setupRetry(v1,v2):
            writeInt(&buf, Int32(7))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            FfiConverterTypeSetupCmdResponse.write(v2, into: &buf)
            
        
        case let .importSuccess(v1,v2):
            writeInt(&buf, Int32(8))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            FfiConverterTypeDeriveInfo.write(v2, into: &buf)
            
        
        case let .importRetry(v1):
            writeInt(&buf, Int32(9))
            FfiConverterTypeTapSigner.write(v1, into: &buf)
            
        
        case let .enterPin(tapSigner,action):
            writeInt(&buf, Int32(10))
            FfiConverterTypeTapSigner.write(tapSigner, into: &buf)
            FfiConverterTypeAfterPinAction.write(action, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerRoute_lift(_ buf: RustBuffer) throws -> TapSignerRoute {
    return try FfiConverterTypeTapSignerRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTapSignerRoute_lower(_ value: TapSignerRoute) -> RustBuffer {
    return FfiConverterTypeTapSignerRoute.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Transaction {
    
    case confirmed(ConfirmedTransaction
    )
    case unconfirmed(UnconfirmedTransaction
    )
}


#if compiler(>=6)
extension Transaction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = Transaction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .confirmed(try FfiConverterTypeConfirmedTransaction.read(from: &buf)
        )
        
        case 2: return .unconfirmed(try FfiConverterTypeUnconfirmedTransaction.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .confirmed(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeConfirmedTransaction.write(v1, into: &buf)
            
        
        case let .unconfirmed(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeUnconfirmedTransaction.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}







public enum TransactionDetailError: Swift.Error {

    
    
    case Fee(String
    )
    case FeeRate(String
    )
    case Address(AddressError
    )
    case FiatAmount(String
    )
    case ChangeAddress(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionDetailError: FfiConverterRustBuffer {
    typealias SwiftType = TransactionDetailError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionDetailError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Fee(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .FeeRate(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Address(
            try FfiConverterTypeAddressError.read(from: &buf)
            )
        case 4: return .FiatAmount(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .ChangeAddress(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionDetailError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Fee(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .FeeRate(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Address(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeAddressError.write(v1, into: &buf)
            
        
        case let .FiatAmount(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ChangeAddress(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDetailError_lift(_ buf: RustBuffer) throws -> TransactionDetailError {
    return try FfiConverterTypeTransactionDetailError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionDetailError_lower(_ value: TransactionDetailError) -> RustBuffer {
    return FfiConverterTypeTransactionDetailError.lower(value)
}


extension TransactionDetailError: Equatable, Hashable {}




extension TransactionDetailError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TransactionState {
    
    case pending
    case confirmed
}


#if compiler(>=6)
extension TransactionState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionState: FfiConverterRustBuffer {
    typealias SwiftType = TransactionState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending
        
        case 2: return .confirmed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .pending:
            writeInt(&buf, Int32(1))
        
        
        case .confirmed:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionState_lift(_ buf: RustBuffer) throws -> TransactionState {
    return try FfiConverterTypeTransactionState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionState_lower(_ value: TransactionState) -> RustBuffer {
    return FfiConverterTypeTransactionState.lower(value)
}


extension TransactionState: Equatable, Hashable {}







public enum TransportError: Swift.Error {

    
    
    case CiborDe(String
    )
    case CiborValue(String
    )
    case CkTap(CkTapError
    )
    case IncorrectSignature(String
    )
    case UnknownCardType(String
    )
    case CvcChangeError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransportError: FfiConverterRustBuffer {
    typealias SwiftType = TransportError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransportError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .CiborDe(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .CiborValue(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .CkTap(
            try FfiConverterTypeCkTapError.read(from: &buf)
            )
        case 4: return .IncorrectSignature(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .UnknownCardType(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .CvcChangeError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransportError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .CiborDe(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .CiborValue(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .CkTap(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeCkTapError.write(v1, into: &buf)
            
        
        case let .IncorrectSignature(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .UnknownCardType(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .CvcChangeError(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransportError_lift(_ buf: RustBuffer) throws -> TransportError {
    return try FfiConverterTypeTransportError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransportError_lower(_ value: TransportError) -> RustBuffer {
    return FfiConverterTypeTransportError.lower(value)
}


extension TransportError: Equatable, Hashable {}




extension TransportError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum TrickPinError: Swift.Error {

    
    
    /**
     * Unable to set trick PIN, because PIN is not enabled
     */
    case PinNotEnabled
    /**
     * Unable to set trick PIN, because its the same as the current pin
     */
    case SameAsCurrentPin
    /**
     * Unable to set trick PIN, its the same as another PIN
     */
    case SameAsAnotherPin
    /**
     * Unable to set trick PIN, because biometrics is enabled
     */
    case BiometricsEnabled
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTrickPinError: FfiConverterRustBuffer {
    typealias SwiftType = TrickPinError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrickPinError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PinNotEnabled
        case 2: return .SameAsCurrentPin
        case 3: return .SameAsAnotherPin
        case 4: return .BiometricsEnabled

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrickPinError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .PinNotEnabled:
            writeInt(&buf, Int32(1))
        
        
        case .SameAsCurrentPin:
            writeInt(&buf, Int32(2))
        
        
        case .SameAsAnotherPin:
            writeInt(&buf, Int32(3))
        
        
        case .BiometricsEnabled:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTrickPinError_lift(_ buf: RustBuffer) throws -> TrickPinError {
    return try FfiConverterTypeTrickPinError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTrickPinError_lower(_ value: TrickPinError) -> RustBuffer {
    return FfiConverterTypeTrickPinError.lower(value)
}


extension TrickPinError: Equatable, Hashable {}




extension TrickPinError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum UnsignedTransactionsTableError: Swift.Error {

    
    
    case Save(String
    )
    case Read(String
    )
    case NoRecordFound
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnsignedTransactionsTableError: FfiConverterRustBuffer {
    typealias SwiftType = UnsignedTransactionsTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnsignedTransactionsTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Save(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Read(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .NoRecordFound

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UnsignedTransactionsTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Save(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NoRecordFound:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionsTableError_lift(_ buf: RustBuffer) throws -> UnsignedTransactionsTableError {
    return try FfiConverterTypeUnsignedTransactionsTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsignedTransactionsTableError_lower(_ value: UnsignedTransactionsTableError) -> RustBuffer {
    return FfiConverterTypeUnsignedTransactionsTableError.lower(value)
}


extension UnsignedTransactionsTableError: Equatable, Hashable {}




extension UnsignedTransactionsTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletAddressType {
    
    case nativeSegwit
    case wrappedSegwit
    case legacy
}


#if compiler(>=6)
extension WalletAddressType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletAddressType: FfiConverterRustBuffer {
    typealias SwiftType = WalletAddressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletAddressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .nativeSegwit
        
        case 2: return .wrappedSegwit
        
        case 3: return .legacy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletAddressType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .nativeSegwit:
            writeInt(&buf, Int32(1))
        
        
        case .wrappedSegwit:
            writeInt(&buf, Int32(2))
        
        
        case .legacy:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletAddressType_lift(_ buf: RustBuffer) throws -> WalletAddressType {
    return try FfiConverterTypeWalletAddressType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletAddressType_lower(_ value: WalletAddressType) -> RustBuffer {
    return FfiConverterTypeWalletAddressType.lower(value)
}


extension WalletAddressType: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletColor {
    
    case red
    case blue
    case green
    case yellow
    case orange
    case purple
    case pink
    case coolGray
    case custom(r: UInt8, g: UInt8, b: UInt8
    )
    case wAlmostGray
    case wAlmostWhite
    case wBeige
    case wPastelBlue
    case wPastelNavy
    case wPastelRed
    case wPastelYellow
    case wLightMint
    case wPastelTeal
    case wLightPastelYellow
}


#if compiler(>=6)
extension WalletColor: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletColor: FfiConverterRustBuffer {
    typealias SwiftType = WalletColor

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletColor {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .red
        
        case 2: return .blue
        
        case 3: return .green
        
        case 4: return .yellow
        
        case 5: return .orange
        
        case 6: return .purple
        
        case 7: return .pink
        
        case 8: return .coolGray
        
        case 9: return .custom(r: try FfiConverterUInt8.read(from: &buf), g: try FfiConverterUInt8.read(from: &buf), b: try FfiConverterUInt8.read(from: &buf)
        )
        
        case 10: return .wAlmostGray
        
        case 11: return .wAlmostWhite
        
        case 12: return .wBeige
        
        case 13: return .wPastelBlue
        
        case 14: return .wPastelNavy
        
        case 15: return .wPastelRed
        
        case 16: return .wPastelYellow
        
        case 17: return .wLightMint
        
        case 18: return .wPastelTeal
        
        case 19: return .wLightPastelYellow
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletColor, into buf: inout [UInt8]) {
        switch value {
        
        
        case .red:
            writeInt(&buf, Int32(1))
        
        
        case .blue:
            writeInt(&buf, Int32(2))
        
        
        case .green:
            writeInt(&buf, Int32(3))
        
        
        case .yellow:
            writeInt(&buf, Int32(4))
        
        
        case .orange:
            writeInt(&buf, Int32(5))
        
        
        case .purple:
            writeInt(&buf, Int32(6))
        
        
        case .pink:
            writeInt(&buf, Int32(7))
        
        
        case .coolGray:
            writeInt(&buf, Int32(8))
        
        
        case let .custom(r,g,b):
            writeInt(&buf, Int32(9))
            FfiConverterUInt8.write(r, into: &buf)
            FfiConverterUInt8.write(g, into: &buf)
            FfiConverterUInt8.write(b, into: &buf)
            
        
        case .wAlmostGray:
            writeInt(&buf, Int32(10))
        
        
        case .wAlmostWhite:
            writeInt(&buf, Int32(11))
        
        
        case .wBeige:
            writeInt(&buf, Int32(12))
        
        
        case .wPastelBlue:
            writeInt(&buf, Int32(13))
        
        
        case .wPastelNavy:
            writeInt(&buf, Int32(14))
        
        
        case .wPastelRed:
            writeInt(&buf, Int32(15))
        
        
        case .wPastelYellow:
            writeInt(&buf, Int32(16))
        
        
        case .wLightMint:
            writeInt(&buf, Int32(17))
        
        
        case .wPastelTeal:
            writeInt(&buf, Int32(18))
        
        
        case .wLightPastelYellow:
            writeInt(&buf, Int32(19))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletColor_lift(_ buf: RustBuffer) throws -> WalletColor {
    return try FfiConverterTypeWalletColor.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletColor_lower(_ value: WalletColor) -> RustBuffer {
    return FfiConverterTypeWalletColor.lower(value)
}


extension WalletColor: Equatable, Hashable {}







public enum WalletCreationError: Swift.Error {

    
    
    case Bdk(String
    )
    case Keychain(KeychainError
    )
    case Database(DatabaseError
    )
    case Persist(String
    )
    case Import(String
    )
    case MultiFormatError(MultiFormatError
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletCreationError: FfiConverterRustBuffer {
    typealias SwiftType = WalletCreationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletCreationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Bdk(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Keychain(
            try FfiConverterTypeKeychainError.read(from: &buf)
            )
        case 3: return .Database(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 4: return .Persist(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .Import(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .MultiFormatError(
            try FfiConverterTypeMultiFormatError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletCreationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Bdk(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Keychain(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeKeychainError.write(v1, into: &buf)
            
        
        case let .Database(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .Persist(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Import(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .MultiFormatError(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeMultiFormatError.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletCreationError_lift(_ buf: RustBuffer) throws -> WalletCreationError {
    return try FfiConverterTypeWalletCreationError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletCreationError_lower(_ value: WalletCreationError) -> RustBuffer {
    return FfiConverterTypeWalletCreationError.lower(value)
}


extension WalletCreationError: Equatable, Hashable {}




extension WalletCreationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum WalletDataError: Swift.Error {

    
    
    case DatabaseAccess(id: WalletId, error: String
    )
    case TableAccess(id: WalletId, error: String
    )
    case Read(String
    )
    case Save(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletDataError: FfiConverterRustBuffer {
    typealias SwiftType = WalletDataError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletDataError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DatabaseAccess(
            id: try FfiConverterTypeWalletId.read(from: &buf), 
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .TableAccess(
            id: try FfiConverterTypeWalletId.read(from: &buf), 
            error: try FfiConverterString.read(from: &buf)
            )
        case 3: return .Read(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .Save(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletDataError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DatabaseAccess(id,error):
            writeInt(&buf, Int32(1))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterString.write(error, into: &buf)
            
        
        case let .TableAccess(id,error):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletId.write(id, into: &buf)
            FfiConverterString.write(error, into: &buf)
            
        
        case let .Read(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Save(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataError_lift(_ buf: RustBuffer) throws -> WalletDataError {
    return try FfiConverterTypeWalletDataError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataError_lower(_ value: WalletDataError) -> RustBuffer {
    return FfiConverterTypeWalletDataError.lower(value)
}


extension WalletDataError: Equatable, Hashable {}




extension WalletDataError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletDataKey {
    
    case scanState(WalletAddressType
    )
}


#if compiler(>=6)
extension WalletDataKey: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletDataKey: FfiConverterRustBuffer {
    typealias SwiftType = WalletDataKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletDataKey {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .scanState(try FfiConverterTypeWalletAddressType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletDataKey, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .scanState(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeWalletAddressType.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataKey_lift(_ buf: RustBuffer) throws -> WalletDataKey {
    return try FfiConverterTypeWalletDataKey.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletDataKey_lower(_ value: WalletDataKey) -> RustBuffer {
    return FfiConverterTypeWalletDataKey.lower(value)
}


extension WalletDataKey: Equatable, Hashable {}







public enum WalletError: Swift.Error {

    
    
    case BdkError(String
    )
    case UnsupportedWallet(String
    )
    case PersistError(String
    )
    case LoadError(String
    )
    case KeychainError(KeychainError
    )
    case DatabaseError(DatabaseError
    )
    case WalletNotFound
    case MetadataNotFound
    case ParseXpubError(XpubError
    )
    case WalletAlreadyExists(WalletId
    )
    case MultiFormatError(MultiFormatError
    )
    case DescriptorKeyParseError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletError: FfiConverterRustBuffer {
    typealias SwiftType = WalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BdkError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .UnsupportedWallet(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .PersistError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .LoadError(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .KeychainError(
            try FfiConverterTypeKeychainError.read(from: &buf)
            )
        case 6: return .DatabaseError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 7: return .WalletNotFound
        case 8: return .MetadataNotFound
        case 9: return .ParseXpubError(
            try FfiConverterTypeXpubError.read(from: &buf)
            )
        case 10: return .WalletAlreadyExists(
            try FfiConverterTypeWalletId.read(from: &buf)
            )
        case 11: return .MultiFormatError(
            try FfiConverterTypeMultiFormatError.read(from: &buf)
            )
        case 12: return .DescriptorKeyParseError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .BdkError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .UnsupportedWallet(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .PersistError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .LoadError(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .KeychainError(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeKeychainError.write(v1, into: &buf)
            
        
        case let .DatabaseError(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case .WalletNotFound:
            writeInt(&buf, Int32(7))
        
        
        case .MetadataNotFound:
            writeInt(&buf, Int32(8))
        
        
        case let .ParseXpubError(v1):
            writeInt(&buf, Int32(9))
            FfiConverterTypeXpubError.write(v1, into: &buf)
            
        
        case let .WalletAlreadyExists(v1):
            writeInt(&buf, Int32(10))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        
        case let .MultiFormatError(v1):
            writeInt(&buf, Int32(11))
            FfiConverterTypeMultiFormatError.write(v1, into: &buf)
            
        
        case let .DescriptorKeyParseError(v1):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletError_lift(_ buf: RustBuffer) throws -> WalletError {
    return try FfiConverterTypeWalletError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletError_lower(_ value: WalletError) -> RustBuffer {
    return FfiConverterTypeWalletError.lower(value)
}


extension WalletError: Equatable, Hashable {}




extension WalletError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletErrorAlert {
    
    case nodeConnectionFailed(String
    )
    case noBalance
}


#if compiler(>=6)
extension WalletErrorAlert: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletErrorAlert: FfiConverterRustBuffer {
    typealias SwiftType = WalletErrorAlert

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletErrorAlert {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .nodeConnectionFailed(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .noBalance
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletErrorAlert, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .nodeConnectionFailed(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .noBalance:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletErrorAlert_lift(_ buf: RustBuffer) throws -> WalletErrorAlert {
    return try FfiConverterTypeWalletErrorAlert.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletErrorAlert_lower(_ value: WalletErrorAlert) -> RustBuffer {
    return FfiConverterTypeWalletErrorAlert.lower(value)
}


extension WalletErrorAlert: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletLoadState {
    
    case loading
    case scanning([Transaction]
    )
    case loaded([Transaction]
    )
}


#if compiler(>=6)
extension WalletLoadState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletLoadState: FfiConverterRustBuffer {
    typealias SwiftType = WalletLoadState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletLoadState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .loading
        
        case 2: return .scanning(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        case 3: return .loaded(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletLoadState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .loading:
            writeInt(&buf, Int32(1))
        
        
        case let .scanning(v1):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        
        case let .loaded(v1):
            writeInt(&buf, Int32(3))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletLoadState_lift(_ buf: RustBuffer) throws -> WalletLoadState {
    return try FfiConverterTypeWalletLoadState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletLoadState_lower(_ value: WalletLoadState) -> RustBuffer {
    return FfiConverterTypeWalletLoadState.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletManagerAction {
    
    case updateName(String
    )
    case updateColor(WalletColor
    )
    case updateUnit(Unit
    )
    case updateFiatOrBtc(FiatOrBtc
    )
    case toggleSensitiveVisibility
    case toggleDetailsExpanded
    case toggleFiatOrBtc
    case toggleFiatBtcPrimarySecondary
    case toggleShowLabels
    case selectCurrentWalletAddressType
    case selectDifferentWalletAddressType(WalletAddressType
    )
}


#if compiler(>=6)
extension WalletManagerAction: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletManagerAction: FfiConverterRustBuffer {
    typealias SwiftType = WalletManagerAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletManagerAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .updateName(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .updateColor(try FfiConverterTypeWalletColor.read(from: &buf)
        )
        
        case 3: return .updateUnit(try FfiConverterTypeUnit.read(from: &buf)
        )
        
        case 4: return .updateFiatOrBtc(try FfiConverterTypeFiatOrBtc.read(from: &buf)
        )
        
        case 5: return .toggleSensitiveVisibility
        
        case 6: return .toggleDetailsExpanded
        
        case 7: return .toggleFiatOrBtc
        
        case 8: return .toggleFiatBtcPrimarySecondary
        
        case 9: return .toggleShowLabels
        
        case 10: return .selectCurrentWalletAddressType
        
        case 11: return .selectDifferentWalletAddressType(try FfiConverterTypeWalletAddressType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletManagerAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .updateName(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .updateColor(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletColor.write(v1, into: &buf)
            
        
        case let .updateUnit(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeUnit.write(v1, into: &buf)
            
        
        case let .updateFiatOrBtc(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeFiatOrBtc.write(v1, into: &buf)
            
        
        case .toggleSensitiveVisibility:
            writeInt(&buf, Int32(5))
        
        
        case .toggleDetailsExpanded:
            writeInt(&buf, Int32(6))
        
        
        case .toggleFiatOrBtc:
            writeInt(&buf, Int32(7))
        
        
        case .toggleFiatBtcPrimarySecondary:
            writeInt(&buf, Int32(8))
        
        
        case .toggleShowLabels:
            writeInt(&buf, Int32(9))
        
        
        case .selectCurrentWalletAddressType:
            writeInt(&buf, Int32(10))
        
        
        case let .selectDifferentWalletAddressType(v1):
            writeInt(&buf, Int32(11))
            FfiConverterTypeWalletAddressType.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerAction_lift(_ buf: RustBuffer) throws -> WalletManagerAction {
    return try FfiConverterTypeWalletManagerAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerAction_lower(_ value: WalletManagerAction) -> RustBuffer {
    return FfiConverterTypeWalletManagerAction.lower(value)
}


extension WalletManagerAction: Equatable, Hashable {}







public enum WalletManagerError: Swift.Error {

    
    
    case GetSelectedWalletError(String
    )
    case WalletDoesNotExist
    case SecretRetrievalError(KeychainError
    )
    case MarkWalletAsVerifiedError(DatabaseError
    )
    case LoadWalletError(WalletError
    )
    case NodeConnectionFailed(String
    )
    case WalletScanError(String
    )
    case TransactionsRetrievalError(String
    )
    case WalletBalanceError(String
    )
    case NextAddressError(String
    )
    case GetHeightError
    case TransactionDetailsError(String
    )
    case ActorNotFound
    case UnableToSwitch(WalletAddressType,String
    )
    case FiatError(String
    )
    case FeesError(String
    )
    case BuildTxError(String
    )
    case InsufficientFunds(String
    )
    case GetConfirmDetailsError(String
    )
    case SignAndBroadcastError(String
    )
    case ConverterError(ConverterError
    )
    case UnknownError(String
    )
    case PsbtFinalizeError(String
    )
    case GetHistoricalPricesError(String
    )
    case CsvCreationError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletManagerError: FfiConverterRustBuffer {
    typealias SwiftType = WalletManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .GetSelectedWalletError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .WalletDoesNotExist
        case 3: return .SecretRetrievalError(
            try FfiConverterTypeKeychainError.read(from: &buf)
            )
        case 4: return .MarkWalletAsVerifiedError(
            try FfiConverterTypeDatabaseError.read(from: &buf)
            )
        case 5: return .LoadWalletError(
            try FfiConverterTypeWalletError.read(from: &buf)
            )
        case 6: return .NodeConnectionFailed(
            try FfiConverterString.read(from: &buf)
            )
        case 7: return .WalletScanError(
            try FfiConverterString.read(from: &buf)
            )
        case 8: return .TransactionsRetrievalError(
            try FfiConverterString.read(from: &buf)
            )
        case 9: return .WalletBalanceError(
            try FfiConverterString.read(from: &buf)
            )
        case 10: return .NextAddressError(
            try FfiConverterString.read(from: &buf)
            )
        case 11: return .GetHeightError
        case 12: return .TransactionDetailsError(
            try FfiConverterString.read(from: &buf)
            )
        case 13: return .ActorNotFound
        case 14: return .UnableToSwitch(
            try FfiConverterTypeWalletAddressType.read(from: &buf), 
            try FfiConverterString.read(from: &buf)
            )
        case 15: return .FiatError(
            try FfiConverterString.read(from: &buf)
            )
        case 16: return .FeesError(
            try FfiConverterString.read(from: &buf)
            )
        case 17: return .BuildTxError(
            try FfiConverterString.read(from: &buf)
            )
        case 18: return .InsufficientFunds(
            try FfiConverterString.read(from: &buf)
            )
        case 19: return .GetConfirmDetailsError(
            try FfiConverterString.read(from: &buf)
            )
        case 20: return .SignAndBroadcastError(
            try FfiConverterString.read(from: &buf)
            )
        case 21: return .ConverterError(
            try FfiConverterTypeConverterError.read(from: &buf)
            )
        case 22: return .UnknownError(
            try FfiConverterString.read(from: &buf)
            )
        case 23: return .PsbtFinalizeError(
            try FfiConverterString.read(from: &buf)
            )
        case 24: return .GetHistoricalPricesError(
            try FfiConverterString.read(from: &buf)
            )
        case 25: return .CsvCreationError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .GetSelectedWalletError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .WalletDoesNotExist:
            writeInt(&buf, Int32(2))
        
        
        case let .SecretRetrievalError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeKeychainError.write(v1, into: &buf)
            
        
        case let .MarkWalletAsVerifiedError(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeDatabaseError.write(v1, into: &buf)
            
        
        case let .LoadWalletError(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeWalletError.write(v1, into: &buf)
            
        
        case let .NodeConnectionFailed(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .WalletScanError(v1):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .TransactionsRetrievalError(v1):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .WalletBalanceError(v1):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .NextAddressError(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .GetHeightError:
            writeInt(&buf, Int32(11))
        
        
        case let .TransactionDetailsError(v1):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .ActorNotFound:
            writeInt(&buf, Int32(13))
        
        
        case let .UnableToSwitch(v1,v2):
            writeInt(&buf, Int32(14))
            FfiConverterTypeWalletAddressType.write(v1, into: &buf)
            FfiConverterString.write(v2, into: &buf)
            
        
        case let .FiatError(v1):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .FeesError(v1):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .BuildTxError(v1):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .InsufficientFunds(v1):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .GetConfirmDetailsError(v1):
            writeInt(&buf, Int32(19))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SignAndBroadcastError(v1):
            writeInt(&buf, Int32(20))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ConverterError(v1):
            writeInt(&buf, Int32(21))
            FfiConverterTypeConverterError.write(v1, into: &buf)
            
        
        case let .UnknownError(v1):
            writeInt(&buf, Int32(22))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .PsbtFinalizeError(v1):
            writeInt(&buf, Int32(23))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .GetHistoricalPricesError(v1):
            writeInt(&buf, Int32(24))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .CsvCreationError(v1):
            writeInt(&buf, Int32(25))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerError_lift(_ buf: RustBuffer) throws -> WalletManagerError {
    return try FfiConverterTypeWalletManagerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerError_lower(_ value: WalletManagerError) -> RustBuffer {
    return FfiConverterTypeWalletManagerError.lower(value)
}


extension WalletManagerError: Equatable, Hashable {}




extension WalletManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletManagerReconcileMessage {
    
    case startedInitialFullScan
    case startedExpandedFullScan([Transaction]
    )
    case availableTransactions([Transaction]
    )
    case scanComplete([Transaction]
    )
    case updatedTransactions([Transaction]
    )
    case nodeConnectionFailed(String
    )
    case walletMetadataChanged(WalletMetadata
    )
    case walletBalanceChanged(Balance
    )
    case walletError(WalletManagerError
    )
    case unknownError(String
    )
    case walletScannerResponse(ScannerResponse
    )
    case unsignedTransactionsChanged
    case sendFlowError(SendFlowErrorAlert
    )
}


#if compiler(>=6)
extension WalletManagerReconcileMessage: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletManagerReconcileMessage: FfiConverterRustBuffer {
    typealias SwiftType = WalletManagerReconcileMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletManagerReconcileMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .startedInitialFullScan
        
        case 2: return .startedExpandedFullScan(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        case 3: return .availableTransactions(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        case 4: return .scanComplete(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        case 5: return .updatedTransactions(try FfiConverterSequenceTypeTransaction.read(from: &buf)
        )
        
        case 6: return .nodeConnectionFailed(try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .walletMetadataChanged(try FfiConverterTypeWalletMetadata.read(from: &buf)
        )
        
        case 8: return .walletBalanceChanged(try FfiConverterTypeBalance.read(from: &buf)
        )
        
        case 9: return .walletError(try FfiConverterTypeWalletManagerError.read(from: &buf)
        )
        
        case 10: return .unknownError(try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .walletScannerResponse(try FfiConverterTypeScannerResponse.read(from: &buf)
        )
        
        case 12: return .unsignedTransactionsChanged
        
        case 13: return .sendFlowError(try FfiConverterTypeSendFlowErrorAlert.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletManagerReconcileMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case .startedInitialFullScan:
            writeInt(&buf, Int32(1))
        
        
        case let .startedExpandedFullScan(v1):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        
        case let .availableTransactions(v1):
            writeInt(&buf, Int32(3))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        
        case let .scanComplete(v1):
            writeInt(&buf, Int32(4))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        
        case let .updatedTransactions(v1):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceTypeTransaction.write(v1, into: &buf)
            
        
        case let .nodeConnectionFailed(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .walletMetadataChanged(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypeWalletMetadata.write(v1, into: &buf)
            
        
        case let .walletBalanceChanged(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeBalance.write(v1, into: &buf)
            
        
        case let .walletError(v1):
            writeInt(&buf, Int32(9))
            FfiConverterTypeWalletManagerError.write(v1, into: &buf)
            
        
        case let .unknownError(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .walletScannerResponse(v1):
            writeInt(&buf, Int32(11))
            FfiConverterTypeScannerResponse.write(v1, into: &buf)
            
        
        case .unsignedTransactionsChanged:
            writeInt(&buf, Int32(12))
        
        
        case let .sendFlowError(v1):
            writeInt(&buf, Int32(13))
            FfiConverterTypeSendFlowErrorAlert.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerReconcileMessage_lift(_ buf: RustBuffer) throws -> WalletManagerReconcileMessage {
    return try FfiConverterTypeWalletManagerReconcileMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletManagerReconcileMessage_lower(_ value: WalletManagerReconcileMessage) -> RustBuffer {
    return FfiConverterTypeWalletManagerReconcileMessage.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletMode {
    
    case main
    case decoy
}


#if compiler(>=6)
extension WalletMode: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletMode: FfiConverterRustBuffer {
    typealias SwiftType = WalletMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .main
        
        case 2: return .decoy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletMode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .main:
            writeInt(&buf, Int32(1))
        
        
        case .decoy:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletMode_lift(_ buf: RustBuffer) throws -> WalletMode {
    return try FfiConverterTypeWalletMode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletMode_lower(_ value: WalletMode) -> RustBuffer {
    return FfiConverterTypeWalletMode.lower(value)
}


extension WalletMode: Equatable, Hashable {}







public enum WalletScannerError: Swift.Error {

    
    
    case NoAddressTypes
    case WalletCreationError(WalletError
    )
    case NoMnemonicAvailable(WalletId
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletScannerError: FfiConverterRustBuffer {
    typealias SwiftType = WalletScannerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletScannerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NoAddressTypes
        case 2: return .WalletCreationError(
            try FfiConverterTypeWalletError.read(from: &buf)
            )
        case 3: return .NoMnemonicAvailable(
            try FfiConverterTypeWalletId.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletScannerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .NoAddressTypes:
            writeInt(&buf, Int32(1))
        
        
        case let .WalletCreationError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeWalletError.write(v1, into: &buf)
            
        
        case let .NoMnemonicAvailable(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypeWalletId.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletScannerError_lift(_ buf: RustBuffer) throws -> WalletScannerError {
    return try FfiConverterTypeWalletScannerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletScannerError_lower(_ value: WalletScannerError) -> RustBuffer {
    return FfiConverterTypeWalletScannerError.lower(value)
}


extension WalletScannerError: Equatable, Hashable {}




extension WalletScannerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletSettingsRoute {
    
    case main
    case changeName
}


#if compiler(>=6)
extension WalletSettingsRoute: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletSettingsRoute: FfiConverterRustBuffer {
    typealias SwiftType = WalletSettingsRoute

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletSettingsRoute {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .main
        
        case 2: return .changeName
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletSettingsRoute, into buf: inout [UInt8]) {
        switch value {
        
        
        case .main:
            writeInt(&buf, Int32(1))
        
        
        case .changeName:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletSettingsRoute_lift(_ buf: RustBuffer) throws -> WalletSettingsRoute {
    return try FfiConverterTypeWalletSettingsRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletSettingsRoute_lower(_ value: WalletSettingsRoute) -> RustBuffer {
    return FfiConverterTypeWalletSettingsRoute.lower(value)
}


extension WalletSettingsRoute: Equatable, Hashable {}







public enum WalletTableError: Swift.Error {

    
    
    case SaveError(String
    )
    case ReadError(String
    )
    case WalletAlreadyExists
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletTableError: FfiConverterRustBuffer {
    typealias SwiftType = WalletTableError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletTableError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .SaveError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .ReadError(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .WalletAlreadyExists

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletTableError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .SaveError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ReadError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .WalletAlreadyExists:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletTableError_lift(_ buf: RustBuffer) throws -> WalletTableError {
    return try FfiConverterTypeWalletTableError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletTableError_lower(_ value: WalletTableError) -> RustBuffer {
    return FfiConverterTypeWalletTableError.lower(value)
}


extension WalletTableError: Equatable, Hashable {}




extension WalletTableError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletType {
    
    case hot
    case cold
    case xpubOnly
    /**
     * deprecated, use XpubOnly instead
     */
    case watchOnly
}


#if compiler(>=6)
extension WalletType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWalletType: FfiConverterRustBuffer {
    typealias SwiftType = WalletType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .hot
        
        case 2: return .cold
        
        case 3: return .xpubOnly
        
        case 4: return .watchOnly
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .hot:
            writeInt(&buf, Int32(1))
        
        
        case .cold:
            writeInt(&buf, Int32(2))
        
        
        case .xpubOnly:
            writeInt(&buf, Int32(3))
        
        
        case .watchOnly:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletType_lift(_ buf: RustBuffer) throws -> WalletType {
    return try FfiConverterTypeWalletType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWalletType_lower(_ value: WalletType) -> RustBuffer {
    return FfiConverterTypeWalletType.lower(value)
}


extension WalletType: Equatable, Hashable {}







public enum XpubError: Swift.Error {

    
    
    case InvalidDescriptor(DescriptorError
    )
    case InvalidJson(String
    )
    case InvalidDescriptorInJson
    case JsonNoDecriptor
    case MissingXpub(String
    )
    case InvalidXpub(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeXpubError: FfiConverterRustBuffer {
    typealias SwiftType = XpubError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> XpubError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidDescriptor(
            try FfiConverterTypeDescriptorError.read(from: &buf)
            )
        case 2: return .InvalidJson(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .InvalidDescriptorInJson
        case 4: return .JsonNoDecriptor
        case 5: return .MissingXpub(
            try FfiConverterString.read(from: &buf)
            )
        case 6: return .InvalidXpub(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: XpubError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidDescriptor(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeDescriptorError.write(v1, into: &buf)
            
        
        case let .InvalidJson(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .InvalidDescriptorInJson:
            writeInt(&buf, Int32(3))
        
        
        case .JsonNoDecriptor:
            writeInt(&buf, Int32(4))
        
        
        case let .MissingXpub(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .InvalidXpub(v1):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeXpubError_lift(_ buf: RustBuffer) throws -> XpubError {
    return try FfiConverterTypeXpubError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeXpubError_lower(_ value: XpubError) -> RustBuffer {
    return FfiConverterTypeXpubError.lower(value)
}


extension XpubError: Equatable, Hashable {}




extension XpubError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}







public protocol AuthManagerReconciler: AnyObject, Sendable {
    
    /**
     * Tells the frontend to reconcile the manager changes
     */
    func reconcile(message: AuthManagerReconcileMessage) 
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceAuthManagerReconciler {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceAuthManagerReconciler] = [UniffiVTableCallbackInterfaceAuthManagerReconciler(
        reconcile: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceAuthManagerReconciler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reconcile(
                     message: try FfiConverterTypeAuthManagerReconcileMessage_lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceAuthManagerReconciler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface AuthManagerReconciler: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitAuthManagerReconciler() {
    uniffi_cove_fn_init_callback_vtable_authmanagerreconciler(UniffiCallbackInterfaceAuthManagerReconciler.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceAuthManagerReconciler {
    fileprivate static let handleMap = UniffiHandleMap<AuthManagerReconciler>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceAuthManagerReconciler : FfiConverter {
    typealias SwiftType = AuthManagerReconciler
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceAuthManagerReconciler_lift(_ handle: UInt64) throws -> AuthManagerReconciler {
    return try FfiConverterCallbackInterfaceAuthManagerReconciler.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceAuthManagerReconciler_lower(_ v: AuthManagerReconciler) -> UInt64 {
    return FfiConverterCallbackInterfaceAuthManagerReconciler.lower(v)
}




public protocol FfiReconcile: AnyObject, Sendable {
    
    /**
     * Essentially a callback to the frontend
     */
    func reconcile(message: AppStateReconcileMessage) 
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceFfiReconcile {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceFfiReconcile] = [UniffiVTableCallbackInterfaceFfiReconcile(
        reconcile: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceFfiReconcile.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reconcile(
                     message: try FfiConverterTypeAppStateReconcileMessage_lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceFfiReconcile.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface FfiReconcile: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitFfiReconcile() {
    uniffi_cove_fn_init_callback_vtable_ffireconcile(UniffiCallbackInterfaceFfiReconcile.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceFfiReconcile {
    fileprivate static let handleMap = UniffiHandleMap<FfiReconcile>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceFfiReconcile : FfiConverter {
    typealias SwiftType = FfiReconcile
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceFfiReconcile_lift(_ handle: UInt64) throws -> FfiReconcile {
    return try FfiConverterCallbackInterfaceFfiReconcile.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceFfiReconcile_lower(_ v: FfiReconcile) -> UInt64 {
    return FfiConverterCallbackInterfaceFfiReconcile.lower(v)
}




public protocol ImportWalletManagerReconciler: AnyObject, Sendable {
    
    /**
     * Tells the frontend to reconcile the view model changes
     */
    func reconcile(message: ImportWalletManagerReconcileMessage) 
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceImportWalletManagerReconciler {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceImportWalletManagerReconciler] = [UniffiVTableCallbackInterfaceImportWalletManagerReconciler(
        reconcile: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceImportWalletManagerReconciler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reconcile(
                     message: try FfiConverterTypeImportWalletManagerReconcileMessage_lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceImportWalletManagerReconciler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ImportWalletManagerReconciler: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitImportWalletManagerReconciler() {
    uniffi_cove_fn_init_callback_vtable_importwalletmanagerreconciler(UniffiCallbackInterfaceImportWalletManagerReconciler.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceImportWalletManagerReconciler {
    fileprivate static let handleMap = UniffiHandleMap<ImportWalletManagerReconciler>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceImportWalletManagerReconciler : FfiConverter {
    typealias SwiftType = ImportWalletManagerReconciler
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceImportWalletManagerReconciler_lift(_ handle: UInt64) throws -> ImportWalletManagerReconciler {
    return try FfiConverterCallbackInterfaceImportWalletManagerReconciler.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceImportWalletManagerReconciler_lower(_ v: ImportWalletManagerReconciler) -> UInt64 {
    return FfiConverterCallbackInterfaceImportWalletManagerReconciler.lower(v)
}




public protocol PendingWalletManagerReconciler: AnyObject, Sendable {
    
    /**
     * Tells the frontend to reconcile the view model changes
     */
    func reconcile(message: PendingWalletManagerReconcileMessage) 
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfacePendingWalletManagerReconciler {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfacePendingWalletManagerReconciler] = [UniffiVTableCallbackInterfacePendingWalletManagerReconciler(
        reconcile: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfacePendingWalletManagerReconciler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reconcile(
                     message: try FfiConverterTypePendingWalletManagerReconcileMessage_lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfacePendingWalletManagerReconciler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface PendingWalletManagerReconciler: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitPendingWalletManagerReconciler() {
    uniffi_cove_fn_init_callback_vtable_pendingwalletmanagerreconciler(UniffiCallbackInterfacePendingWalletManagerReconciler.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfacePendingWalletManagerReconciler {
    fileprivate static let handleMap = UniffiHandleMap<PendingWalletManagerReconciler>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfacePendingWalletManagerReconciler : FfiConverter {
    typealias SwiftType = PendingWalletManagerReconciler
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfacePendingWalletManagerReconciler_lift(_ handle: UInt64) throws -> PendingWalletManagerReconciler {
    return try FfiConverterCallbackInterfacePendingWalletManagerReconciler.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfacePendingWalletManagerReconciler_lower(_ v: PendingWalletManagerReconciler) -> UInt64 {
    return FfiConverterCallbackInterfacePendingWalletManagerReconciler.lower(v)
}




public protocol TapcardTransportProtocol: AnyObject, Sendable {
    
    func setMessage(message: String) 
    
    func appendMessage(message: String) 
    
    func transmitApdu(commandApdu: Data) async throws  -> Data
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceTapcardTransportProtocol {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceTapcardTransportProtocol] = [UniffiVTableCallbackInterfaceTapcardTransportProtocol(
        setMessage: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceTapcardTransportProtocol.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.setMessage(
                     message: try FfiConverterString.lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        appendMessage: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceTapcardTransportProtocol.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.appendMessage(
                     message: try FfiConverterString.lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        transmitApdu: { (
            uniffiHandle: UInt64,
            commandApdu: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> Data in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceTapcardTransportProtocol.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.transmitApdu(
                     commandApdu: try FfiConverterData.lift(commandApdu)
                )
            }

            let uniffiHandleSuccess = { (returnValue: Data) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterData.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeTransportError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceTapcardTransportProtocol.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface TapcardTransportProtocol: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitTapcardTransportProtocol() {
    uniffi_cove_fn_init_callback_vtable_tapcardtransportprotocol(UniffiCallbackInterfaceTapcardTransportProtocol.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceTapcardTransportProtocol {
    fileprivate static let handleMap = UniffiHandleMap<TapcardTransportProtocol>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceTapcardTransportProtocol : FfiConverter {
    typealias SwiftType = TapcardTransportProtocol
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceTapcardTransportProtocol_lift(_ handle: UInt64) throws -> TapcardTransportProtocol {
    return try FfiConverterCallbackInterfaceTapcardTransportProtocol.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceTapcardTransportProtocol_lower(_ v: TapcardTransportProtocol) -> UInt64 {
    return FfiConverterCallbackInterfaceTapcardTransportProtocol.lower(v)
}




public protocol WalletManagerReconciler: AnyObject, Sendable {
    
    /**
     * Tells the frontend to reconcile the view model changes
     */
    func reconcile(message: WalletManagerReconcileMessage) 
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceWalletManagerReconciler {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceWalletManagerReconciler] = [UniffiVTableCallbackInterfaceWalletManagerReconciler(
        reconcile: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceWalletManagerReconciler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reconcile(
                     message: try FfiConverterTypeWalletManagerReconcileMessage_lift(message)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceWalletManagerReconciler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface WalletManagerReconciler: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitWalletManagerReconciler() {
    uniffi_cove_fn_init_callback_vtable_walletmanagerreconciler(UniffiCallbackInterfaceWalletManagerReconciler.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceWalletManagerReconciler {
    fileprivate static let handleMap = UniffiHandleMap<WalletManagerReconciler>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceWalletManagerReconciler : FfiConverter {
    typealias SwiftType = WalletManagerReconciler
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceWalletManagerReconciler_lift(_ handle: UInt64) throws -> WalletManagerReconciler {
    return try FfiConverterCallbackInterfaceWalletManagerReconciler.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceWalletManagerReconciler_lower(_ v: WalletManagerReconciler) -> UInt64 {
    return FfiConverterCallbackInterfaceWalletManagerReconciler.lower(v)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionFloat: FfiConverterRustBuffer {
    typealias SwiftType = Float?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterFloat.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterFloat.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBitcoinTransaction: FfiConverterRustBuffer {
    typealias SwiftType = BitcoinTransaction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBitcoinTransaction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBitcoinTransaction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFingerprint: FfiConverterRustBuffer {
    typealias SwiftType = Fingerprint?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFingerprint.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFingerprint.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeUnsignedTransactionRecord: FfiConverterRustBuffer {
    typealias SwiftType = UnsignedTransactionRecord?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUnsignedTransactionRecord.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUnsignedTransactionRecord.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAmount: FfiConverterRustBuffer {
    typealias SwiftType = Amount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFeeRateOptions: FfiConverterRustBuffer {
    typealias SwiftType = FeeRateOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFeeRateOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFeeRateOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypePsbt: FfiConverterRustBuffer {
    typealias SwiftType = Psbt?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePsbt.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePsbt.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeDeriveInfo: FfiConverterRustBuffer {
    typealias SwiftType = DeriveInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDeriveInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDeriveInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFeeResponse: FfiConverterRustBuffer {
    typealias SwiftType = FeeResponse?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFeeResponse.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFeeResponse.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFiatAmount: FfiConverterRustBuffer {
    typealias SwiftType = FiatAmount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFiatAmount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFiatAmount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWalletMetadata: FfiConverterRustBuffer {
    typealias SwiftType = WalletMetadata?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWalletMetadata.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWalletMetadata.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAddressIndex: FfiConverterRustBuffer {
    typealias SwiftType = AddressIndex?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddressIndex.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddressIndex.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBlockSizeLast: FfiConverterRustBuffer {
    typealias SwiftType = BlockSizeLast?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBlockSizeLast.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBlockSizeLast.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeHardwareWalletMetadata: FfiConverterRustBuffer {
    typealias SwiftType = HardwareWalletMetadata?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeHardwareWalletMetadata.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeHardwareWalletMetadata.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeNumberOfBip39Words: FfiConverterRustBuffer {
    typealias SwiftType = NumberOfBip39Words?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNumberOfBip39Words.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNumberOfBip39Words.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = Route?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRoute.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRoute.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSetupCmdResponse: FfiConverterRustBuffer {
    typealias SwiftType = SetupCmdResponse?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSetupCmdResponse.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSetupCmdResponse.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTapSignerCmd: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerCmd?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTapSignerCmd.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTapSignerCmd.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTapSignerResponse: FfiConverterRustBuffer {
    typealias SwiftType = TapSignerResponse?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTapSignerResponse.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTapSignerResponse.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWalletId: FfiConverterRustBuffer {
    typealias SwiftType = WalletId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWalletId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWalletId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    public static func write(_ value: [UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt32.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeBoxedRoute: FfiConverterRustBuffer {
    typealias SwiftType = [BoxedRoute]

    public static func write(_ value: [BoxedRoute], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBoxedRoute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BoxedRoute] {
        let len: Int32 = try readInt(&buf)
        var seq = [BoxedRoute]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBoxedRoute.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeUnsignedTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [UnsignedTransaction]

    public static func write(_ value: [UnsignedTransaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeUnsignedTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UnsignedTransaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [UnsignedTransaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeUnsignedTransaction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFoundAddress: FfiConverterRustBuffer {
    typealias SwiftType = [FoundAddress]

    public static func write(_ value: [FoundAddress], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFoundAddress.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FoundAddress] {
        let len: Int32 = try readInt(&buf)
        var seq = [FoundAddress]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFoundAddress.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeGroupedWord: FfiConverterRustBuffer {
    typealias SwiftType = [GroupedWord]

    public static func write(_ value: [GroupedWord], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeGroupedWord.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [GroupedWord] {
        let len: Int32 = try readInt(&buf)
        var seq = [GroupedWord]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeGroupedWord.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeWalletMetadata: FfiConverterRustBuffer {
    typealias SwiftType = [WalletMetadata]

    public static func write(_ value: [WalletMetadata], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeWalletMetadata.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [WalletMetadata] {
        let len: Int32 = try readInt(&buf)
        var seq = [WalletMetadata]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeWalletMetadata.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAddressAndAmount: FfiConverterRustBuffer {
    typealias SwiftType = [AddressAndAmount]

    public static func write(_ value: [AddressAndAmount], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAddressAndAmount.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AddressAndAmount] {
        let len: Int32 = try readInt(&buf)
        var seq = [AddressAndAmount]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAddressAndAmount.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFiatCurrency: FfiConverterRustBuffer {
    typealias SwiftType = [FiatCurrency]

    public static func write(_ value: [FiatCurrency], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFiatCurrency.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FiatCurrency] {
        let len: Int32 = try readInt(&buf)
        var seq = [FiatCurrency]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFiatCurrency.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeNodeSelection: FfiConverterRustBuffer {
    typealias SwiftType = [NodeSelection]

    public static func write(_ value: [NodeSelection], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNodeSelection.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NodeSelection] {
        let len: Int32 = try readInt(&buf)
        var seq = [NodeSelection]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeNodeSelection.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = [Route]

    public static func write(_ value: [Route], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRoute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Route] {
        let len: Int32 = try readInt(&buf)
        var seq = [Route]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoute.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [Transaction]

    public static func write(_ value: [Transaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Transaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [Transaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTransaction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeWalletColor: FfiConverterRustBuffer {
    typealias SwiftType = [WalletColor]

    public static func write(_ value: [WalletColor], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeWalletColor.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [WalletColor] {
        let len: Int32 = try readInt(&buf)
        var seq = [WalletColor]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeWalletColor.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceSequenceTypeGroupedWord: FfiConverterRustBuffer {
    typealias SwiftType = [[GroupedWord]]

    public static func write(_ value: [[GroupedWord]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceTypeGroupedWord.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[GroupedWord]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[GroupedWord]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceTypeGroupedWord.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeWalletId: FfiConverterRustBuffer {
    typealias SwiftType = [WalletId]

    public static func write(_ value: [WalletId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeWalletId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [WalletId] {
        let len: Int32 = try readInt(&buf)
        var seq = [WalletId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeWalletId.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Timestamp = UInt64

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTimestamp: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Timestamp {
        return try FfiConverterUInt64.read(from: &buf)
    }

    public static func write(_ value: Timestamp, into buf: inout [UInt8]) {
        return FfiConverterUInt64.write(value, into: &buf)
    }

    public static func lift(_ value: UInt64) throws -> Timestamp {
        return try FfiConverterUInt64.lift(value)
    }

    public static func lower(_ value: Timestamp) -> UInt64 {
        return FfiConverterUInt64.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTimestamp_lift(_ value: UInt64) throws -> Timestamp {
    return try FfiConverterTypeTimestamp.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTimestamp_lower(_ value: Timestamp) -> UInt64 {
    return FfiConverterTypeTimestamp.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureCoveInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
private func uniffiTraitInterfaceCallAsync<T>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> ()
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)

}

private func uniffiTraitInterfaceCallAsyncWithError<T, E>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> (),
    lowerError: @escaping (E) -> RustBuffer
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch let error as E {
            handleError(CALL_ERROR, lowerError(error))
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)
}

// Borrow the callback handle map implementation to store foreign future handles
// TODO: consolidate the handle-map code (https://github.com/mozilla/uniffi-rs/pull/1823)
fileprivate let UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = UniffiHandleMap<UniffiForeignFutureTask>()

// Protocol for tasks that handle foreign futures.
//
// Defining a protocol allows all tasks to be stored in the same handle map.  This can't be done
// with the task object itself, since has generic parameters.
fileprivate protocol UniffiForeignFutureTask {
    func cancel()
}

extension Task: UniffiForeignFutureTask {}

private func uniffiForeignFutureFree(handle: UInt64) {
    do {
        let task = try UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle: handle)
        // Set the cancellation flag on the task.  If it's still running, the code can check the
        // cancellation flag or call `Task.checkCancellation()`.  If the task has completed, this is
        // a no-op.
        task.cancel()
    } catch {
        print("uniffiForeignFutureFree: handle missing from handlemap")
    }
}

// For testing
public func uniffiForeignFutureHandleCountCove() -> Int {
    UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.count
}
public func afterPinActionUserMessage(action: AfterPinAction) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_after_pin_action_user_message(
        FfiConverterTypeAfterPinAction_lower(action),$0
    )
})
}
public func allFiatCurrencies() -> [FiatCurrency]  {
    return try!  FfiConverterSequenceTypeFiatCurrency.lift(try! rustCall() {
    uniffi_cove_fn_func_all_fiat_currencies($0
    )
})
}
public func createTransportErrorFromCode(code: UInt16, message: String) -> TransportError  {
    return try!  FfiConverterTypeTransportError_lift(try! rustCall() {
    uniffi_cove_fn_func_create_transport_error_from_code(
        FfiConverterUInt16.lower(code),
        FfiConverterString.lower(message),$0
    )
})
}
public func defaultNodeSelection() -> NodeSelection  {
    return try!  FfiConverterTypeNodeSelection_lift(try! rustCall() {
    uniffi_cove_fn_func_default_node_selection($0
    )
})
}
public func defaultWalletColors() -> [WalletColor]  {
    return try!  FfiConverterSequenceTypeWalletColor.lift(try! rustCall() {
    uniffi_cove_fn_func_default_wallet_colors($0
    )
})
}
public func describeAuthManagerError(error: AuthManagerError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_auth_manager_error(
        FfiConverterTypeAuthManagerError_lower(error),$0
    )
})
}
public func describeMultiFormatError(error: MultiFormatError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_multi_format_error(
        FfiConverterTypeMultiFormatError_lower(error),$0
    )
})
}
public func describeSendFlowFiatOnChangeError(error: SendFlowFiatOnChangeError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_send_flow_fiat_on_change_error(
        FfiConverterTypeSendFlowFiatOnChangeError_lower(error),$0
    )
})
}
public func describeTapSignerReaderError(error: TapSignerReaderError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_tap_signer_reader_error(
        FfiConverterTypeTapSignerReaderError_lower(error),$0
    )
})
}
public func describeWalletError(error: WalletError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_wallet_error(
        FfiConverterTypeWalletError_lower(error),$0
    )
})
}
public func describeWalletManagerError(error: WalletManagerError) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_describe_wallet_manager_error(
        FfiConverterTypeWalletManagerError_lower(error),$0
    )
})
}
public func discoveryStateIsEqual(lhs: DiscoveryState, rhs: DiscoveryState) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_discovery_state_is_equal(
        FfiConverterTypeDiscoveryState_lower(lhs),
        FfiConverterTypeDiscoveryState_lower(rhs),$0
    )
})
}
public func fiatAmountPreviewNew() -> FiatAmount  {
    return try!  FfiConverterTypeFiatAmount_lift(try! rustCall() {
    uniffi_cove_fn_func_fiat_amount_preview_new($0
    )
})
}
public func fiatCurrencyEmoji(fiatCurrency: FiatCurrency) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_fiat_currency_emoji(
        FfiConverterTypeFiatCurrency_lower(fiatCurrency),$0
    )
})
}
public func fiatCurrencySuffix(fiatCurrency: FiatCurrency) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_fiat_currency_suffix(
        FfiConverterTypeFiatCurrency_lower(fiatCurrency),$0
    )
})
}
public func fiatCurrencySymbol(fiatCurrency: FiatCurrency) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_fiat_currency_symbol(
        FfiConverterTypeFiatCurrency_lower(fiatCurrency),$0
    )
})
}
public func fiatCurrencyToString(fiatCurrency: FiatCurrency) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_fiat_currency_to_string(
        FfiConverterTypeFiatCurrency_lower(fiatCurrency),$0
    )
})
}
public func groupedPlainWordsOf(mnemonic: String, groups: UInt8)throws  -> [[String]]  {
    return try  FfiConverterSequenceSequenceString.lift(try rustCallWithError(FfiConverterTypeMnemonicParseError_lift) {
    uniffi_cove_fn_func_grouped_plain_words_of(
        FfiConverterString.lower(mnemonic),
        FfiConverterUInt8.lower(groups),$0
    )
})
}
public func hardwareWalletIsTapSigner(hardwareWallet: HardwareWalletMetadata) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_hardware_wallet_is_tap_signer(
        FfiConverterTypeHardwareWalletMetadata_lower(hardwareWallet),$0
    )
})
}
public func hashRoute(route: Route) -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_func_hash_route(
        FfiConverterTypeRoute_lower(route),$0
    )
})
}
public func isFiatCurrencySymbol(symbol: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_is_fiat_currency_symbol(
        FfiConverterString.lower(symbol),$0
    )
})
}
public func isRouteEqual(route: Route, routeToCheck: Route) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_is_route_equal(
        FfiConverterTypeRoute_lower(route),
        FfiConverterTypeRoute_lower(routeToCheck),$0
    )
})
}
public func isTapSignerRouteEqual(lhs: TapSignerRoute, rhs: TapSignerRoute) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_is_tap_signer_route_equal(
        FfiConverterTypeTapSignerRoute_lower(lhs),
        FfiConverterTypeTapSignerRoute_lower(rhs),$0
    )
})
}
public func isValidChainCode(chainCode: String) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_is_valid_chain_code(
        FfiConverterString.lower(chainCode),$0
    )
})
}
public func multiFormatTryFromNfcMessage(nfcMessage: NfcMessage)throws  -> MultiFormat  {
    return try  FfiConverterTypeMultiFormat_lift(try rustCallWithError(FfiConverterTypeMultiFormatError_lift) {
    uniffi_cove_fn_func_multi_format_try_from_nfc_message(
        FfiConverterTypeNfcMessage_lower(nfcMessage),$0
    )
})
}
public func nodeSelectionToNode(node: NodeSelection) -> Node  {
    return try!  FfiConverterTypeNode_lift(try! rustCall() {
    uniffi_cove_fn_func_node_selection_to_node(
        FfiConverterTypeNodeSelection_lower(node),$0
    )
})
}
public func numberOfWordsInGroups(me: NumberOfBip39Words, of: UInt8) -> [[String]]  {
    return try!  FfiConverterSequenceSequenceString.lift(try! rustCall() {
    uniffi_cove_fn_func_number_of_words_in_groups(
        FfiConverterTypeNumberOfBip39Words_lower(me),
        FfiConverterUInt8.lower(of),$0
    )
})
}
public func numberOfWordsToWordCount(me: NumberOfBip39Words) -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_cove_fn_func_number_of_words_to_word_count(
        FfiConverterTypeNumberOfBip39Words_lower(me),$0
    )
})
}
public func previewNewLegacyFoundAddress() -> FoundAddress  {
    return try!  FfiConverterTypeFoundAddress_lift(try! rustCall() {
    uniffi_cove_fn_func_preview_new_legacy_found_address($0
    )
})
}
public func previewNewWrappedFoundAddress() -> FoundAddress  {
    return try!  FfiConverterTypeFoundAddress_lift(try! rustCall() {
    uniffi_cove_fn_func_preview_new_wrapped_found_address($0
    )
})
}
public func pricesAreEqual(lhs: PriceResponse, rhs: PriceResponse) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_prices_are_equal(
        FfiConverterTypePriceResponse_lower(lhs),
        FfiConverterTypePriceResponse_lower(rhs),$0
    )
})
}
public func stringOrDataTryIntoMultiFormat(stringOrData: StringOrData)throws  -> MultiFormat  {
    return try  FfiConverterTypeMultiFormat_lift(try rustCallWithError(FfiConverterTypeMultiFormatError_lift) {
    uniffi_cove_fn_func_string_or_data_try_into_multi_format(
        FfiConverterTypeStringOrData_lower(stringOrData),$0
    )
})
}
public func tapSignerConfirmPinArgsNewFromNewPin(args: TapSignerNewPinArgs, newPin: String) -> TapSignerConfirmPinArgs  {
    return try!  FfiConverterTypeTapSignerConfirmPinArgs_lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_confirm_pin_args_new_from_new_pin(
        FfiConverterTypeTapSignerNewPinArgs_lower(args),
        FfiConverterString.lower(newPin),$0
    )
})
}
public func tapSignerErrorIsAuthError(error: TapSignerReaderError) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_error_is_auth_error(
        FfiConverterTypeTapSignerReaderError_lower(error),$0
    )
})
}
public func tapSignerErrorIsNoBackupError(error: TapSignerReaderError) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_error_is_no_backup_error(
        FfiConverterTypeTapSignerReaderError_lower(error),$0
    )
})
}
public func tapSignerResponseBackupResponse(response: TapSignerResponse) -> Data?  {
    return try!  FfiConverterOptionData.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_response_backup_response(
        FfiConverterTypeTapSignerResponse_lower(response),$0
    )
})
}
public func tapSignerResponseChangeResponse(response: TapSignerResponse) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_response_change_response(
        FfiConverterTypeTapSignerResponse_lower(response),$0
    )
})
}
public func tapSignerResponseDeriveResponse(response: TapSignerResponse) -> DeriveInfo?  {
    return try!  FfiConverterOptionTypeDeriveInfo.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_response_derive_response(
        FfiConverterTypeTapSignerResponse_lower(response),$0
    )
})
}
public func tapSignerResponseSetupResponse(response: TapSignerResponse) -> SetupCmdResponse?  {
    return try!  FfiConverterOptionTypeSetupCmdResponse.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_response_setup_response(
        FfiConverterTypeTapSignerResponse_lower(response),$0
    )
})
}
public func tapSignerResponseSignResponse(response: TapSignerResponse) -> Psbt?  {
    return try!  FfiConverterOptionTypePsbt.lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_response_sign_response(
        FfiConverterTypeTapSignerResponse_lower(response),$0
    )
})
}
public func tapSignerSetupCompleteNew(preview: Bool) -> TapSignerSetupComplete  {
    return try!  FfiConverterTypeTapSignerSetupComplete_lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_setup_complete_new(
        FfiConverterBool.lower(preview),$0
    )
})
}
public func tapSignerSetupRetryContinueCmd(preview: Bool) -> SetupCmdResponse  {
    return try!  FfiConverterTypeSetupCmdResponse_lift(try! rustCall() {
    uniffi_cove_fn_func_tap_signer_setup_retry_continue_cmd(
        FfiConverterBool.lower(preview),$0
    )
})
}
public func transactionPreviewConfirmedNew() -> Transaction  {
    return try!  FfiConverterTypeTransaction_lift(try! rustCall() {
    uniffi_cove_fn_func_transaction_preview_confirmed_new($0
    )
})
}
public func transactionPreviewUnconfirmedNew() -> Transaction  {
    return try!  FfiConverterTypeTransaction_lift(try! rustCall() {
    uniffi_cove_fn_func_transaction_preview_unconfirmed_new($0
    )
})
}
public func transactionsPreviewNew(confirmed: UInt8, unconfirmed: UInt8) -> [Transaction]  {
    return try!  FfiConverterSequenceTypeTransaction.lift(try! rustCall() {
    uniffi_cove_fn_func_transactions_preview_new(
        FfiConverterUInt8.lower(confirmed),
        FfiConverterUInt8.lower(unconfirmed),$0
    )
})
}
public func updatePricesIfNeeded()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_cove_fn_func_update_prices_if_needed(
                )
            },
            pollFunc: ffi_cove_rust_future_poll_void,
            completeFunc: ffi_cove_rust_future_complete_void,
            freeFunc: ffi_cove_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
public func walletAddressTypeLessThan(lhs: WalletAddressType, rhs: WalletAddressType) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_address_type_less_than(
        FfiConverterTypeWalletAddressType_lower(lhs),
        FfiConverterTypeWalletAddressType_lower(rhs),$0
    )
})
}
public func walletAddressTypeToString(walletAddressType: WalletAddressType) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_address_type_to_string(
        FfiConverterTypeWalletAddressType_lower(walletAddressType),$0
    )
})
}
public func walletMetadataHash(metadata: WalletMetadata) -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_metadata_hash(
        FfiConverterTypeWalletMetadata_lower(metadata),$0
    )
})
}
public func walletMetadataIsEqual(lhs: WalletMetadata, rhs: WalletMetadata) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_metadata_is_equal(
        FfiConverterTypeWalletMetadata_lower(lhs),
        FfiConverterTypeWalletMetadata_lower(rhs),$0
    )
})
}
public func walletMetadataPreview() -> WalletMetadata  {
    return try!  FfiConverterTypeWalletMetadata_lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_metadata_preview($0
    )
})
}
public func walletStateIsEqual(lhs: WalletLoadState, rhs: WalletLoadState) -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_state_is_equal(
        FfiConverterTypeWalletLoadState_lower(lhs),
        FfiConverterTypeWalletLoadState_lower(rhs),$0
    )
})
}
public func walletTypeToString(walletType: WalletType) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_cove_fn_func_wallet_type_to_string(
        FfiConverterTypeWalletType_lower(walletType),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_cove_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_cove_checksum_func_after_pin_action_user_message() != 26922) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_all_fiat_currencies() != 51329) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_create_transport_error_from_code() != 58675) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_default_node_selection() != 14665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_default_wallet_colors() != 39034) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_auth_manager_error() != 9186) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_multi_format_error() != 25386) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_send_flow_fiat_on_change_error() != 38097) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_tap_signer_reader_error() != 18001) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_wallet_error() != 7428) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_describe_wallet_manager_error() != 13784) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_discovery_state_is_equal() != 12390) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_fiat_amount_preview_new() != 6422) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_fiat_currency_emoji() != 7081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_fiat_currency_suffix() != 50079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_fiat_currency_symbol() != 58040) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_fiat_currency_to_string() != 50490) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_grouped_plain_words_of() != 45802) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_hardware_wallet_is_tap_signer() != 55324) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_hash_route() != 32817) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_is_fiat_currency_symbol() != 27192) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_is_route_equal() != 25732) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_is_tap_signer_route_equal() != 46761) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_is_valid_chain_code() != 48052) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_multi_format_try_from_nfc_message() != 9847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_node_selection_to_node() != 57209) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_number_of_words_in_groups() != 14214) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_number_of_words_to_word_count() != 24846) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_preview_new_legacy_found_address() != 36773) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_preview_new_wrapped_found_address() != 57500) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_prices_are_equal() != 41102) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_string_or_data_try_into_multi_format() != 34953) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_confirm_pin_args_new_from_new_pin() != 45606) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_error_is_auth_error() != 29742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_error_is_no_backup_error() != 60157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_response_backup_response() != 38008) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_response_change_response() != 53410) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_response_derive_response() != 27872) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_response_setup_response() != 1061) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_response_sign_response() != 40167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_setup_complete_new() != 48955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_tap_signer_setup_retry_continue_cmd() != 32514) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_transaction_preview_confirmed_new() != 43706) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_transaction_preview_unconfirmed_new() != 49725) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_transactions_preview_new() != 60166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_update_prices_if_needed() != 27986) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_address_type_less_than() != 14566) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_address_type_to_string() != 36064) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_metadata_hash() != 62639) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_metadata_is_equal() != 19369) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_metadata_preview() != 1229) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_state_is_equal() != 27037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_func_wallet_type_to_string() != 18258) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_authpin_check() != 17948) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_autocomplete_autocomplete() != 4748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_autocomplete_is_valid_word() != 18021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_balance_spendable() != 18496) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_balance_total() != 44866) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bbqrjoinresult_final_result() != 44157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bbqrjoinresult_is_complete() != 4119) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bbqrjoinresult_parts_left() != 39828) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bbqrjoined_get_grouped_words() != 36018) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bbqrjoined_get_seed_words() != 64693) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39autocomplete_autocomplete() != 21847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39autocomplete_is_valid_word() != 19081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39autocomplete_next_field_number() != 24967) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39wordspecificautocomplete_autocomplete() != 34680) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39wordspecificautocomplete_is_bip39_word() != 59249) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39wordspecificautocomplete_is_valid_word() != 4400) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bip39wordspecificautocomplete_next_field_number() != 39232) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bitcointransaction_normalize_tx_id() != 15620) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bitcointransaction_tx_id() != 48931) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_bitcointransaction_tx_id_hash() != 59940) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_boxedroute_route() != 26050) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_block_height() != 62845) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_block_height_fmt() != 22839) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_confirmed_at() != 21481) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_confirmed_at_fmt() != 28835) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_confirmed_at_fmt_with_time() != 36703) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_fiat_amount() != 31522) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_id() != 12001) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_label() != 17010) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_label_opt() != 1648) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_confirmedtransaction_sent_and_received() != 59599) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_converter_convert_from_fiat() != 7008) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_converter_convert_from_fiat_string() != 32367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_converter_get_fiat_value() != 6670) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_converter_remove_fiat_suffix() != 50019) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_database_dangerous_reset_all_data() != 31513) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_database_global_config() != 4476) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_database_historical_prices() != 14167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_database_unsigned_transactions() != 8913) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_database_wallets() != 38115) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_auth_type() != 34438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_dangerous_wipe_all_data() != 63122) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_debug_or_release() != 37153) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_dispatch() != 48712) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_email_mailto() != 16522) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_fees() != 44559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_find_tap_signer_wallet() != 59228) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_get_tap_signer_backup() != 49269) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_git_short_hash() != 10133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_go_to_selected_wallet() != 5364) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_has_wallets() != 3792) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_init_on_start() != 44630) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_listen_for_updates() != 48795) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_load_and_reset_default_route() != 16043) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_load_and_reset_default_route_after() != 14335) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_network() != 11705) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_num_wallets() != 28903) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_prices() != 12896) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_reset_default_route_to() != 40613) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_reset_nested_routes_to() != 13093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_save_tap_signer_backup() != 59132) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_select_wallet() != 63389) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_state() != 19551) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_unverified_wallet_ids() != 31327) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffiapp_version() != 12247) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_filehandler_read() != 31508) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_fingerprint_as_lowercase() != 25321) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_fingerprint_as_uppercase() != 11522) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_authtype() != 38700) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_clear_selected_wallet() != 22146) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_colorscheme() != 52955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_delete() != 13364) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_delete_hashed_pin_code() != 4238) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_get() != 52128) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_hashed_pin_code() != 15707) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_is_in_decoy_mode() != 20658) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_is_in_main_mode() != 45671) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_select_wallet() != 8095) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_selectedfiatcurrency() != 8392) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_selected_network() != 42948) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_selected_node() != 31353) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_selected_wallet() != 51431) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_set() != 31033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_setcolorscheme() != 11460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_set_hashed_pin_code() != 36127) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_set_selected_network() != 31093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_set_selected_node() != 35090) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalconfigtable_wallet_mode() != 13805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalflagtable_get() != 42810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalflagtable_get_bool_config() != 34785) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalflagtable_set() != 23016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_globalflagtable_toggle_bool_config() != 12062) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_headericonpresenter_background_color() != 37889) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_headericonpresenter_icon_color() != 50119) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_headericonpresenter_ring_color() != 10146) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_delete_labels_for_txn() != 25078) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_export() != 53996) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_export_default_file_name() != 49133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_has_labels() != 1029) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_import() != 22916) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_importlabels() != 51697) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_insert_or_update_labels_for_txn() != 19492) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_labelmanager_transaction_label() != 43320) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_mnemonic_all_words() != 45039) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_mnemonic_words() != 35319) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_add_part() != 11179) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_get_grouped_words() != 21029) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_handle_scan_result() != 3857) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_is_bbqr() != 22296) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_is_seed_qr() != 10256) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_multiqr_total_parts() != 51119) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_check_and_save_node() != 48519) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_check_selected_node() != 19872) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_node_list() != 23402) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_parse_custom_node() != 54190) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_select_preset_node() != 36330) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_nodeselector_selected_node() != 29849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_priceresponse_get() != 7353) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_priceresponse_get_for_currency() != 7349) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_cold_wallet_import() != 14120) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_hot_wallet() != 7846) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_hot_wallet_import_from_scan() != 63262) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_is_same_parent_route() != 43168) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_load_and_reset_nested_to() != 36095) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_load_and_reset_to() != 41201) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_load_and_reset_to_after() != 39743) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_main_wallet_settings() != 49503) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_nested_settings() != 56664) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_nested_wallet_settings() != 12964) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_new_hot_wallet() != 51032) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_new_wallet_select() != 21343) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_qr_import() != 17980) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_secret_words() != 37405) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_send() != 62083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_send_confirm() != 17995) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_send_hardware_export() != 30298) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_send_set_amount() != 29344) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_routefactory_wallet_settings() != 4563) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_auth_type() != 13301) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_checkdecoypin() != 58987) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_checkwipedatapin() != 25594) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_delete_decoy_pin() != 43659) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_delete_wipe_data_pin() != 30374) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_dispatch() != 58198) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_is_decoy_pin_enabled() != 21960) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_is_in_decoy_mode() != 46889) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_is_wipe_data_pin_enabled() != 29022) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_listen_for_updates() != 6029) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_locked_at() != 46905) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_send() != 55296) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_set_auth_type() != 20435) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_set_decoy_pin() != 2272) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_set_locked_at() != 12721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_set_wipe_data_pin() != 20226) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_switch_to_decoy_mode() != 54579) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_switch_to_main_mode() != 17037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustauthmanager_validate_pin_settings() != 46433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustimportwalletmanager_dispatch() != 61781) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustimportwalletmanager_import_wallet() != 11259) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustimportwalletmanager_listen_for_updates() != 20416) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_bip_39_words() != 45973) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_bip_39_words_grouped() != 16310) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_card_indexes() != 62341) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_dispatch() != 51484) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_get_state() != 18821) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_listen_for_updates() != 33763) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_number_of_words_count() != 15545) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustpendingwalletmanager_save_wallet() != 15246) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_address_at() != 57971) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_amount_in_fiat() != 42993) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_balance() != 59906) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_balance_in_fiat() != 47457) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_broadcast_transaction() != 32181) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_build_drain_transaction() != 50826) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_build_transaction() != 47886) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_build_transaction_with_fee_rate() != 34180) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_confirm_txn() != 15631) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_convert_and_display_fiat() != 37610) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_convert_from_fiat_string() != 49604) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_convert_to_fiat() != 36192) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_create_transactions_with_fiat_export() != 53701) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_current_block_height() != 4472) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_delete_unsigned_transaction() != 65432) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_delete_wallet() != 52855) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_dispatch() != 24198) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_display_amount() != 21016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_display_fiat_amount() != 39867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_display_sent_and_received_amount() != 9766) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_fee_rate_options() != 24113) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_fee_rate_options_with_total_fee() != 19094) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_fee_rate_options_with_total_fee_for_drain() != 25440) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_fees() != 1824) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_finalize_psbt() != 10780) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_force_update_height() != 23832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_force_wallet_scan() != 44725) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_get_fee_options() != 64948) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_get_transactions() != 31100) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_get_unsigned_transactions() != 63072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_label_manager() != 20510) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_listen_for_updates() != 14977) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_mark_wallet_as_verified() != 7383) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_master_fingerprint() != 64933) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_next_address() != 53396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_number_of_confirmations() != 50545) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_number_of_confirmations_fmt() != 58278) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_save_unsigned_transaction() != 39162) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_selected_fiat_currency() != 3087) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_sent_and_received_fiat() != 17783) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_set_wallet_metadata() != 43968) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_sign_and_broadcast_transaction() != 1951) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_split_transaction_outputs() != 39849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_start_wallet_scan() != 17019) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_switch_to_different_wallet_address_type() != 22577) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_transaction_details() != 23048) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_validate_metadata() != 50071) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_wallet_metadata() != 65131) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_rustwalletmanager_word_validator() != 64012) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_seedqr_get_words() != 64188) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_seedqr_grouped_plain_words() != 35569) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_sendflowfiatonchangehandler_on_change() != 5451) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapsignerreader_continue_setup() != 43346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapsignerreader_last_response() != 39609) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapsignerreader_run() != 2710) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapsignerreader_setup() != 7185) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapsignerreader_sign() != 27496) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_address() != 44323) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_address_spaced_out() != 61966) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_amount() != 51220) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_amount_fiat() != 34436) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_amount_fiat_fmt() != 60211) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_amount_fmt() != 770) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_block_number() != 61262) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_block_number_fmt() != 52006) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_confirmation_date_time() != 54859) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_fee_fiat_fmt() != 62198) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_fee_fmt() != 1256) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_is_confirmed() != 54031) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_is_received() != 54839) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_is_sent() != 7556) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_sent_sans_fee_fiat_fmt() != 62275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_sent_sans_fee_fmt() != 7229) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_transaction_label() != 1186) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_transaction_url() != 12235) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_transactiondetails_tx_id() != 53353) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unconfirmedtransaction_fiat_amount() != 59016) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unconfirmedtransaction_id() != 8735) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unconfirmedtransaction_label() != 12913) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unconfirmedtransaction_last_seen() != 29089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unconfirmedtransaction_sent_and_received() != 30241) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransaction_details() != 8690) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransaction_id() != 41003) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransaction_label() != 12609) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransaction_sending_amount() != 39036) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransaction_spending_amount() != 16734) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionrecord_confirm_details() != 62061) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionrecord_created_at() != 62407) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionrecord_tx_id() != 62136) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionrecord_wallet_id() != 24383) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionstable_gettx() != 56572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_unsignedtransactionstable_gettxthrow() != 57009) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_wallet_id() != 31704) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_walletstable_all() != 19569) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_walletstable_all_sorted_active() != 16744) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_walletstable_is_empty() != 57763) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_walletstable_len() != 7095) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_wordvalidator_is_complete() != 18257) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_wordvalidator_is_word_correct() != 39689) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_wordvalidator_possible_words() != 25098) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_addressargs_new() != 49212) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_authpin_new() != 39860) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_balance_zero() != 55253) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bip39autocomplete_new() != 41839) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bip39wordspecificautocomplete_new() != 49814) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bitcointransaction_new() != 54397) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bitcointransaction_tryfromdata() != 16116) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bitcointransaction_tryfromnfcmessage() != 45955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_bitcointransaction_tryfromstringordata() != 18512) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_boxedroute_new() != 62486) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_converter_new() != 25365) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_database_new() != 41458) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_ffiapp_new() != 11955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_filehandler_new() != 50695) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_fingerprint_new() != 38537) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_headericonpresenter_new() != 10425) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_labelmanager_new() != 9520) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_mnemonic_new() != 49454) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_mnemonic_preview() != 3882) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_multiqr_new_from_string() != 2028) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_multiqr_try_new() != 18617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_multiqr_try_new_from_data() != 36957) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_nodeselector_new() != 61659) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_routefactory_new() != 4959) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustauthmanager_new() != 30134) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustimportwalletmanager_new() != 63844) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustpendingwalletmanager_new() != 12185) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustwalletmanager_new() != 167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustwalletmanager_preview_new_wallet() != 14132) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustwalletmanager_preview_new_wallet_with_metadata() != 31333) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustwalletmanager_try_new_from_tap_signer() != 5777) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_rustwalletmanager_try_new_from_xpub() != 28304) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_seedqr_new_from_data() != 13640) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_seedqr_new_from_str() != 6520) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_sendflowfiatonchangehandler_new() != 23785) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_setupcmd_try_new() != 59849) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_tapsignerreader_new() != 46126) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_confirmed_received() != 6979) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_confirmed_sent() != 20500) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_new_confirmed() != 2385) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_new_with_label() != 22136) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_pending_received() != 1731) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_transactiondetails_preview_pending_sent() != 378) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_unsignedtransaction_preview_new() != 1909) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_wallet_new_from_export() != 11192) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_wallet_new_from_xpub() != 31726) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_wallet_previewnewwallet() != 56877) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_constructor_wordvalidator_preview() != 53831) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_authmanagerreconciler_reconcile() != 44010) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_ffireconcile_reconcile() != 54238) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_importwalletmanagerreconciler_reconcile() != 37305) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_pendingwalletmanagerreconciler_reconcile() != 39280) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapcardtransportprotocol_set_message() != 41763) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapcardtransportprotocol_append_message() != 6492) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_tapcardtransportprotocol_transmit_apdu() != 5326) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_cove_checksum_method_walletmanagerreconciler_reconcile() != 1495) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitAutoComplete()
    uniffiCallbackInitAuthManagerReconciler()
    uniffiCallbackInitFfiReconcile()
    uniffiCallbackInitImportWalletManagerReconciler()
    uniffiCallbackInitPendingWalletManagerReconciler()
    uniffiCallbackInitTapcardTransportProtocol()
    uniffiCallbackInitWalletManagerReconciler()
    uniffiEnsureCoveNfcInitialized()
    uniffiEnsureCoveDeviceInitialized()
    uniffiEnsureCoveTypesInitialized()
    uniffiEnsureCoveTapCardInitialized()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureCoveInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all